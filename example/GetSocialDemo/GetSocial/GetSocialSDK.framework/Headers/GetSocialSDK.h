#include <TargetConditionals.h>
#if TARGET_OS_SIMULATOR
// Generated by Apple Swift version 5.1 (swiftlang-1100.0.270.13 clang-1100.0.33.7)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import UserNotifications;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="GetSocialSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// Describe action object.
SWIFT_CLASS_NAMED("Action")
@interface GetSocialAction : NSObject
/// Action type.
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
/// Action data.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull data;
/// Create an action with the specified type.
/// \param type Action type.
///
/// \param data Attached data.
///
///
/// returns:
///
/// New <code>Action</code> instance.
+ (GetSocialAction * _Nonnull)actionWithType:(NSString * _Nonnull)type data:(NSDictionary<NSString *, NSString *> * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Define keys for action data.
SWIFT_CLASS_NAMED("ActionDataKey")
@interface GetSocialActionDataKey : NSObject
/// ActivityId are mutually exclusive.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull openActivity_ActivityId;)
+ (NSString * _Nonnull)openActivity_ActivityId SWIFT_WARN_UNUSED_RESULT;
/// Optional. Can be present with ActivityId only.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull openActivity_CommentId;)
+ (NSString * _Nonnull)openActivity_CommentId SWIFT_WARN_UNUSED_RESULT;
/// TopicId identifies the source of activity.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull openActivity_TopicId;)
+ (NSString * _Nonnull)openActivity_TopicId SWIFT_WARN_UNUSED_RESULT;
/// UserId identifies the source of activity.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull openActivity_UserId;)
+ (NSString * _Nonnull)openActivity_UserId SWIFT_WARN_UNUSED_RESULT;
/// GroupId are mutually exclusive.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull openActivity_GroupId;)
+ (NSString * _Nonnull)openActivity_GroupId SWIFT_WARN_UNUSED_RESULT;
/// ID of user to be opened.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull openProfile_UserId;)
+ (NSString * _Nonnull)openProfile_UserId SWIFT_WARN_UNUSED_RESULT;
/// ID of user who wants to add as friend.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull addFriend_UserId;)
+ (NSString * _Nonnull)addFriend_UserId SWIFT_WARN_UNUSED_RESULT;
/// URL to be opened.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull openUrl_Url;)
+ (NSString * _Nonnull)openUrl_Url SWIFT_WARN_UNUSED_RESULT;
/// Promo Code to claim.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull claimPromoCode_PromoCode;)
+ (NSString * _Nonnull)claimPromoCode_PromoCode SWIFT_WARN_UNUSED_RESULT;
/// GroupId.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull addGroupMember_GroupId;)
+ (NSString * _Nonnull)addGroupMember_GroupId SWIFT_WARN_UNUSED_RESULT;
/// User Id.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull addGroupMember_UserId;)
+ (NSString * _Nonnull)addGroupMember_UserId SWIFT_WARN_UNUSED_RESULT;
/// Invitation token.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull addGroupMember_InvitationToken;)
+ (NSString * _Nonnull)addGroupMember_InvitationToken SWIFT_WARN_UNUSED_RESULT;
/// Role.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull addGroupMember_Role;)
+ (NSString * _Nonnull)addGroupMember_Role SWIFT_WARN_UNUSED_RESULT;
/// Status.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull addGroupMember_Status;)
+ (NSString * _Nonnull)addGroupMember_Status SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Define action types.
SWIFT_CLASS_NAMED("ActionType")
@interface GetSocialActionType : NSObject
/// Open user’s profile action.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull openProfile;)
+ (NSString * _Nonnull)openProfile SWIFT_WARN_UNUSED_RESULT;
/// Open an activity action.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull openActivity;)
+ (NSString * _Nonnull)openActivity SWIFT_WARN_UNUSED_RESULT;
/// Open invites UI action.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull openInvites;)
+ (NSString * _Nonnull)openInvites SWIFT_WARN_UNUSED_RESULT;
/// Open an url action.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull openUrl;)
+ (NSString * _Nonnull)openUrl SWIFT_WARN_UNUSED_RESULT;
/// Add a friend action.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull addFriend;)
+ (NSString * _Nonnull)addFriend SWIFT_WARN_UNUSED_RESULT;
/// Claim Promo Code action.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull claimPromoCode;)
+ (NSString * _Nonnull)claimPromoCode SWIFT_WARN_UNUSED_RESULT;
/// Add group member.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull addGroupMember;)
+ (NSString * _Nonnull)addGroupMember SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe generic paging query.
SWIFT_CLASS_NAMED("PagingQuery")
@interface GetSocialPagingQuery : NSObject
/// Default limit.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger defaultLimit;)
+ (NSInteger)defaultLimit SWIFT_WARN_UNUSED_RESULT;
/// Next cursor to load next result page.
/// Set it to <code>nil</code> or empty string to get first result page.
@property (nonatomic, copy) NSString * _Nullable nextCursor;
/// Limit.
@property (nonatomic) NSInteger limit;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class GetSocialActivitiesQuery;

/// Describe activities paging query.
SWIFT_CLASS_NAMED("ActivitiesPagingQuery")
@interface GetSocialActivitiesPagingQuery : GetSocialPagingQuery
@property (nonatomic, readonly, strong) GetSocialActivitiesQuery * _Nonnull query;
/// Constructor.
/// \param query <code>ActivitiesQuery</code> instance.
///
///
/// returns:
///
/// New <code>ActivitiesPagingQuery</code> instance.
- (nonnull instancetype)initWithQuery:(GetSocialActivitiesQuery * _Nonnull)query OBJC_DESIGNATED_INITIALIZER;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Generic paging result object.
SWIFT_CLASS_NAMED("PagingResult")
@interface GetSocialPagingResult : NSObject
/// Define next cursor to load next page.
/// If value is empty there is no more page to load.
@property (nonatomic, readonly, copy) NSString * _Nonnull nextCursor;
/// Define if there is a next page to load.
@property (nonatomic, readonly) BOOL isLastPage;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class GetSocialActivity;

/// Result of getting activities method.
SWIFT_CLASS_NAMED("ActivitiesPagingResult")
@interface GetSocialActivitiesPagingResult : GetSocialPagingResult
/// List of activities.
@property (nonatomic, readonly, copy) NSArray<GetSocialActivity *> * _Nonnull activities;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class GetSocialUserId;
@class GetSocialPostActivityTarget;
@class GetSocialAnnouncementsQuery;

/// Describe query to get activities.
SWIFT_CLASS_NAMED("ActivitiesQuery")
@interface GetSocialActivitiesQuery : NSObject
@property (nonatomic, readonly, strong) GetSocialUserId * _Nullable byUser;
@property (nonatomic, readonly, copy) NSString * _Nullable tag;
/// Create a query to get activities for a specific user.
/// \param id User id.
///
///
/// returns:
///
/// New <code>ActivitiesQuery</code> instance.
+ (GetSocialActivitiesQuery * _Nonnull)feedOfUserWithId:(GetSocialUserId * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Create a query to get activities in a specific topic.
/// \param id Topic id.
///
///
/// returns:
///
/// New <code>ActivitiesQuery</code> instance.
+ (GetSocialActivitiesQuery * _Nonnull)inTopicWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Create a query to get activities in a specific group.
/// \param id Group id.
///
///
/// returns:
///
/// New <code>ActivitiesQuery</code> instance.
+ (GetSocialActivitiesQuery * _Nonnull)inGroupWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Create a query to get activities from all topics.
///
/// returns:
///
/// New <code>ActivitiesQuery</code> instance.
+ (GetSocialActivitiesQuery * _Nonnull)inAllTopics SWIFT_WARN_UNUSED_RESULT;
/// Create a query to get activities in current user timeline.
///
/// returns:
///
/// New <code>ActivitiesQuery</code> instance.
+ (GetSocialActivitiesQuery * _Nonnull)timeline SWIFT_WARN_UNUSED_RESULT;
/// Create a query to get all activities from every target.
///
/// returns:
///
/// New <code>ActivitiesQuery</code> instance.
+ (GetSocialActivitiesQuery * _Nonnull)everywhere SWIFT_WARN_UNUSED_RESULT;
/// Filter activities by author.
///
/// returns:
///
/// New <code>ActivitiesQuery</code> instance.
- (GetSocialActivitiesQuery * _Nonnull)byUserWithId:(GetSocialUserId * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Filter activities by a tag.
///
/// returns:
///
/// New <code>ActivitiesQuery</code> instance.
- (GetSocialActivitiesQuery * _Nonnull)withTag:(NSString * _Nonnull)tag SWIFT_WARN_UNUSED_RESULT;
/// Converts query to post target.
/// - returns:
/// <code>PostActivityTarget</code> instance.
- (GetSocialPostActivityTarget * _Nullable)asPostTarget SWIFT_WARN_UNUSED_RESULT;
/// Converts query to announcements query.
/// - returns:
/// <code>AnnouncementsQuery</code> instance.
- (GetSocialAnnouncementsQuery * _Nullable)asAnnouncementsQuery SWIFT_WARN_UNUSED_RESULT;
/// Query to get comments for by a specific user.
/// \param id Activity id.
///
///
/// returns:
///
/// New <code>ActivitiesQuery</code> instance.
+ (GetSocialActivitiesQuery * _Nonnull)commentsToActivityWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class GetSocialUser;
@class GetSocialMediaAttachment;
@class GetSocialActivityButton;
@class GetSocialUserReactions;
@class GetSocialMention;
@class GetSocialCommunitiesEntity;

/// Describe an activity instance.
SWIFT_CLASS_NAMED("Activity")
@interface GetSocialActivity : NSObject
/// Activity id.
@property (nonatomic, readonly, copy) NSString * _Nonnull activityId;
/// Text content.
@property (nonatomic, readonly, copy) NSString * _Nullable text;
/// Author.
@property (nonatomic, readonly, strong) GetSocialUser * _Nonnull author;
/// Media attachments.
@property (nonatomic, readonly, copy) NSArray<GetSocialMediaAttachment *> * _Nonnull mediaAttachments;
/// Activity button.
@property (nonatomic, readonly, strong) GetSocialActivityButton * _Nullable button;
/// Activity type.
@property (nonatomic, readonly, copy) NSString * _Nullable type;
/// Activity is announcement or not.
@property (nonatomic, readonly) BOOL isAnnouncement;
/// Number of comments.
@property (nonatomic, readonly) NSInteger commentsCount;
/// Number of reactions by type.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSNumber *> * _Nonnull reactionsCount;
/// Current user’s reactions.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull myReactions;
/// Reactions.
@property (nonatomic, readonly, copy) NSArray<GetSocialUserReactions *> * _Nonnull reactions;
/// Commenters.
@property (nonatomic, readonly, copy) NSArray<GetSocialUser *> * _Nonnull commenters;
/// Custom properties.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull properties;
/// Date of creation as UNIX timestamp in UTC.
@property (nonatomic, readonly) int64_t createdAt;
/// Mentions.
@property (nonatomic, readonly, copy) NSArray<GetSocialMention *> * _Nonnull mentions;
/// Number of views.
@property (nonatomic, readonly) NSInteger viewCount;
/// Parent of activity.
@property (nonatomic, readonly, strong) GetSocialCommunitiesEntity * _Nullable source;
/// Status of activity. For possible values check {ActivityStatus} class.
@property (nonatomic, readonly, copy) NSString * _Nonnull status;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe activity button.
SWIFT_CLASS_NAMED("ActivityButton")
@interface GetSocialActivityButton : NSObject
/// Button title.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// Action to be executed when button is pressed.
@property (nonatomic, readonly, strong) GetSocialAction * _Nonnull action;
/// Create new <code>ActionButton</code> instance.
/// - parameters:
/// - title:    Button title.
/// - action:   Action to be executed when button is pressed.
/// - returns:
/// New <code>ActivityButton</code> instance.
+ (GetSocialActivityButton * _Nonnull)createWithTitle:(NSString * _Nonnull)title action:(GetSocialAction * _Nonnull)action SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Describe Activity content.
SWIFT_CLASS_NAMED("ActivityContent")
@interface GetSocialActivityContent : NSObject
/// Text content.
@property (nonatomic, copy) NSString * _Nullable text;
/// Attachments, like image and video.
@property (nonatomic, copy) NSArray<GetSocialMediaAttachment *> * _Nonnull attachments;
/// Activity button.
@property (nonatomic, strong) GetSocialActivityButton * _Nullable button;
/// Custom properties.
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull properties;
/// Set property.
/// \param value Value to set.
///
/// \param forKey Key for the value.
///
- (void)setPropertyValue:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)forKey;
/// Append media attachment.
/// \param attachment Media attachment.
///
- (void)appendMediaAttachment:(GetSocialMediaAttachment * _Nonnull)attachment;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC12GetSocialSDK14ActivityStatus")
@interface ActivityStatus : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class GetSocialUserIdList;
enum GetSocialMemberRole : NSInteger;
enum GetSocialMemberStatus : NSInteger;

/// Describe updating group members query.
SWIFT_CLASS_NAMED("AddGroupMembersQuery")
@interface GetSocialAddGroupMembersQuery : NSObject
/// Create a query to add new members to a group. By default users added with role <code>.member</code> and status <code>.member</code>.
/// \param id Group Id.
///
/// \param userIds User ids to add.
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id userIds:(GetSocialUserIdList * _Nonnull)userIds OBJC_DESIGNATED_INITIALIZER;
/// Sets role to new users.
/// \param role User role.
///
///
/// returns:
///
/// Updated <code>AddGroupMembersQuery</code> instance.
- (GetSocialAddGroupMembersQuery * _Nonnull)withRole:(enum GetSocialMemberRole)role SWIFT_WARN_UNUSED_RESULT;
/// Sets status to new users.
/// \param status User status.
///
///
/// returns:
///
/// Updated <code>AddGroupMembersQuery</code> instance.
- (GetSocialAddGroupMembersQuery * _Nonnull)withMemberStatus:(enum GetSocialMemberStatus)status SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class GetSocialPurchaseData;

/// Defines interface for Analytics.
SWIFT_CLASS_NAMED("Analytics")
@interface GetSocialAnalytics : NSObject
/// Report in-app purchase.
/// \param data Purchase details.
///
///
/// returns:
///
/// <code>true</code>, if operation was successful, otherwise <code>false</code>.
+ (BOOL)trackPurchase:(GetSocialPurchaseData * _Nonnull)data;
/// Report custom event.
/// \param event Event name.
///
/// \param properties Event properties.
///
///
/// returns:
///
/// <code>true</code>, if operation was successful, otherwise <code>false</code>.
+ (BOOL)trackCustomEvent:(NSString * _Nonnull)event properties:(NSDictionary<NSString *, NSString *> * _Nullable)properties;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12GetSocialSDK19AnalyticsEventNames")
@interface AnalyticsEventNames : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull appSessionStart;)
+ (NSString * _Nonnull)appSessionStart SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull appSessionEnd;)
+ (NSString * _Nonnull)appSessionEnd SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull uiContentSession;)
+ (NSString * _Nonnull)uiContentSession SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull uiError;)
+ (NSString * _Nonnull)uiError SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkError;)
+ (NSString * _Nonnull)sdkError SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkLog;)
+ (NSString * _Nonnull)sdkLog SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull inviteSent;)
+ (NSString * _Nonnull)inviteSent SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull inviteCanceled;)
+ (NSString * _Nonnull)inviteCanceled SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull inviteFailed;)
+ (NSString * _Nonnull)inviteFailed SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull uiInviteClicked;)
+ (NSString * _Nonnull)uiInviteClicked SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull installReferrerReceivedAfterInit;)
+ (NSString * _Nonnull)installReferrerReceivedAfterInit SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull uiUserActivityActionClick;)
+ (NSString * _Nonnull)uiUserActivityActionClick SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull uiUserActivityPlayVideoClick;)
+ (NSString * _Nonnull)uiUserActivityPlayVideoClick SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull pushNotificationReceived;)
+ (NSString * _Nonnull)pushNotificationReceived SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull pushNotificationClicked;)
+ (NSString * _Nonnull)pushNotificationClicked SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull inappPurchase;)
+ (NSString * _Nonnull)inappPurchase SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull uiNotificationsClick;)
+ (NSString * _Nonnull)uiNotificationsClick SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12GetSocialSDK24AnalyticsEventProperties")
@interface AnalyticsEventProperties : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull action;)
+ (NSString * _Nonnull)action SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull activitiesSource;)
+ (NSString * _Nonnull)activitiesSource SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull activityLikersSource;)
+ (NSString * _Nonnull)activityLikersSource SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull activityId;)
+ (NSString * _Nonnull)activityId SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull commentLikersSource;)
+ (NSString * _Nonnull)commentLikersSource SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull commentsSource;)
+ (NSString * _Nonnull)commentsSource SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull content;)
+ (NSString * _Nonnull)content SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull duration;)
+ (NSString * _Nonnull)duration SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorKey;)
+ (NSString * _Nonnull)errorKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorMessage;)
+ (NSString * _Nonnull)errorMessage SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorSeverity;)
+ (NSString * _Nonnull)errorSeverity SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorSource;)
+ (NSString * _Nonnull)errorSource SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull invitesSource;)
+ (NSString * _Nonnull)invitesSource SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull isOnline;)
+ (NSString * _Nonnull)isOnline SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull notificationActionButtonId;)
+ (NSString * _Nonnull)notificationActionButtonId SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull notificationActionType;)
+ (NSString * _Nonnull)notificationActionType SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull notificationId;)
+ (NSString * _Nonnull)notificationId SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull notificationsClickActionButton;)
+ (NSString * _Nonnull)notificationsClickActionButton SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull notificationsClickListItem;)
+ (NSString * _Nonnull)notificationsClickListItem SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull notificationsClickMarkAsReadButton;)
+ (NSString * _Nonnull)notificationsClickMarkAsReadButton SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull notificationsClickMarkAllAsReadButton;)
+ (NSString * _Nonnull)notificationsClickMarkAllAsReadButton SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull notificationsClickRemoveButton;)
+ (NSString * _Nonnull)notificationsClickRemoveButton SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull notificationsClickRemoveAllButton;)
+ (NSString * _Nonnull)notificationsClickRemoveAllButton SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull notificationsClickSource;)
+ (NSString * _Nonnull)notificationsClickSource SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull notificationsSource;)
+ (NSString * _Nonnull)notificationsSource SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull price;)
+ (NSString * _Nonnull)price SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull priceCurrency;)
+ (NSString * _Nonnull)priceCurrency SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull provider;)
+ (NSString * _Nonnull)provider SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull productId;)
+ (NSString * _Nonnull)productId SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull productTitle;)
+ (NSString * _Nonnull)productTitle SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull productType;)
+ (NSString * _Nonnull)productType SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull purchaseDataAuto;)
+ (NSString * _Nonnull)purchaseDataAuto SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull purchaseDataManual;)
+ (NSString * _Nonnull)purchaseDataManual SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull purchaseDate;)
+ (NSString * _Nonnull)purchaseDate SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull purchaseId;)
+ (NSString * _Nonnull)purchaseId SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull purchaseState;)
+ (NSString * _Nonnull)purchaseState SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull source;)
+ (NSString * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sourceValueUser;)
+ (NSString * _Nonnull)sourceValueUser SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull subProvider;)
+ (NSString * _Nonnull)subProvider SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull title;)
+ (NSString * _Nonnull)title SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull tokenKey;)
+ (NSString * _Nonnull)tokenKey SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Result of getting announcements method.
SWIFT_CLASS_NAMED("AnnouncementsPagingResult")
@interface GetSocialAnnouncementsPagingResult : GetSocialPagingResult
/// List of activities.
@property (nonatomic, readonly, copy) NSArray<GetSocialActivity *> * _Nonnull activities;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Describe query to get announcements.
SWIFT_CLASS_NAMED("AnnouncementsQuery")
@interface GetSocialAnnouncementsQuery : NSObject
/// Create a query to get announcements for a specific user.
/// \param id User id.
///
///
/// returns:
///
/// New <code>AnnouncementsQuery</code> instance.
+ (GetSocialAnnouncementsQuery * _Nonnull)forFeedOfUserWithId:(GetSocialUserId * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Create a query to get announcements in a topic.
/// \param id Topic id.
///
///
/// returns:
///
/// New <code>AnnouncementsQuery</code> instance.
+ (GetSocialAnnouncementsQuery * _Nonnull)inTopicWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Create a query to get announcements in user’s timeline.
///
/// returns:
///
/// New <code>AnnouncementsQuery</code> instance.
+ (GetSocialAnnouncementsQuery * _Nonnull)timeline SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_PROTOCOL("_TtP12GetSocialSDK21AtomicIntegerProvider_")
@protocol AtomicIntegerProvider
- (NSInteger)incrementAndGet SWIFT_WARN_UNUSED_RESULT;
@end


/// Describe ban info object.
SWIFT_CLASS_NAMED("BanInfo")
@interface GetSocialBanInfo : NSObject
/// Ban reason.
@property (nonatomic, readonly, copy) NSString * _Nullable reason;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class GetSocialFriendsQuery;
@class GetSocialFriendsPagingQuery;
@class GetSocialFriendsPagingResult;
@class GetSocialSuggestedFriendsPagingQuery;
@class GetSocialSuggestedFriendsPagingResult;
@class GetSocialUsersPagingQuery;
@class GetSocialUsersPagingResult;
@class GetSocialUsersQuery;
@class GetSocialFollowQuery;
@class GetSocialFollowersPagingQuery;
@class GetSocialFollowersQuery;
@class GetSocialReactionsPagingQuery;
@class GetSocialReactionsPagingResult;
enum GetSocialReportingReason : NSInteger;
@class GetSocialRemoveActivitiesQuery;
@class GetSocialTagsQuery;
@class GetSocialTopic;
@class GetSocialTopicsPagingQuery;
@class GetSocialTopicsPagingResult;
@class GetSocialTopicsQuery;
@class GetSocialGroupContent;
@class GetSocialGroup;
@class GetSocialMembersPagingQuery;
@class GetSocialGroupMembersPagingResult;
@class GetSocialGroupsPagingQuery;
@class GetSocialGroupsPagingResult;
@class GetSocialGroupsQuery;
@class GetSocialGroupMember;
@class GetSocialJoinGroupQuery;
@class GetSocialUpdateGroupMembersQuery;
@class RemoveGroupMembersQuery;
@class Membership;

/// Interface for community related methods.
SWIFT_CLASS_NAMED("Communities")
@interface GetSocialCommunities : NSObject
/// Add a friend to current user, if operation succeeds, they both became friends.
/// If try to add a user who is already a friend, <code>success</code> callback will be called,
/// but user will be added to friends list only once and friends count won’t be increased.
/// \param ids List of user identifiers to add as friend.
///
/// \param success Called if friend ware added.
///
/// \param failure Callend called if operation failed.
///
+ (void)addFriendsWithIds:(GetSocialUserIdList * _Nonnull)ids success:(void (^ _Nonnull)(NSInteger))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Remove users from friends list.
/// If trying to remove a user who is not a friend, success callback will be called,
/// and user’s friends count won’t be decreased.
/// <ul>
///   <li>
///     parameters
///     <ul>
///       <li>
///         ids:          List of user identifiers to remove from friends list.
///       </li>
///       <li>
///         success:      Called if friends were removed.
///       </li>
///       <li>
///         failure:      Called if operation failed.
///       </li>
///     </ul>
///   </li>
/// </ul>
+ (void)removeFriendsWithIds:(GetSocialUserIdList * _Nonnull)ids success:(void (^ _Nonnull)(NSInteger))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Check if users are friend of current user.
/// \param ids List of user identifiers.
///
/// \param success Called with result if users are friends or not.
///
/// \param failure Called if operation failed.
///
+ (void)areFriendsWithIds:(GetSocialUserIdList * _Nonnull)ids success:(void (^ _Nonnull)(NSDictionary<NSString *, NSNumber *> * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Check if user is friend of current user.
/// \param id User identifier.
///
/// \param success Called with result if user is friend or not.
///
/// \param failure Called if operation failed.
///
+ (void)isFriendWithId:(GetSocialUserId * _Nonnull)id success:(void (^ _Nonnull)(BOOL))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Return number of friends of a user.
/// \param query Query parameters.
///
/// \param success Called with number of friends.
///
/// \param failure Called if operation failed.
///
+ (void)friendsCountWithQuery:(GetSocialFriendsQuery * _Nonnull)query success:(void (^ _Nonnull)(NSInteger))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get a list of friends of a user.
/// \param query Query parameters.
///
/// \param success Called with friends of the provided user.
///
/// \param failure Called if operation failed.
///
+ (void)friendsWithQuery:(GetSocialFriendsPagingQuery * _Nonnull)query success:(void (^ _Nonnull)(GetSocialFriendsPagingResult * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get a list of suggested friends of current user.
/// \param query Query parameter.
///
/// \param success Called with list of suggested friends.
///
/// \param failure Called if operation failed.
///
+ (void)suggestedFriendsWithQuery:(GetSocialSuggestedFriendsPagingQuery * _Nonnull)query success:(void (^ _Nonnull)(GetSocialSuggestedFriendsPagingResult * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Set the provided users as friends of current user.
/// important:
///
/// Existing friends will be removed!
/// \param ids List of user identifiers.
///
/// \param success Called if friends was successfully set.
///
/// \param failure Called if operation failed.
///
+ (void)setFriendsWithIds:(GetSocialUserIdList * _Nonnull)ids success:(void (^ _Nonnull)(NSInteger))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Find users.
/// \param query Search parameter.
///
/// \param success Called with list of users. The list is empty if no user found.
///
/// \param failure Called if operation failed.
///
+ (void)usersWithQuery:(GetSocialUsersPagingQuery * _Nonnull)query success:(void (^ _Nonnull)(GetSocialUsersPagingResult * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get multiple users by identifiers.
/// \param ids List of user identifiers.
///
/// \param success Called with map of users, where key is user id. The list is empty if no user found.
///
/// \param failure Called if operation failed.
///
+ (void)usersWithIds:(GetSocialUserIdList * _Nonnull)ids success:(void (^ _Nonnull)(NSDictionary<NSString *, GetSocialUser *> * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get single user by identifier.
/// \param id User identifier.
///
/// \param success Called with the user instance.
///
/// \param failure Called if operation failed.
///
+ (void)userWithId:(GetSocialUserId * _Nonnull)id success:(void (^ _Nonnull)(GetSocialUser * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Return number of user matching the provided query.
/// \param query Query parameter.
///
/// \param success Called with number of users.
///
/// \param failure Called if operation failed.
///
+ (void)usersCountWithQuery:(GetSocialUsersQuery * _Nonnull)query success:(void (^ _Nonnull)(NSInteger))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Follow a community entity, like topic or user.
/// \param query Query parameter.
///
/// \param success Called if operation succeeded with total numbers of followed entities.
///
/// \param failure Called if operation failed.
///
+ (void)followWithQuery:(GetSocialFollowQuery * _Nonnull)query success:(void (^ _Nonnull)(NSInteger))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Unfollow a community entity, like topic or user.
/// \param query Query parameter.
///
/// \param success Called if operation succeeded total numbers of followed entities.
///
/// \param failure Called if operation failed.
///
+ (void)unfollowWithQuery:(GetSocialFollowQuery * _Nonnull)query success:(void (^ _Nonnull)(NSInteger))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Check if a user follows a community entity, like topic or user.
/// \param id User id.
///
/// \param query Query parameter.
///
/// \param success Called with result map, where key is the community entity’s id.
///
/// \param failure Called if operation failed.
///
+ (void)isFollowingWithUserId:(GetSocialUserId * _Nonnull)id query:(GetSocialFollowQuery * _Nonnull)query success:(void (^ _Nonnull)(NSDictionary<NSString *, NSNumber *> * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get followers of a community entity, like topic or user.
/// \param query Query parameter.
///
/// \param success Called with followers.
///
/// \param failure Called if operation failed.
///
+ (void)followersWithQuery:(GetSocialFollowersPagingQuery * _Nonnull)query success:(void (^ _Nonnull)(GetSocialUsersPagingResult * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get number of followers of a community entity, like topic or user.
/// \param query Query parameter.
///
/// \param success Called with number of followers.
///
/// \param failure Called if operation failed.
///
+ (void)followersCountWithQuery:(GetSocialFollowersQuery * _Nonnull)query success:(void (^ _Nonnull)(NSInteger))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get announcements.
/// \param query Query parameter.
///
/// \param success Called with list of announcements.
///
/// \param failure Called if operation failed.
///
+ (void)announcementsWithQuery:(GetSocialAnnouncementsQuery * _Nonnull)query success:(void (^ _Nonnull)(NSArray<GetSocialActivity *> * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get activities.
/// \param query Query parameter.
///
/// \param success Called with list of activities.
///
/// \param failure Called if operation failed.
///
+ (void)activitiesWithQuery:(GetSocialActivitiesPagingQuery * _Nonnull)query success:(void (^ _Nonnull)(GetSocialActivitiesPagingResult * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get a single activity.
/// \param id Activity id.
///
/// \param success Called with activity instance.
///
/// \param failure Called if operation failed.
///
+ (void)activityWithId:(NSString * _Nonnull)id success:(void (^ _Nonnull)(GetSocialActivity * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Post activity content to the specified target.
/// \param content Content to post.
///
/// \param target Where to post the content.
///
/// \param success Called with activity instance if operation succeeded.
///
/// \param failure Called if operation failed.
///
+ (void)postActivityContent:(GetSocialActivityContent * _Nonnull)content target:(GetSocialPostActivityTarget * _Nonnull)target success:(void (^ _Nonnull)(GetSocialActivity * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Update existing activity with provided content.
/// \param id Activity id to update.
///
/// \param content New content.
///
/// \param success Called with updated activity instance if operation succeeded.
///
/// \param failure Called if operation failed.
///
+ (void)updateActivityWithId:(NSString * _Nonnull)id content:(GetSocialActivityContent * _Nonnull)content success:(void (^ _Nonnull)(GetSocialActivity * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Add reaction to an activity.
/// \param reaction Reaction to add.
///
/// \param activityId To add the reaction to.
///
/// \param success Called if operation succeeded.
///
/// \param failure Called if operation failed.
///
+ (void)addReaction:(NSString * _Nonnull)reaction toActivityWithId:(NSString * _Nonnull)activityId success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Remove a reaction from an activity.
/// \param reaction Reaction to remove.
///
/// \param activityId To remove the reaction from.
///
/// \param success Called if operation succeeded.
///
/// \param failure Called if operation failed.
///
+ (void)removeReaction:(NSString * _Nonnull)reaction fromActivityWithId:(NSString * _Nonnull)activityId success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get reactions.
/// \param query Query parameters.
///
/// \param success Called with reactions.
///
/// \param failure Called if operation failed.
///
+ (void)reactionsWithQuery:(GetSocialReactionsPagingQuery * _Nonnull)query success:(void (^ _Nonnull)(GetSocialReactionsPagingResult * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Report an activity.
/// \param id Activity id to report.
///
/// \param reason Reason of reporting.
///
/// \param explanation Explanation of reason.
///
/// \param success Called if operation succeededs.
///
/// \param failure Called if operation failed.
///
+ (void)reportActivityWithId:(NSString * _Nonnull)id reason:(enum GetSocialReportingReason)reason explanation:(NSString * _Nullable)explanation success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Remove activities.
/// \param query Query parameters.
///
/// \param success Called if operation succeeded.
///
/// \param failure Called if operation failed.
///
+ (void)removeActivitiesWithQuery:(GetSocialRemoveActivitiesQuery * _Nonnull)query success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Find tags.
/// \param query Query parameters.
///
/// \param success Called with list of tags.
///
/// \param failure Called if operation failed.
///
+ (void)tagsWithQuery:(GetSocialTagsQuery * _Nonnull)query success:(void (^ _Nonnull)(NSArray<NSString *> * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get a single topic.
/// \param id Topic id.
///
/// \param success Called with topic.
///
/// \param failure Called if operation failed.
///
+ (void)topicWithId:(NSString * _Nonnull)id success:(void (^ _Nonnull)(GetSocialTopic * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Find topics.
/// \param query Query parameter.
///
/// \param success Called with list of topics.
///
/// \param failure Called if operation failed.
///
+ (void)topicsWithQuery:(GetSocialTopicsPagingQuery * _Nonnull)query success:(void (^ _Nonnull)(GetSocialTopicsPagingResult * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get number of topics.
/// \param query Query parameter.
///
/// \param success Called with number of topics.
///
/// \param failure Called if operation failed.
///
+ (void)topicsCountWithQuery:(GetSocialTopicsQuery * _Nonnull)query success:(void (^ _Nonnull)(NSInteger))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Creates a new group.
/// \param content Group content.
///
/// \param success Called with created group.
///
/// \param failure Called if operation failed.
///
+ (void)createGroupWithContent:(GetSocialGroupContent * _Nonnull)content success:(void (^ _Nonnull)(GetSocialGroup * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Updates an existing group.
/// \param id Existing group id.
///
/// \param content New group content.
///
/// \param success Called with updated topic.
///
/// \param failure Called if operation failed.
///
+ (void)updateGroupWithId:(NSString * _Nonnull)id content:(GetSocialGroupContent * _Nonnull)content success:(void (^ _Nonnull)(GetSocialGroup * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Removes groups.
/// \param ids Group ids to delete.
///
/// \param success Called if groups are removed.
///
/// \param failure Called if operation failed.
///
+ (void)removeGroupsWithIds:(NSArray<NSString *> * _Nonnull)ids success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get members of the provided group.
/// \param query Query parameter.
///
/// \param success Called with group members .
///
/// \param failure Called if operation failed.
///
+ (void)membersOfGroupWithQuery:(GetSocialMembersPagingQuery * _Nonnull)query success:(void (^ _Nonnull)(GetSocialGroupMembersPagingResult * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get groups.
/// \param query Query parameter.
///
/// \param success Called with groups.
///
/// \param failure Called if operation failed.
///
+ (void)groupsWithQuery:(GetSocialGroupsPagingQuery * _Nonnull)query success:(void (^ _Nonnull)(GetSocialGroupsPagingResult * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get number of groups.
/// \param query Query parameter.
///
/// \param success Called with number of groups .
///
/// \param failure Called if operation failed.
///
+ (void)groupsCountWithQuery:(GetSocialGroupsQuery * _Nonnull)query success:(void (^ _Nonnull)(NSInteger))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get group by id.
/// \param id Group id.
///
/// \param success Called with group .
///
/// \param failure Called if operation failed.
///
+ (void)groupWithId:(NSString * _Nonnull)id success:(void (^ _Nonnull)(GetSocialGroup * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Adds user to a group.
/// \param query Query parameter.
///
/// \param success Called with new group member .
///
/// \param failure Called if operation failed.
///
+ (void)addGroupMembersWithQuery:(GetSocialAddGroupMembersQuery * _Nonnull)query success:(void (^ _Nonnull)(NSArray<GetSocialGroupMember *> * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Current user joins a group.
/// \param query Query parameter.
///
/// \param success Called with new group member.
///
/// \param failure Called if operation failed.
///
+ (void)joinGroupWithQuery:(GetSocialJoinGroupQuery * _Nonnull)query success:(void (^ _Nonnull)(GetSocialGroupMember * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Updates an existing group member.
/// \param query Query parameter.
///
/// \param success Called with updated group member.
///
/// \param failure Called if operation failed.
///
+ (void)updateGroupMembersWithQuery:(GetSocialUpdateGroupMembersQuery * _Nonnull)query success:(void (^ _Nonnull)(NSArray<GetSocialGroupMember *> * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Removes member from group.
/// \param query Query parameter.
///
/// \param success Called if member removed.
///
/// \param failure Called if operation failed.
///
+ (void)removeGroupMembersWithQuery:(RemoveGroupMembersQuery * _Nonnull)query success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Checks if users are member of group.
/// \param id Group id.
///
/// \param userIds User ids to check.
///
/// \param success Called if member statuses.
///
/// \param failure Called if operation failed.
///
+ (void)areGroupMembersOf:(NSString * _Nonnull)id userIds:(GetSocialUserIdList * _Nonnull)userIds success:(void (^ _Nonnull)(NSDictionary<NSString *, Membership *> * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// List of all possible actions.
typedef SWIFT_ENUM_NAMED(NSInteger, GetSocialCommunitiesAction, "CommunitiesAction", open) {
/// Post an activity.
  GetSocialCommunitiesActionPost = 0,
/// Interact, like a post.
  GetSocialCommunitiesActionReact = 1,
/// Post a comment.
  GetSocialCommunitiesActionComment = 2,
};

enum GetSocialCommunitiesEntityType : NSInteger;

/// Describe a community entity.
SWIFT_CLASS_NAMED("CommunitiesEntity")
@interface GetSocialCommunitiesEntity : NSObject
/// Entity id.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Entity type.
@property (nonatomic, readonly) enum GetSocialCommunitiesEntityType type;
/// Localized title.
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// Avatar url.
@property (nonatomic, readonly, copy) NSString * _Nullable avatarUrl;
/// Number of followers.
@property (nonatomic, readonly) NSInteger followersCount;
/// Current user is follower or not.
@property (nonatomic, readonly) BOOL isFollowedByMe;
/// Check if specified action is available or not.
/// - parameters:
/// - action:       The action to check.
/// - returns:
/// <code>true</code>, if action is available, otherwise <code>false</code>.
- (BOOL)isActionAllowedWithAction:(enum GetSocialCommunitiesAction)action SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Comminity Entity types.
typedef SWIFT_ENUM_NAMED(NSInteger, GetSocialCommunitiesEntityType, "CommunitiesEntityType", open) {
/// Unknown.
  GetSocialCommunitiesEntityTypeUnknown = 0,
/// App.
  GetSocialCommunitiesEntityTypeApp = 1,
/// Topic.
  GetSocialCommunitiesEntityTypeTopic = 2,
/// Group.
  GetSocialCommunitiesEntityTypeGroup = 3,
/// User.
  GetSocialCommunitiesEntityTypeUser = 4,
/// Activity.
  GetSocialCommunitiesEntityTypeActivity = 6,
};


/// Describe community settings.
SWIFT_CLASS_NAMED("CommunitiesSettings")
@interface GetSocialCommunitiesSettings : NSObject
/// Properties.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull properties;
/// Is discoverable.
@property (nonatomic, readonly) BOOL isDiscovarable;
/// Is private.
@property (nonatomic, readonly) BOOL isPrivate;
/// Check if sepcified action is available or not.
/// - parameters:
/// - action:       The action to check.
/// - returns:
/// <code>true</code>, if action is available, otherwise <code>false</code>.
- (BOOL)isActionAllowedWithAction:(enum GetSocialCommunitiesAction)action SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe user instance.
SWIFT_CLASS_NAMED("User")
@interface GetSocialUser : NSObject
/// GetSocial Id of user.
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
/// Display name.
@property (nonatomic, readonly, copy) NSString * _Nonnull displayName;
/// Avatar Url.
@property (nonatomic, readonly, copy) NSString * _Nullable avatarUrl;
/// Identities added to user.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull identities;
/// Public properties.
/// These properties are accessible to other users.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull publicProperties;
/// Check if user is the app itself.
@property (nonatomic, readonly) BOOL isApp;
/// Check if user is verified.
@property (nonatomic, readonly) BOOL isVerified;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Check if user is equal to another user.
/// \param object Another user object.
///
///
/// returns:
///
/// <code>true</code> if users are equal, otherwise <code>false</code>.
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe a private user object.
SWIFT_CLASS("_TtC12GetSocialSDK11PrivateUser")
@interface PrivateUser : GetSocialUser
/// Private properties.
/// These properties are not accessible to other users.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull privateProperties;
/// Ban information if user is banned.
@property (nonatomic, readonly, strong) GetSocialBanInfo * _Nullable banInfo;
/// Shows if user is banned or not.
@property (nonatomic, readonly) BOOL isBanned;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Check if user object equal to another user object.
/// \param object Other user object.
///
///
/// returns:
///
/// <code>true</code> if they equal, otherwise <code>false</code>.
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describbe a conflict user object.
SWIFT_CLASS_NAMED("ConflictUser")
@interface GetSocialConflictUser : PrivateUser
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@class GetSocialUserUpdate;
@class GetSocialIdentity;

/// Interface for managing current GetSocial user.
SWIFT_CLASS_NAMED("CurrentUser")
@interface GetSocialCurrentUser : PrivateUser
/// Update user details.
/// \param userUpdate Properties and their new values.
///
/// \param success Called if user was updated.
///
/// \param failure Called if operation failed.
///
- (void)updateDetailsWith:(GetSocialUserUpdate * _Nonnull)userUpdate success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Indicate if the user has at least one identity available.
///
/// returns:
///
/// <code>true</code>, if user is anonymous or framework is not initalized, otherwise <code>false</code>
- (BOOL)isAnonymous SWIFT_WARN_UNUSED_RESULT;
/// Add identity to current user.
/// \param identity Identity to add.
///
/// \param success Called if identity was added.
///
/// \param conflict Called if identity could not be added due to a conflict with other user.
///
/// \param failure Called if operation failed.
///
- (void)addIdentity:(GetSocialIdentity * _Nonnull)identity success:(void (^ _Nonnull)(void))success conflict:(void (^ _Nonnull)(GetSocialConflictUser * _Nonnull))conflict failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Remove identity from current user.
/// \param providerId The provider connected to an identity on current user. Check <code>IdentityProviderIds</code> class for common provider ids.
///
/// \param success Called if identity was removed.
///
/// \param failure Called if operation failed.
///
- (void)removeIdentityByProviderId:(NSString * _Nonnull)providerId success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12GetSocialSDK7UseCase")
@interface UseCase : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12GetSocialSDK16DebugLogsUseCase")
@interface DebugLogsUseCase : UseCase
- (void)changeStatusWithNewSetting:(NSString * _Nullable)newSetting;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("ErrorCode")
@interface GetSocialErrorCode : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger Unknown;)
+ (NSInteger)Unknown SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger GenericCommunicationError;)
+ (NSInteger)GenericCommunicationError SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger NullAppID;)
+ (NSInteger)NullAppID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger InvalidAppID;)
+ (NSInteger)InvalidAppID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger InvalidThriftResponse;)
+ (NSInteger)InvalidThriftResponse SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger UncaughtException;)
+ (NSInteger)UncaughtException SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger ActionDenied;)
+ (NSInteger)ActionDenied SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger SdkInitializationFailed;)
+ (NSInteger)SdkInitializationFailed SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger IllegalArgument;)
+ (NSInteger)IllegalArgument SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger IllegalState;)
+ (NSInteger)IllegalState SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger InvalidOptionalValue;)
+ (NSInteger)InvalidOptionalValue SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger SdkNotInitialized;)
+ (NSInteger)SdkNotInitialized SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger ActivityNotFound;)
+ (NSInteger)ActivityNotFound SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger UserIsBanned;)
+ (NSInteger)UserIsBanned SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger PlatformDisabled;)
+ (NSInteger)PlatformDisabled SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger AppSignatureMismatch;)
+ (NSInteger)AppSignatureMismatch SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger UserIdTokenMismatch;)
+ (NSInteger)UserIdTokenMismatch SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger UserConflict;)
+ (NSInteger)UserConflict SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger NoReferrerMatch;)
+ (NSInteger)NoReferrerMatch SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger ActivityRejected;)
+ (NSInteger)ActivityRejected SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger ActivityRateLimited;)
+ (NSInteger)ActivityRateLimited SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger CommentRateLimited;)
+ (NSInteger)CommentRateLimited SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger ConnectionTimeout;)
+ (NSInteger)ConnectionTimeout SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger NoInternet;)
+ (NSInteger)NoInternet SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger JsonBridge;)
+ (NSInteger)JsonBridge SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger JsonEncode;)
+ (NSInteger)JsonEncode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger JsonDecode;)
+ (NSInteger)JsonDecode SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe a query to follow an entity.
SWIFT_CLASS_NAMED("FollowQuery")
@interface GetSocialFollowQuery : NSObject
/// Create query to follow topics.
/// \param ids List of topic ids.
///
///
/// returns:
///
/// New <code>FollowQuery</code> instance.
+ (GetSocialFollowQuery * _Nonnull)topicsWithIds:(NSArray<NSString *> * _Nonnull)ids SWIFT_WARN_UNUSED_RESULT;
/// Create query to follow groups.
/// \param ids List of group ids.
///
///
/// returns:
///
/// New <code>FollowQuery</code> instance.
+ (GetSocialFollowQuery * _Nonnull)groupsWithIds:(NSArray<NSString *> * _Nonnull)ids SWIFT_WARN_UNUSED_RESULT;
/// Create query to follow users.
/// \param ids User ids.
///
///
/// returns:
///
/// New <code>FollowQuery</code> instance.
+ (GetSocialFollowQuery * _Nonnull)usersWithIds:(GetSocialUserIdList * _Nonnull)ids SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end






/// Describe followers paging query.
SWIFT_CLASS_NAMED("FollowersPagingQuery")
@interface GetSocialFollowersPagingQuery : GetSocialPagingQuery
@property (nonatomic, readonly, strong) GetSocialFollowersQuery * _Nonnull query;
/// Constructor.
/// \param query <code>FollowersQuery</code> instance.
///
///
/// returns:
///
/// New <code>FollowersQuery</code> instance.
- (nonnull instancetype)initWithQuery:(GetSocialFollowersQuery * _Nonnull)query OBJC_DESIGNATED_INITIALIZER;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Result of getting followers method.
SWIFT_CLASS_NAMED("FollowersPagingResult")
@interface GetSocialFollowersPagingResult : GetSocialPagingResult
/// List of followers.
@property (nonatomic, readonly, copy) NSArray<GetSocialUser *> * _Nonnull followers;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Describe query to get followers.
SWIFT_CLASS_NAMED("FollowersQuery")
@interface GetSocialFollowersQuery : NSObject
/// Create query to get followers of a topic.
/// \param id Topic id.
///
///
/// returns:
///
/// New <code>FollowersQuery</code> instance.
+ (GetSocialFollowersQuery * _Nonnull)ofTopicWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Create query to get followers of a group.
/// \param id Group id.
///
///
/// returns:
///
/// New <code>FollowersQuery</code> instance.
+ (GetSocialFollowersQuery * _Nonnull)ofGroupWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Create a query to get followers of a user.
/// \param id User id.
///
///
/// returns:
///
/// New <code>FollowersQuery</code> instance.
+ (GetSocialFollowersQuery * _Nonnull)ofUserWithId:(GetSocialUserId * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Friends paging query.
SWIFT_CLASS_NAMED("FriendsPagingQuery")
@interface GetSocialFriendsPagingQuery : GetSocialPagingQuery
@property (nonatomic, readonly, strong) GetSocialFriendsQuery * _Nonnull query;
/// Constructor.
/// \param query <code>FriendsQuery</code> instance.
///
///
/// returns:
///
/// New <code>FriendsPagingQuery</code> instance.
- (nonnull instancetype)initWithQuery:(GetSocialFriendsQuery * _Nonnull)query OBJC_DESIGNATED_INITIALIZER;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Result of getting friends method.
SWIFT_CLASS_NAMED("FriendsPagingResult")
@interface GetSocialFriendsPagingResult : GetSocialPagingResult
/// List of friends.
@property (nonatomic, readonly, copy) NSArray<GetSocialUser *> * _Nonnull friends;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Describe a query to get friends.
SWIFT_CLASS_NAMED("FriendsQuery")
@interface GetSocialFriendsQuery : NSObject
/// Create a query to friends of another user.
/// - returns:
/// New <code>FriendsQuery</code> instance.
+ (GetSocialFriendsQuery * _Nonnull)ofUserWithId:(GetSocialUserId * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC12GetSocialSDK25GetApplicationInfoUseCase")
@interface GetApplicationInfoUseCase : UseCase
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable appName;)
+ (NSString * _Nullable)appName SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable appAvatar;)
+ (NSString * _Nullable)appAvatar SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Interface for common methods.
SWIFT_CLASS("_TtC12GetSocialSDK9GetSocial")
@interface GetSocial : NSObject
/// Return version of GetSocial framework.
///
/// returns:
///
/// Framework version, like 7.0.0
+ (NSString * _Nonnull)sdkVersion SWIFT_WARN_UNUSED_RESULT;
/// Indicate if the device the app is running on added as test device to GetSocial Dashboard.
///
/// returns:
///
/// <code>true</code>, if added, otherwise <code>false</code>.
+ (BOOL)isTestDevice SWIFT_WARN_UNUSED_RESULT;
/// Return device identifier.
///
/// returns:
///
/// Device identifier. If Limit Ad Tracking is enabled, the returned value contains only <code>0</code>s.
+ (NSString * _Nonnull)deviceIdentifier SWIFT_WARN_UNUSED_RESULT;
/// Initialize the SDK. Use <code>OnInitializedListener</code> to be notified when SDK is initialized.
/// GetSocial App Id will be taken from getsocial.json file.
+ (void)initSdk SWIFT_METHOD_FAMILY(none);
/// Initialize the SDK. Use <code>OnInitializedListener</code> to be notified when SDK is initialized.
/// \param appId GetSocial App Id, you can find your App Id on GetSocial Dashboard.
///
+ (void)initSdkWithAppId:(NSString * _Nonnull)appId SWIFT_METHOD_FAMILY(none);
/// Initialize the SDK with a specific user. SDK should be uninitialized at that moment.
/// \param identity Identity of the user.
///
/// \param success Called if operation succeeded.
///
/// \param failure Called if operation failed.
///
+ (void)initSdkWithIdentity:(GetSocialIdentity * _Nonnull)identity success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure SWIFT_METHOD_FAMILY(none);
/// Set listener to be invoked when SDK initialized.
/// It will be executed immediately, if SDK is already initialized.
/// \param listener Listener to be invoked.
///
+ (void)addOnInitializedListener:(void (^ _Nonnull)(void))listener;
/// Indicate the status of GetSocial framework.
///
/// returns:
///
/// <code>true</code>, if initialization finished, otherwise <code>false</code>.
+ (BOOL)isInitialized SWIFT_WARN_UNUSED_RESULT;
/// Return instance of current GetSocial user.
///
/// returns:
///
/// User instance, or nil if initialization is not finished or failed.
+ (GetSocialCurrentUser * _Nullable)currentUser SWIFT_WARN_UNUSED_RESULT;
/// Set listener to be invoked when current user changed.
/// The action is executed on the main thread, so be careful with operations that you put inside the block.
/// Handler will be called in the following cases:
/// <ul>
///   <li>
///     SDK initialization finished.
///   </li>
///   <li>
///     <code>switchUser</code> method was called and user was changed.
///   </li>
///   <li>
///     <code>resetUser</code> method was called.
///   </li>
/// </ul>
/// \param listener Listener to be invoked.
///
///
/// returns:
///
/// Id to use in <code>removeOnCurrentUserChangedListener</code>.
+ (NSString * _Nonnull)addOnCurrentUserChangedListener:(void (^ _Nonnull)(GetSocialCurrentUser * _Nonnull))listener;
/// Remove previously added listener.
/// \param id Listener id to be removed.
///
+ (void)removeOnCurrentUserChangedListener:(NSString * _Nonnull)id;
/// Set the language of GetSocial framework.
/// If provided value is incorrect, the default language will be used.
/// \param languageCode Check possible values in <code>LanguageCodes</code> class.
///
///
/// returns:
///
/// <code>true</code>, if operation was successful, otherwise <code>false</code>.
+ (BOOL)setLanguage:(NSString * _Nonnull)languageCode;
/// Return the current language of GetSocial framework.
///
/// returns:
///
/// Language code as defined in <code>LanguageCodes</code>.
+ (NSString * _Nonnull)language SWIFT_WARN_UNUSED_RESULT;
/// Handle action using the default GetSocial behaviour.
+ (void)handleAction:(GetSocialAction * _Nonnull)action;
/// Reset current user and creates a new anonymous user.
/// \param success Called if user was reset.
///
/// \param failure Called if operation failed.
///
+ (void)resetUserWithSuccess:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Reset current user and without creating a new user.
/// \param success Called if user was reset.
///
/// \param failure Called if operation failed.
///
+ (void)resetWithSuccess:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Switch the current user to another user identified by the provided identity.
/// \param identity Identity that current user should be switched to.
///
/// \param success Called if user was switched.
///
/// \param failure Called if operation failed.
///
+ (void)switchUserToIdentity:(GetSocialIdentity * _Nonnull)identity success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12GetSocialSDK19GetSocialLoggerObjc")
@interface GetSocialLoggerObjc : NSObject
+ (void)logWithLevel:(NSString * _Nonnull)level message:(NSString * _Nonnull)message;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class GetSocialNotificationButton;
@class GetSocialNotificationCustomization;

/// Describe notification object.
SWIFT_CLASS("_TtC12GetSocialSDK21GetSocialNotification")
@interface GetSocialNotification : NSObject
/// Notification type.
@property (nonatomic, readonly, copy) NSString * _Nullable type;
/// Notification status.
@property (nonatomic, readonly, copy) NSString * _Nullable status;
/// Creation date.
@property (nonatomic, readonly) int64_t createdAt;
/// Notification id.
@property (nonatomic, readonly, copy) NSString * _Nonnull notificationId;
/// Notification text.
@property (nonatomic, readonly, copy) NSString * _Nullable text;
/// Notification title.
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// Media attachment.
@property (nonatomic, strong) GetSocialMediaAttachment * _Nullable mediaAttachment;
/// Notification action.
@property (nonatomic, readonly, strong) GetSocialAction * _Nullable notificationAction;
/// Action buttons.
@property (nonatomic, readonly, copy) NSArray<GetSocialNotificationButton *> * _Nonnull actionButtons;
/// Sender.
@property (nonatomic, readonly, strong) GetSocialUser * _Nonnull sender;
/// Customization.
@property (nonatomic, readonly, strong) GetSocialNotificationCustomization * _Nullable customization;
/// Check if notification was read or not.
@property (nonatomic, readonly) BOOL wasRead;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe group object.
SWIFT_CLASS_NAMED("Group")
@interface GetSocialGroup : NSObject
/// Group identifier
@property (nonatomic, readonly, copy) NSString * _Nonnull groupId;
/// Group localized title
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// Group localized description
@property (nonatomic, readonly, copy) NSString * _Nullable groupDescription;
/// Avatar Url
@property (nonatomic, readonly, copy) NSString * _Nullable avatarUrl;
/// Creation date
@property (nonatomic, readonly) int64_t createdAt;
/// Last update
@property (nonatomic, readonly) int64_t updatedAt;
/// Setting
@property (nonatomic, readonly, strong) GetSocialCommunitiesSettings * _Nonnull settings;
/// Number of followers
@property (nonatomic, readonly) NSInteger followersCount;
/// Current user is follower or not
@property (nonatomic, readonly) BOOL isFollowedByMe;
/// Number of members
@property (nonatomic, readonly) NSInteger membersCount;
/// Membership info
@property (nonatomic, readonly, strong) Membership * _Nullable membership;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe group content object.
SWIFT_CLASS_NAMED("GroupContent")
@interface GetSocialGroupContent : NSObject
/// Group id
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Group title
@property (nonatomic, copy) NSString * _Nullable title;
/// Group description
@property (nonatomic, copy) NSString * _Nullable groupDescription;
/// Group icon
@property (nonatomic, strong) GetSocialMediaAttachment * _Nullable avatar;
/// Custom properties
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull properties;
/// Create a new group content to create a group.
/// \param groupId Group id.
///
- (nonnull instancetype)initWithGroupId:(NSString * _Nonnull)groupId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Describe group member object.
SWIFT_CLASS_NAMED("GroupMember")
@interface GetSocialGroupMember : GetSocialUser
/// Membership details
@property (nonatomic, readonly, strong) Membership * _Nonnull membership;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Result of getting group members method.
SWIFT_CLASS_NAMED("GroupMembersPagingResult")
@interface GetSocialGroupMembersPagingResult : GetSocialPagingResult
/// List of members.
@property (nonatomic, readonly, copy) NSArray<GetSocialGroupMember *> * _Nonnull members;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Describe groups paging query.
SWIFT_CLASS_NAMED("GroupsPagingQuery")
@interface GetSocialGroupsPagingQuery : GetSocialPagingQuery
/// Constructor.
/// \param query <code>GroupsQuery</code> instance.
///
///
/// returns:
///
/// New <code>GroupsPagingQuery</code> instance.
- (nonnull instancetype)initWithQuery:(GetSocialGroupsQuery * _Nonnull)query OBJC_DESIGNATED_INITIALIZER;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Result of getting groups method.
SWIFT_CLASS_NAMED("GroupsPagingResult")
@interface GetSocialGroupsPagingResult : GetSocialPagingResult
/// List of groups.
@property (nonatomic, readonly, copy) NSArray<GetSocialGroup *> * _Nonnull groups;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Describe query to get group.
SWIFT_CLASS_NAMED("GroupsQuery")
@interface GetSocialGroupsQuery : NSObject
/// Create a query to find a group.
/// \param searchTerm Search term.
///
///
/// returns:
///
/// New <code>TopicsQuery</code> instance.
+ (GetSocialGroupsQuery * _Nonnull)find:(NSString * _Nonnull)searchTerm SWIFT_WARN_UNUSED_RESULT;
/// Create a query to get groups.
///
/// returns:
///
/// New <code>GroupsQuery</code> instance.
+ (GetSocialGroupsQuery * _Nonnull)all SWIFT_WARN_UNUSED_RESULT;
/// Filters groups followed by a specific user.
/// \param id User id.
///
- (GetSocialGroupsQuery * _Nonnull)followedByUserWithId:(GetSocialUserId * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Filters groups which a specific user is member of.
/// \param id User id.
///
- (GetSocialGroupsQuery * _Nonnull)byMemberId:(GetSocialUserId * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Describe identity object.
SWIFT_CLASS_NAMED("Identity")
@interface GetSocialIdentity : NSObject
/// Create an identity with Facebook’s access token.
/// - parameters:
/// - accessToken:      Access token as returned by Facebook.
/// - returns:
/// New <code>Identity</code> instance.
+ (GetSocialIdentity * _Nonnull)facebookIdentityWithAccessToken:(NSString * _Nonnull)accessToken SWIFT_WARN_UNUSED_RESULT;
/// Create an identity with custom data.
/// - parameters:
/// - providerId:       Custom provider id.
/// - userId:           Id of user.
/// - accessToken:      Access token.
/// - returns:
/// New <code>Identity</code> instance.
+ (GetSocialIdentity * _Nonnull)customIdentityWithProviderId:(NSString * _Nonnull)providerId userId:(NSString * _Nonnull)userId accessToken:(NSString * _Nonnull)accessToken SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end








/// Constants for identity provider ids.
SWIFT_CLASS_NAMED("IdentityProviderIds")
@interface GetSocialIdentityProviderIds : NSObject
/// IdentityProviderId for Facebook.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull facebook;)
+ (NSString * _Nonnull)facebook SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12GetSocialSDK14InitSdkUseCase")
@interface InitSdkUseCase : UseCase
- (void)executeWith:(GetSocialIdentity * _Nonnull)identity success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
- (void)executeWith:(NSString * _Nullable)appId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP12GetSocialSDK20InternetConnectivity_")
@protocol InternetConnectivity
- (BOOL)isConnected SWIFT_WARN_UNUSED_RESULT;
@end

@class UIImage;

/// Describe an invite object.
SWIFT_CLASS_NAMED("Invite")
@interface GetSocialInvite : NSObject
/// Invite subject.
@property (nonatomic, readonly, copy) NSString * _Nullable subject;
/// Invite text.
@property (nonatomic, readonly, copy) NSString * _Nullable text;
/// Invite sender’s display name.
@property (nonatomic, readonly, copy) NSString * _Nullable userName;
/// Image content as url.
@property (nonatomic, readonly, copy) NSString * _Nullable imageUrl;
/// Image content as UIImage.
@property (nonatomic, readonly, strong) UIImage * _Nullable image;
/// Gif url.
@property (nonatomic, readonly, copy) NSString * _Nullable gifUrl;
/// Video url.
@property (nonatomic, readonly, copy) NSString * _Nullable videoUrl;
/// Referral link url.
@property (nonatomic, readonly, copy) NSString * _Nullable referralUrl;
/// Link parameters.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull linkParams;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS_NAMED("InviteChannel")
@interface GetSocialInviteChannel : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull channelId;
@property (nonatomic, readonly, copy) NSString * _Nullable name;
@property (nonatomic, readonly, copy) NSString * _Nonnull iconUrl;
@property (nonatomic, readonly) BOOL isEnabled;
@property (nonatomic, readonly) int32_t displayOrder;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// Define invite channel ids.
SWIFT_CLASS_NAMED("InviteChannelIds")
@interface GetSocialInviteChannelIds : NSObject
/// Generic.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull generic;)
+ (NSString * _Nonnull)generic SWIFT_WARN_UNUSED_RESULT;
/// Email.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull email;)
+ (NSString * _Nonnull)email SWIFT_WARN_UNUSED_RESULT;
/// Facebook.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull facebook;)
+ (NSString * _Nonnull)facebook SWIFT_WARN_UNUSED_RESULT;
/// Instagram.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull instagramDirect;)
+ (NSString * _Nonnull)instagramDirect SWIFT_WARN_UNUSED_RESULT;
/// Kakao.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kakao;)
+ (NSString * _Nonnull)kakao SWIFT_WARN_UNUSED_RESULT;
/// Kik.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kik;)
+ (NSString * _Nonnull)kik SWIFT_WARN_UNUSED_RESULT;
/// Line.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull line;)
+ (NSString * _Nonnull)line SWIFT_WARN_UNUSED_RESULT;
/// Facebook Messenger.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull facebookMessenger;)
+ (NSString * _Nonnull)facebookMessenger SWIFT_WARN_UNUSED_RESULT;
/// Native share.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull nativeShare;)
+ (NSString * _Nonnull)nativeShare SWIFT_WARN_UNUSED_RESULT;
/// Snapchat.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull snapchat;)
+ (NSString * _Nonnull)snapchat SWIFT_WARN_UNUSED_RESULT;
/// SMS.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sms;)
+ (NSString * _Nonnull)sms SWIFT_WARN_UNUSED_RESULT;
/// Twitter.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull twitter;)
+ (NSString * _Nonnull)twitter SWIFT_WARN_UNUSED_RESULT;
/// Telegram.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull telegram;)
+ (NSString * _Nonnull)telegram SWIFT_WARN_UNUSED_RESULT;
/// Viber.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull viber;)
+ (NSString * _Nonnull)viber SWIFT_WARN_UNUSED_RESULT;
/// VK.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull vk;)
+ (NSString * _Nonnull)vk SWIFT_WARN_UNUSED_RESULT;
/// WhatsApp.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull whatsApp;)
+ (NSString * _Nonnull)whatsApp SWIFT_WARN_UNUSED_RESULT;
/// Instagram Stories.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull instagramStories;)
+ (NSString * _Nonnull)instagramStories SWIFT_WARN_UNUSED_RESULT;
/// Facebook Stories.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull facebookStories;)
+ (NSString * _Nonnull)facebookStories SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIViewController;

SWIFT_PROTOCOL_NAMED("InviteChannelPlugin")
@protocol GetSocialInviteChannelPluginProtocol
- (BOOL)isAvailableForDevice:(GetSocialInviteChannel * _Nonnull)inviteChannel SWIFT_WARN_UNUSED_RESULT;
- (void)presentPluginWithInviteChannel:(GetSocialInviteChannel * _Nonnull)inviteChannel invite:(GetSocialInvite * _Nonnull)invite onViewController:(UIViewController * _Nonnull)onViewController success:(void (^ _Nonnull)(NSDictionary<NSString *, NSString *> * _Nonnull))success cancel:(void (^ _Nonnull)(NSDictionary<NSString *, NSString *> * _Nonnull))cancel failure:(void (^ _Nonnull)(NSError * _Nonnull, NSDictionary<NSString *, NSString *> * _Nonnull))failure;
@end


/// Describe invite content.
SWIFT_CLASS_NAMED("InviteContent")
@interface GetSocialInviteContent : NSObject
/// Invite subject.
@property (nonatomic, copy) NSString * _Nullable subject;
/// Invite text.
@property (nonatomic, copy) NSString * _Nullable text;
/// Attachment.
@property (nonatomic, strong) GetSocialMediaAttachment * _Nullable mediaAttachment;
/// Link parameters.
@property (nonatomic, copy) NSDictionary<NSString *, NSObject *> * _Nonnull linkParams;
/// Set link parameter.
/// \param value Value to set.
///
/// \param forKey Key for the value.
///
- (void)setLinkParameterValue:(NSObject * _Nonnull)value forKey:(NSString * _Nonnull)forKey;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// Describe invite content placeholder.
SWIFT_CLASS_NAMED("InviteContentPlaceholders")
@interface GetSocialInviteContentPlaceholders : NSObject
/// Tag is replaced with referral url.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull inviteUrl;)
+ (NSString * _Nonnull)inviteUrl SWIFT_WARN_UNUSED_RESULT;
/// Tag is replaced with current user’s name.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull userName;)
+ (NSString * _Nonnull)userName SWIFT_WARN_UNUSED_RESULT;
/// Tag is replaced with promo code from LinkParams if any present.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull promoCode;)
+ (NSString * _Nonnull)promoCode SWIFT_WARN_UNUSED_RESULT;
/// Tag is replaced with the package string e.g. im.getsocial.testapp.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull appPackageName;)
+ (NSString * _Nonnull)appPackageName SWIFT_WARN_UNUSED_RESULT;
/// Tag is replaced with the subject provided on the GetSocial Dashboard.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull inviteSubject;)
+ (NSString * _Nonnull)inviteSubject SWIFT_WARN_UNUSED_RESULT;
/// Tag is replaced with the message text provided on the GetSocial Dashboard.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull inviteText;)
+ (NSString * _Nonnull)inviteText SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("InviteProperties")
@interface GetSocialInviteProperties : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable action;
@property (nonatomic, readonly, copy) NSString * _Nullable contentType;
@property (nonatomic, readonly, copy) NSString * _Nullable packageName;
@property (nonatomic, readonly, copy) NSString * _Nullable urlScheme;
@property (nonatomic, readonly, copy) NSString * _Nullable className;
@property (nonatomic, readonly, copy) NSString * _Nullable data;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end





@class GetSocialReferralData;
@class GetSocialReferralUsersPagingQuery;
@class GetSocialReferralUsersPagingResult;

/// Interface for Invites.
SWIFT_CLASS_NAMED("Invites")
@interface GetSocialInvites : NSObject
/// Return a list of available channels.
/// \param success Called with list of available channels.
///
/// \param failure Called if operation failed.
///
+ (void)availableChannelsWithSuccess:(SWIFT_NOESCAPE void (^ _Nonnull)(NSArray<GetSocialInviteChannel *> * _Nonnull))success failure:(SWIFT_NOESCAPE void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Send an invitation with content on the specified channel.
/// \param content Content to send.
///
/// \param onChannel Channel to use. Check <code>InviteChannelIds</code> for possible values.
///
/// \param success Called if invitation was sent.
///
/// \param cancel Called if invitation sending was canceled.
///
/// \param failure Called if operation failed.
///
+ (void)sendInviteContent:(GetSocialInviteContent * _Nullable)content onChannel:(NSString * _Nonnull)onChannel success:(void (^ _Nonnull)(void))success cancel:(void (^ _Nonnull)(void))cancel failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Create an invite with invite url to be shared any custom way.
/// \param content Content to use.
///
/// \param success Called with created invite.
///
/// \param failure Called if operation failed.
///
+ (void)createInviteWithContent:(GetSocialInviteContent * _Nullable)content success:(void (^ _Nonnull)(GetSocialInvite * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Create an invite url to be shared any custom way.
/// \param content Content to use.
///
/// \param success Called with created invite.
///
/// \param failure Called if operation failed.
///
+ (void)createInviteURLWithContent:(GetSocialInviteContent * _Nullable)content success:(void (^ _Nonnull)(NSString * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Register an invite channel plugin for the specified channel id.
/// <ul>
///   <li>
///     @result YES if the operation was successful, otherwise NO.
///   </li>
/// </ul>
/// \param plugin Plugin to register.
///
/// \param forChannel Channel id. Check <code>InviteChannelIds</code> for possible values.
///
+ (BOOL)registerPlugin:(id <GetSocialInviteChannelPluginProtocol> _Nonnull)plugin forChannel:(NSString * _Nonnull)forChannel;
/// Set listener to be invoked when referral data is received.
/// \param listener Listener to be invoked.
///
+ (void)setOnReferralDataReceivedListener:(void (^ _Nonnull)(GetSocialReferralData * _Nonnull))listener;
/// Get list of users who are referred by current user, filtered by the query parameter.
/// \param query Query to filter referred users.
///
/// \param success Called with list of referred users.
///
/// \param failure Called if operation failed.
///
+ (void)referredUsersWithQuery:(GetSocialReferralUsersPagingQuery * _Nonnull)query success:(void (^ _Nonnull)(GetSocialReferralUsersPagingResult * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get list of users who are referrers of current user, filtered by the query parameter.
/// \param query Query to filter referred users.
///
/// \param success Called with list of referrer users.
///
/// \param failure Called if operation failed.
///
+ (void)referrerUsersWithQuery:(GetSocialReferralUsersPagingQuery * _Nonnull)query success:(void (^ _Nonnull)(GetSocialReferralUsersPagingResult * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Set referrer details of current user.
/// \param id Id of referrer user.
///
/// \param event Referrer event.
///
/// \param customData Custom key-value pairs.
///
/// \param success Called if referrer was set.
///
/// \param failure Called if operation failed.
///
+ (void)setReferrerWithId:(GetSocialUserId * _Nonnull)id event:(NSString * _Nonnull)event customData:(NSDictionary<NSString *, NSString *> * _Nullable)customData success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12GetSocialSDK34InvokePendingInviteCallbackUseCase")
@interface InvokePendingInviteCallbackUseCase : UseCase
- (void)invoke;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe updating group members query.
SWIFT_CLASS_NAMED("JoinGroupQuery")
@interface GetSocialJoinGroupQuery : NSObject
/// Create a query to join to a group.
/// \param groupId Group Id.
///
- (nonnull instancetype)initWithGroupId:(NSString * _Nonnull)groupId OBJC_DESIGNATED_INITIALIZER;
/// Set invitation token. Use this method if user was invited to join a group.
/// \param invitationToken Invitation token.
///
///
/// returns:
///
/// Updated <code>JoinGroupQuery</code> instance.
- (GetSocialJoinGroupQuery * _Nonnull)withInvitationToken:(NSString * _Nonnull)invitationToken SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("LanguageCodes")
@interface GetSocialLanguageCodes : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull bengali;)
+ (NSString * _Nonnull)bengali SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull bhojpuri;)
+ (NSString * _Nonnull)bhojpuri SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull chinese_simplified;)
+ (NSString * _Nonnull)chinese_simplified SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull chinese_traditional;)
+ (NSString * _Nonnull)chinese_traditional SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull danish;)
+ (NSString * _Nonnull)danish SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull dutch;)
+ (NSString * _Nonnull)dutch SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull english;)
+ (NSString * _Nonnull)english SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull french;)
+ (NSString * _Nonnull)french SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull german;)
+ (NSString * _Nonnull)german SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull gujarati;)
+ (NSString * _Nonnull)gujarati SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull hindi;)
+ (NSString * _Nonnull)hindi SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull icelandic;)
+ (NSString * _Nonnull)icelandic SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull indonesian;)
+ (NSString * _Nonnull)indonesian SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull italian;)
+ (NSString * _Nonnull)italian SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull japanese;)
+ (NSString * _Nonnull)japanese SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kannada;)
+ (NSString * _Nonnull)kannada SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull korean;)
+ (NSString * _Nonnull)korean SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull latin_american_spanish;)
+ (NSString * _Nonnull)latin_american_spanish SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull malay;)
+ (NSString * _Nonnull)malay SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull malayalam;)
+ (NSString * _Nonnull)malayalam SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull marathi;)
+ (NSString * _Nonnull)marathi SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull norwegian;)
+ (NSString * _Nonnull)norwegian SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull polish;)
+ (NSString * _Nonnull)polish SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull portuguese;)
+ (NSString * _Nonnull)portuguese SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull portuguese_brazillian;)
+ (NSString * _Nonnull)portuguese_brazillian SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull punjabi;)
+ (NSString * _Nonnull)punjabi SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull russian;)
+ (NSString * _Nonnull)russian SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull spanish;)
+ (NSString * _Nonnull)spanish SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swedish;)
+ (NSString * _Nonnull)swedish SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull tagalog;)
+ (NSString * _Nonnull)tagalog SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull tamil;)
+ (NSString * _Nonnull)tamil SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull telugu;)
+ (NSString * _Nonnull)telugu SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull thai;)
+ (NSString * _Nonnull)thai SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull turkish;)
+ (NSString * _Nonnull)turkish SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ukrainian;)
+ (NSString * _Nonnull)ukrainian SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull vietnamese;)
+ (NSString * _Nonnull)vietnamese SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull defaultLanguage;)
+ (NSString * _Nonnull)defaultLanguage SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary<NSString *, NSString *> * _Nonnull)all SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Landing page customization keys.
SWIFT_CLASS_NAMED("LinkParams")
@interface GetSocialLinkParams : NSObject
/// Custom title to be shown on landing page.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull customTitle;)
+ (NSString * _Nonnull)customTitle SWIFT_WARN_UNUSED_RESULT;
/// Custom description to be shown on landing page.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull customDescription;)
+ (NSString * _Nonnull)customDescription SWIFT_WARN_UNUSED_RESULT;
/// Custom image to be shown on landing page.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull customImage;)
+ (NSString * _Nonnull)customImage SWIFT_WARN_UNUSED_RESULT;
/// Custom video to be shown on landing page.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull customYouTubeVideo;)
+ (NSString * _Nonnull)customYouTubeVideo SWIFT_WARN_UNUSED_RESULT;
/// Promo code to replace placeholder in invite text or subject.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull customPromoCode;)
+ (NSString * _Nonnull)customPromoCode SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe media attachment.
SWIFT_CLASS_NAMED("MediaAttachment")
@interface GetSocialMediaAttachment : NSObject
/// Video url.
@property (nonatomic, readonly, copy) NSString * _Nullable videoUrl;
/// Image url.
@property (nonatomic, readonly, copy) NSString * _Nullable imageUrl;
/// Create an attachment with image url.
/// \param imageUrl Url of the image.
///
///
/// returns:
///
/// New <code>MediaAttachment</code> instance.
+ (GetSocialMediaAttachment * _Nonnull)withImageUrl:(NSString * _Nonnull)imageUrl SWIFT_WARN_UNUSED_RESULT;
/// Create an attachment with image.
/// \param image Image instance.
///
///
/// returns:
///
/// New <code>MediaAttachment</code> instance.
+ (GetSocialMediaAttachment * _Nonnull)withImage:(UIImage * _Nonnull)image SWIFT_WARN_UNUSED_RESULT;
/// Create an attachment with video url.
/// \param videoUrl Url of the video.
///
///
/// returns:
///
/// New <code>MediaAttachment</code> instance.
+ (GetSocialMediaAttachment * _Nonnull)withVideoUrl:(NSString * _Nonnull)videoUrl SWIFT_WARN_UNUSED_RESULT;
/// Create an attachment with video.
/// \param video Video content.
///
///
/// returns:
///
/// New <code>MediaAttachment</code> instance.
+ (GetSocialMediaAttachment * _Nonnull)withVideo:(NSData * _Nonnull)video SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end






SWIFT_PROTOCOL_NAMED("MediaUploader")
@protocol GetSocialMediaUploader
- (NSString * _Nullable)uploadMedia:(NSData * _Nonnull)media to:(NSURL * _Nonnull)url withMetadata:(NSDictionary<NSString *, NSString *> * _Nonnull)metadata SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, GetSocialMemberStatus, "MemberStatus", open) {
/// User is not approved yet
  GetSocialMemberStatusApprovalPending = 0,
/// User has not accepted the invitation yet
  GetSocialMemberStatusInvitationPending = 1,
/// Member
  GetSocialMemberStatusMember = 2,
};

@class GetSocialMembersQuery;

/// Describe members paging query.
SWIFT_CLASS_NAMED("MembersPagingQuery")
@interface GetSocialMembersPagingQuery : GetSocialPagingQuery
/// Constructor.
/// \param query <code>MembersQuery</code> instance.
///
///
/// returns:
///
/// New <code>MembersPagingQuery</code> instance.
- (nonnull instancetype)initWithQuery:(GetSocialMembersQuery * _Nonnull)query OBJC_DESIGNATED_INITIALIZER;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Describe query to get members of a group.
SWIFT_CLASS_NAMED("MembersQuery")
@interface GetSocialMembersQuery : NSObject
/// Create a query to get members of a group.
/// \param id Group Id.
///
///
/// returns:
///
/// New <code>MembersQuery</code> instance.
+ (GetSocialMembersQuery * _Nonnull)ofGroupWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Filters members by role.
/// \param role Role.
///
///
/// returns:
///
/// Query instance.
- (GetSocialMembersQuery * _Nonnull)withRole:(enum GetSocialMemberRole)role SWIFT_WARN_UNUSED_RESULT;
/// Filters members by status.
/// \param status Status.
///
///
/// returns:
///
/// Query instance.
- (GetSocialMembersQuery * _Nonnull)withStatus:(enum GetSocialMemberStatus)status SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12GetSocialSDK10Membership")
@interface Membership : NSObject
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum GetSocialMentionType : NSInteger;

/// Describe a mention.
SWIFT_CLASS_NAMED("Mention")
@interface GetSocialMention : NSObject
/// Id of user who is mentioned.
@property (nonatomic, copy) NSString * _Nullable userId;
/// Start index of mention.
@property (nonatomic) NSInteger startIndex;
/// End index of mention.
@property (nonatomic) NSInteger endIndex;
/// Type of mention.
@property (nonatomic) enum GetSocialMentionType type;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Mention types.
typedef SWIFT_ENUM_NAMED(NSInteger, GetSocialMentionType, "MentionType", open) {
/// App.
  GetSocialMentionTypeApp = 0,
/// User.
  GetSocialMentionTypeUser = 1,
};


/// Describe notification badge object.
SWIFT_CLASS_NAMED("NotificationBadge")
@interface GetSocialNotificationBadge : NSObject
/// Create a notification badge object, which will increase the badge number with the specified value.
/// \param by Increase value.
///
///
/// returns:
///
/// New <code>NotificationBadge</code> instance.
+ (GetSocialNotificationBadge * _Nonnull)increaseBy:(int32_t)by SWIFT_WARN_UNUSED_RESULT;
/// Create a notification badge object, which will set the badge number with the specified value.
/// \param to Value to set badge number to.
///
///
/// returns:
///
/// New <code>NotificationBadge</code> instance.
+ (GetSocialNotificationBadge * _Nonnull)setTo:(int32_t)to SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Define action button object.
SWIFT_CLASS_NAMED("NotificationButton")
@interface GetSocialNotificationButton : NSObject
/// Constant for <code>consume</code> action id.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull actionIdConsume;)
+ (NSString * _Nonnull)actionIdConsume SWIFT_WARN_UNUSED_RESULT;
/// Constant for <code>ignore</code> action id.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull actionIdIgnore;)
+ (NSString * _Nonnull)actionIdIgnore SWIFT_WARN_UNUSED_RESULT;
/// Action id.
@property (nonatomic, readonly, copy) NSString * _Nonnull actionId;
/// Notification button title.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// Create a notification button instance with the provided parameters.
/// \param title Notification button title.
///
/// \param actionId Action id
///
///
/// returns:
///
/// New <code>NotificationButton</code> instance.
+ (GetSocialNotificationButton * _Nonnull)createWithTitle:(NSString * _Nonnull)title actionId:(NSString * _Nonnull)actionId SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Describe notification content.
SWIFT_CLASS_NAMED("NotificationContent")
@interface GetSocialNotificationContent : NSObject
/// Notification text.
@property (nonatomic, copy) NSString * _Nullable text;
/// Notification title.
@property (nonatomic, copy) NSString * _Nullable title;
/// Action buttons.
@property (nonatomic, copy) NSArray<GetSocialNotificationButton *> * _Nonnull actionButtons;
/// Notification action.
@property (nonatomic, strong) GetSocialAction * _Nullable action;
/// Template name.
@property (nonatomic, copy) NSString * _Nullable templateName;
/// Template placeholders.
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull templatePlaceholders;
/// Media attachment.
@property (nonatomic, strong) GetSocialMediaAttachment * _Nullable mediaAttachment;
/// Notification customization.
@property (nonatomic, strong) GetSocialNotificationCustomization * _Nullable customization;
/// Badge update.
@property (nonatomic, strong) GetSocialNotificationBadge * _Nullable badge;
/// Create a notification content with text.
/// \param text Notification text.
///
///
/// returns:
///
/// New <code>NotificationContent</code> instance.
+ (GetSocialNotificationContent * _Nonnull)withText:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
/// Create a notification content with a template.
/// \param name Notification template name.
///
///
/// returns:
///
/// New <code>NotificationContent</code> instance.
+ (GetSocialNotificationContent * _Nonnull)withTemplateName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Append an action button.
/// \param actionButton Action button.
///
- (void)appendActionButton:(GetSocialNotificationButton * _Nonnull)actionButton;
/// Set template placeholders.
/// \param value Template placeholder value.
///
/// \param forKey Template placeholder key.
///
- (void)setTemplatePlaceholderValue:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)forKey;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// Describe placeholders for notification content.
SWIFT_CLASS_NAMED("NotificationContentPlaceholders")
@interface GetSocialNotificationContentPlaceholders : NSObject
/// Placeholder to show sender’s display name in notification.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull senderDisplayName;)
+ (NSString * _Nonnull)senderDisplayName SWIFT_WARN_UNUSED_RESULT;
/// Placeholder to shows receiver’s display name in notification.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull receiverDisplayName;)
+ (NSString * _Nonnull)receiverDisplayName SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe notification context.
SWIFT_CLASS_NAMED("NotificationContext")
@interface GetSocialNotificationContext : NSObject
/// Notification action.
@property (nonatomic, copy) NSString * _Nullable action;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe notification customization object.
SWIFT_CLASS_NAMED("NotificationCustomization")
@interface GetSocialNotificationCustomization : NSObject
/// Background image.
@property (nonatomic, copy) NSString * _Nullable backgroundImageConfiguration;
/// Title text color.
@property (nonatomic, copy) NSString * _Nullable titleColor;
/// Text color.
@property (nonatomic, copy) NSString * _Nullable textColor;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// Describe placeholders for notification receivers.
SWIFT_CLASS_NAMED("NotificationReceiverPlaceholders")
@interface GetSocialNotificationReceiverPlaceholders : NSObject
/// Placeholder to send notification to all friends.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull friends;)
+ (NSString * _Nonnull)friends SWIFT_WARN_UNUSED_RESULT;
/// Placeholder to send notification to referred users.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull referredUsers;)
+ (NSString * _Nonnull)referredUsers SWIFT_WARN_UNUSED_RESULT;
/// Placeholder to send notification to referrer.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull referrer;)
+ (NSString * _Nonnull)referrer SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12GetSocialSDK26NotificationRepresentation")
@interface NotificationRepresentation : NSObject
@property (nonatomic) BOOL isSilent;
+ (NotificationRepresentation * _Nullable)fromInfo:(NSDictionary<NSString *, id> * _Nullable)info SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe notification statuses.
SWIFT_CLASS_NAMED("NotificationStatus")
@interface GetSocialNotificationStatus : NSObject
/// Notification is read.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull read;)
+ (NSString * _Nonnull)read SWIFT_WARN_UNUSED_RESULT;
/// Notification is unread.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull unread;)
+ (NSString * _Nonnull)unread SWIFT_WARN_UNUSED_RESULT;
/// Notification is consumed.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull consumed;)
+ (NSString * _Nonnull)consumed SWIFT_WARN_UNUSED_RESULT;
/// Notification is ignored.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ignored;)
+ (NSString * _Nonnull)ignored SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Notification types.
SWIFT_CLASS_NAMED("NotificationType")
@interface GetSocialNotificationType : NSObject
/// Someone commented on your activity.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull comment;)
+ (NSString * _Nonnull)comment SWIFT_WARN_UNUSED_RESULT;
/// Someone liked your activity.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull likeActivity;)
+ (NSString * _Nonnull)likeActivity SWIFT_WARN_UNUSED_RESULT;
/// Someone liked your comment.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull likeComment;)
+ (NSString * _Nonnull)likeComment SWIFT_WARN_UNUSED_RESULT;
/// Someone commented on the activity where you’ve commented before.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull relatedComment;)
+ (NSString * _Nonnull)relatedComment SWIFT_WARN_UNUSED_RESULT;
/// You became friends with another user.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull newFriendship;)
+ (NSString * _Nonnull)newFriendship SWIFT_WARN_UNUSED_RESULT;
/// Someone accepted your invite.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull inviteAccepted;)
+ (NSString * _Nonnull)inviteAccepted SWIFT_WARN_UNUSED_RESULT;
/// Someone mentioned you in comment.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull mentionInComment;)
+ (NSString * _Nonnull)mentionInComment SWIFT_WARN_UNUSED_RESULT;
/// Someone mentioned you in activity.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull mentionInActivity;)
+ (NSString * _Nonnull)mentionInActivity SWIFT_WARN_UNUSED_RESULT;
/// Someone replied to your comment.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull replyToComment;)
+ (NSString * _Nonnull)replyToComment SWIFT_WARN_UNUSED_RESULT;
/// Smart targeting Push Notifications.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull targeting;)
+ (NSString * _Nonnull)targeting SWIFT_WARN_UNUSED_RESULT;
/// Notifications sent from the Dashboard when using “Test Push Notifications”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull direct;)
+ (NSString * _Nonnull)direct SWIFT_WARN_UNUSED_RESULT;
/// Notification sent from SDK.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdk;)
+ (NSString * _Nonnull)sdk SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class GetSocialNotificationsPagingQuery;
@class GetSocialNotificationsPagingResult;
@class GetSocialNotificationsQuery;
@class GetSocialSendNotificationTarget;

/// Interface for managing notifications.
SWIFT_CLASS_NAMED("Notifications")
@interface GetSocialNotifications : NSObject
/// Get the list of notifications of current user.
/// \param query Query to filter notifications.
///
/// \param success Called with list of notifications.
///
/// \param failure Called if operation failed.
///
+ (void)getWithQuery:(GetSocialNotificationsPagingQuery * _Nonnull)query success:(void (^ _Nonnull)(GetSocialNotificationsPagingResult * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get the number of notifications of current user based on the provided query.
/// \param query Query to filter notifications.
///
/// \param success Called with the number of notifications.
///
/// \param failure Called if operation failed.
///
+ (void)countWithQuery:(GetSocialNotificationsQuery * _Nonnull)query success:(void (^ _Nonnull)(NSInteger))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Set notifications status.
/// \param newStatus New status.
///
/// \param notificationIds List of notifications ids.
///
/// \param success Called if operation finished.
///
/// \param failure Called if operation failed.
///
+ (void)setStatusTo:(NSString * _Nonnull)newStatus notificationIds:(NSArray<NSString *> * _Nonnull)notificationIds success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Enable or disable receiving Push Notifications.
/// If set to <code>false</code> current user won’t receive GetSocial Push Notifications anymore, until same method called with <code>true</code>.
/// \param enabled Enable or disable Push Notifications.
///
/// \param success Called if operation succeeded.
///
/// \param failure Called if operation failed.
///
+ (void)setPushNotificationsEnabled:(BOOL)enabled success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Check if Push Notifications are enabled for current user.
/// \param success Called with <code>true</code> if Push Notifications are enabled, otherwise <code>false</code>.
///
/// \param failure Called if operation failed.
///
+ (void)arePushNotificationsEnabledWithSuccess:(void (^ _Nonnull)(BOOL))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Send notification to any GetSocial user.
/// \param content Notification content to send.
///
/// \param target Notification recipients.
///
/// \param success Called with the number of successfully delivered notifications.
///
/// \param failure Called if operation failed.
///
+ (void)sendNotificationContent:(GetSocialNotificationContent * _Nonnull)content target:(GetSocialSendNotificationTarget * _Nonnull)target success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Register device for Push Notifications.
+ (void)registerDevice;
/// Set listener to be invoked when a Push Notification was clicked.
/// \param listener Handler to be invoked.
///
+ (void)setOnNotificationClickedListener:(void (^ _Nonnull)(GetSocialNotification * _Nonnull, GetSocialNotificationContext * _Nonnull))listener;
/// Set listener to be invoked when a Push Notification was received.
/// \param listener Listener to be invoked.
///
+ (void)setOnNotificationReceivedListener:(void (^ _Nonnull)(GetSocialNotification * _Nonnull))listener;
/// Set listener to be invoked when device was registered for Push Notifications.
/// \param listener Listener to be invoked.
///
+ (void)setOnTokenReceivedListener:(void (^ _Nonnull)(NSString * _Nonnull))listener;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe activities paging query.
SWIFT_CLASS_NAMED("NotificationsPagingQuery")
@interface GetSocialNotificationsPagingQuery : GetSocialPagingQuery
@property (nonatomic, readonly, strong) GetSocialNotificationsQuery * _Nonnull query;
/// Constructor.
/// \param query <code>NotificationsQuery</code> instance.
///
///
/// returns:
///
/// New <code>NotificationsQuery</code> instance.
- (nonnull instancetype)initWithQuery:(GetSocialNotificationsQuery * _Nonnull)query OBJC_DESIGNATED_INITIALIZER;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Result of getting notifications method.
SWIFT_CLASS_NAMED("NotificationsPagingResult")
@interface GetSocialNotificationsPagingResult : GetSocialPagingResult
/// List of notifications.
@property (nonatomic, readonly, copy) NSArray<GetSocialNotification *> * _Nonnull notifications;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Describe a query to get notifications.
SWIFT_CLASS_NAMED("NotificationsQuery")
@interface GetSocialNotificationsQuery : NSObject
/// Notification types.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull types;
/// Notification statuses.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull statuses;
/// Notification actions.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull actions;
/// Create query to get notifications with specified statuses.
/// - parameters:
/// - statuses:     List of statuses.
/// - returns:
/// New <code>NotificationsQuery</code> instance.
+ (GetSocialNotificationsQuery * _Nonnull)withStatuses:(NSArray<NSString *> * _Nonnull)statuses SWIFT_WARN_UNUSED_RESULT;
/// Create query to get notifications with any statuses.
/// - returns:
/// New <code>NotificationsQuery</code> instance.
+ (GetSocialNotificationsQuery * _Nonnull)withAllStatuses SWIFT_WARN_UNUSED_RESULT;
/// Append type to query.
/// \param type Type to append.
///
///
/// returns:
///
/// Modified <code>NotificationsQuery</code> instance.
- (GetSocialNotificationsQuery * _Nonnull)appendType:(NSString * _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
/// Append status to query.
/// \param status Type to append.
///
///
/// returns:
///
/// Modified <code>NotificationsQuery</code> instance.
- (GetSocialNotificationsQuery * _Nonnull)appendStatus:(NSString * _Nonnull)status SWIFT_WARN_UNUSED_RESULT;
/// Append action to query.
/// \param action Type to append.
///
///
/// returns:
///
/// Modified <code>NotificationsQuery</code> instance.
- (GetSocialNotificationsQuery * _Nonnull)appendAction:(NSString * _Nonnull)action SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC12GetSocialSDK16OldInviteContent")
@interface OldInviteContent : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end










/// Describe post activity target.
SWIFT_CLASS_NAMED("PostActivityTarget")
@interface GetSocialPostActivityTarget : NSObject
/// Target is a specific topic.
/// - parameters:
/// - id:       Topic id.
/// - returns:
/// <code>PostActivityTarget</code> instance.
+ (GetSocialPostActivityTarget * _Nonnull)topicWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Target is current user’s timeline.
/// - returns:
/// <code>PostActivityTarget</code> instance.
+ (GetSocialPostActivityTarget * _Nonnull)timeline SWIFT_WARN_UNUSED_RESULT;
/// Target is a specific group.
/// - parameters:
/// - id:       Group id.
/// - returns:
/// <code>PostActivityTarget</code> instance.
+ (GetSocialPostActivityTarget * _Nonnull)groupWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Target is a specific activity.
/// - parameters:
/// - activityId:       Activity id.
/// - returns:
/// <code>PostActivityTarget</code> instance.
+ (GetSocialPostActivityTarget * _Nonnull)commentTo:(NSString * _Nonnull)activityId SWIFT_WARN_UNUSED_RESULT;
/// Target type.
/// - returns:
/// <code>CommunityEntityType</code> instance.
- (enum GetSocialCommunitiesEntityType)type SWIFT_WARN_UNUSED_RESULT;
/// Target id.
/// - returns:
/// Id of target.
- (NSString * _Nonnull)targetId SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Private class.
SWIFT_CLASS_NAMED("PrivateActivityBuilder")
@interface GetSocialPrivateActivityBuilder : NSObject
/// Private method.
+ (void)likeActivity:(GetSocialActivity * _Nonnull)activity isLiked:(BOOL)isLiked;
/// Private method.
+ (GetSocialActivity * _Nonnull)commentActivity:(GetSocialActivity * _Nonnull)activity SWIFT_WARN_UNUSED_RESULT;
+ (GetSocialActivity * _Nonnull)removeCommentFromActivity:(GetSocialActivity * _Nonnull)activity SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Private class.
SWIFT_CLASS_NAMED("PrivateGroupBuilder")
@interface GetSocialPrivateGroupBuilder : NSObject
/// Private method.
+ (void)updateGroup:(GetSocialGroup * _Nonnull)group isFollowed:(BOOL)isFollowed;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12GetSocialSDK31PrivateInternetConnectedUseCase")
@interface PrivateInternetConnectedUseCase : UseCase
- (BOOL)isInternetConnected SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12GetSocialSDK22PrivateMetaDataUseCase")
@interface PrivateMetaDataUseCase : UseCase
+ (BOOL)shouldAutoInitSdk SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)uiConfigurationFile SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)disablePushNotifications SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Private class.
SWIFT_CLASS_NAMED("PrivateNotificationBuilder")
@interface GetSocialPrivateNotificationBuilder : NSObject
/// Private method.
+ (GetSocialNotification * _Nonnull)updateNotification:(GetSocialNotification * _Nonnull)notification newStatus:(NSString * _Nonnull)newStatus SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12GetSocialSDK33PrivateSessionStateHandlerUseCase")
@interface PrivateSessionStateHandlerUseCase : UseCase
- (BOOL)isInitialized SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isInitializing SWIFT_WARN_UNUSED_RESULT;
- (void)addOnInitializeListener:(void (^ _Nonnull)(void))listener;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12GetSocialSDK33PrivateSetUIActionListenerUseCase")
@interface PrivateSetUIActionListenerUseCase : UseCase
+ (void)setUIActionListener:(BOOL (^ _Nonnull)(GetSocialAction * _Nonnull))listener;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12GetSocialSDK41PrivateStartPendingHandlersInvokerUseCase")
@interface PrivateStartPendingHandlersInvokerUseCase : UseCase
- (void)private_execute;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Private class.
SWIFT_CLASS_NAMED("PrivateTopicBuilder")
@interface GetSocialPrivateTopicBuilder : NSObject
/// Private method.
+ (void)updateTopic:(GetSocialTopic * _Nonnull)topic isFollowed:(BOOL)isFollowed;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSError;

SWIFT_CLASS("_TtC12GetSocialSDK33PrivateTrackAnalyticsEventUseCase")
@interface PrivateTrackAnalyticsEventUseCase : UseCase
- (void)private_trackUIEvent:(NSString * _Nonnull)eventName properties:(NSDictionary<NSString *, NSString *> * _Nullable)properties;
- (void)private_trackUIError:(NSError * _Nonnull)error;
- (void)private_trackAppDidBecomeInactive;
- (void)private_trackAppSessionEvent;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end






/// Define purchase types.
typedef SWIFT_ENUM_NAMED(NSInteger, GetSocialProductType, "ProductType", open) {
/// Consumable or non-consumable item.
  GetSocialProductTypeItem = 0,
/// Subscription.
  GetSocialProductTypeSubscription = 1,
};


/// Describe promo code object.
SWIFT_CLASS_NAMED("PromoCode")
@interface GetSocialPromoCode : NSObject
/// Promo code.
@property (nonatomic, readonly, copy) NSString * _Nonnull code;
/// Attached data.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull properties;
/// Number of maximum claims.
@property (nonatomic, readonly) NSInteger maxClaimCount;
/// Start date.
@property (nonatomic, readonly) int64_t startDate;
/// End date.
@property (nonatomic, readonly) int64_t endDate;
/// Creator.
@property (nonatomic, readonly, strong) GetSocialUser * _Nonnull creator;
/// Number of claims.
@property (nonatomic, readonly) NSInteger claimCount;
/// Enabled or not.
@property (nonatomic, readonly) BOOL isEnabled;
/// Claimable or not.
@property (nonatomic, readonly) BOOL isClaimable;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe promo code content.
SWIFT_CLASS_NAMED("PromoCodeContent")
@interface GetSocialPromoCodeContent : NSObject
/// Promo code.
@property (nonatomic, copy) NSString * _Nullable code;
/// Attached data.
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull properties;
/// Start date.
@property (nonatomic, copy) NSDate * _Nullable startDate;
/// End date.
@property (nonatomic, copy) NSDate * _Nullable endDate;
/// Number of maximum claims.
@property (nonatomic) NSInteger maxClaims;
/// Create a promo code with random code.
///
/// returns:
///
/// New <code>PromoCodeContent</code> instance.
+ (GetSocialPromoCodeContent * _Nonnull)withRandomCode SWIFT_WARN_UNUSED_RESULT;
/// Create a promo code with the specified code.
/// \param code Promo code.
///
///
/// returns:
///
/// New <code>PromoCodeContent</code> instance.
+ (GetSocialPromoCodeContent * _Nonnull)withCode:(NSString * _Nonnull)code SWIFT_WARN_UNUSED_RESULT;
/// Set time limit of promo code.
/// \param startDate Start date.
///
/// \param endDate End date.
///
- (void)setTimeLimitWithStartDate:(NSDate * _Nullable)startDate endDate:(NSDate * _Nullable)endDate;
/// Set promo code data.
/// \param value Value to set.
///
/// \param forKey Key for the value.
///
- (void)setPropertyValue:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)forKey;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Interface for Promo Codes.
SWIFT_CLASS_NAMED("PromoCodes")
@interface GetSocialPromoCodes : NSObject
/// Create a promo code.
/// \param content Promo code content.
///
/// \param success Called with created <code>PromoCode</code> instance.
///
/// \param failure Called if operation failed.
///
+ (void)createWithContent:(GetSocialPromoCodeContent * _Nonnull)content success:(void (^ _Nonnull)(GetSocialPromoCode * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Retrieve a <code>PromoCode</code> instance by code.
/// \param code Promo code.
///
/// \param success Called with retrieved <code>PromoCode</code> instance.
///
/// \param failure Called if operation failed, or <code>PromoCode</code> does not exists with provided <code>code</code>.
///
+ (void)getWithCode:(NSString * _Nonnull)code success:(void (^ _Nonnull)(GetSocialPromoCode * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Claim a promo code.
/// \param code Promo code to claim.
///
/// \param success Called with claimed <code>PromoCode</code> instance.
///
/// \param failure Called if operation failed, or <code>PromoCode</code> does not exists, expired or already claimed.
///
+ (void)claimWithCode:(NSString * _Nonnull)code success:(void (^ _Nonnull)(GetSocialPromoCode * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Define purchase data.
SWIFT_CLASS_NAMED("PurchaseData")
@interface GetSocialPurchaseData : NSObject
/// Product Id.
@property (nonatomic, copy) NSString * _Nonnull productId;
/// Product Type.
@property (nonatomic) enum GetSocialProductType productType;
/// Product title.
@property (nonatomic, copy) NSString * _Nonnull productTitle;
/// Product price.
@property (nonatomic) float price;
/// Price currency.
@property (nonatomic, copy) NSString * _Nullable priceCurrency;
/// Date of purchase.
@property (nonatomic, copy) NSDate * _Nullable purchaseDate;
/// Transaction identifier.
@property (nonatomic, copy) NSString * _Nonnull transactionIdentifier;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC12GetSocialSDK34PushNotificationInteractionUseCase")
@interface PushNotificationInteractionUseCase : UseCase
- (void)trackReceivedNotificationWithNotification:(NotificationRepresentation * _Nonnull)notification;
- (void)trackNotificationClickWithNotification:(NotificationRepresentation * _Nonnull)notification;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Define reaction.
SWIFT_CLASS_NAMED("Reactions")
@interface GetSocialReactions : NSObject
/// Like.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull like;)
+ (NSString * _Nonnull)like SWIFT_WARN_UNUSED_RESULT;
/// Love.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull love;)
+ (NSString * _Nonnull)love SWIFT_WARN_UNUSED_RESULT;
/// Haha.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull haha;)
+ (NSString * _Nonnull)haha SWIFT_WARN_UNUSED_RESULT;
/// Wow.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull wow;)
+ (NSString * _Nonnull)wow SWIFT_WARN_UNUSED_RESULT;
/// Sad.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sad;)
+ (NSString * _Nonnull)sad SWIFT_WARN_UNUSED_RESULT;
/// Angry.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull angry;)
+ (NSString * _Nonnull)angry SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class GetSocialReactionsQuery;

/// Reactions paging query.
SWIFT_CLASS_NAMED("ReactionsPagingQuery")
@interface GetSocialReactionsPagingQuery : GetSocialPagingQuery
@property (nonatomic, readonly, strong) GetSocialReactionsQuery * _Nonnull query;
/// Constructor.
/// \param query <code>ReactionsQuery</code> instance.
///
///
/// returns:
///
/// New <code>ReactionsPagingQuery</code> instance.
- (nonnull instancetype)initWithQuery:(GetSocialReactionsQuery * _Nonnull)query OBJC_DESIGNATED_INITIALIZER;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Result of getting reactions method.
SWIFT_CLASS_NAMED("ReactionsPagingResult")
@interface GetSocialReactionsPagingResult : GetSocialPagingResult
/// List of reactions.
@property (nonatomic, readonly, copy) NSArray<GetSocialUserReactions *> * _Nonnull reactions;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Describe a query to get reaction.
SWIFT_CLASS_NAMED("ReactionsQuery")
@interface GetSocialReactionsQuery : NSObject
/// Reaction to filter. If not set, all reactions will be returned.
@property (nonatomic, copy) NSString * _Nullable reaction;
/// Create query to get reactions for an activity.
/// \param id Activity id.
///
///
/// returns:
///
/// New <code>ReactionsQuery</code> instance.
+ (GetSocialReactionsQuery * _Nonnull)forActivityWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end






/// Define referral data.
SWIFT_CLASS_NAMED("ReferralData")
@interface GetSocialReferralData : NSObject
/// Invite token.
@property (nonatomic, readonly, copy) NSString * _Nonnull token;
/// Referrer user id.
@property (nonatomic, readonly, copy) NSString * _Nullable referrerUserId;
/// Referrer channel id.
@property (nonatomic, readonly, copy) NSString * _Nonnull referrerChannelId;
/// Indicate if first match.
@property (nonatomic, readonly) BOOL isFirstMatch;
/// Indicate if guaranteed match.
@property (nonatomic, readonly) BOOL isGuaranteedMatch;
/// Indicate if reinstall.
@property (nonatomic, readonly) BOOL isReinstall;
/// Indicate if first match is link.
@property (nonatomic, readonly) BOOL isFirstMatchLink;
/// Link parameters.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull linkParams;
/// Original link parameters.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull originalLinkParams;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end






SWIFT_CLASS("_TtC12GetSocialSDK19ReferralDataUseCase")
@interface ReferralDataUseCase : UseCase
- (void)clear;
- (void)onPause;
- (BOOL)onResumeWithSourceApplication:(NSString * _Nullable)sourceApplication referrer:(NSURL * _Nullable)referrer SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe referral user.
SWIFT_CLASS_NAMED("ReferralUser")
@interface GetSocialReferralUser : GetSocialUser
/// Event date.
@property (nonatomic, readonly) NSUInteger eventDate;
/// Event.
@property (nonatomic, readonly, copy) NSString * _Nullable event;
/// Event data.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull eventData;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class GetSocialReferralUsersQuery;

/// Describe referral users paging query.
SWIFT_CLASS_NAMED("ReferralUsersPagingQuery")
@interface GetSocialReferralUsersPagingQuery : GetSocialPagingQuery
/// Constructor.
/// \param query <code>ReferralUsersQuery</code> instance.
///
///
/// returns:
///
/// New <code>ReferralUsersQuery</code> instance.
- (nonnull instancetype)initWithQuery:(GetSocialReferralUsersQuery * _Nonnull)query OBJC_DESIGNATED_INITIALIZER;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Result of getting referral users method.
SWIFT_CLASS_NAMED("ReferralUsersPagingResult")
@interface GetSocialReferralUsersPagingResult : GetSocialPagingResult
/// List of users.
@property (nonatomic, readonly, copy) NSArray<GetSocialReferralUser *> * _Nonnull users;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end




/// Describe query to get referral users.
SWIFT_CLASS_NAMED("ReferralUsersQuery")
@interface GetSocialReferralUsersQuery : GetSocialPagingQuery
/// Create query to get referral users.
///
/// returns:
///
/// New <code>ReferralUsersQuery</code> instance.
+ (GetSocialReferralUsersQuery * _Nonnull)allUsers SWIFT_WARN_UNUSED_RESULT;
/// Create query to get referral users for the specified event.
/// \param event Event name.
///
///
/// returns:
///
/// New <code>ReferralUsersQuery</code> instance.
+ (GetSocialReferralUsersQuery * _Nonnull)usersForEvent:(NSString * _Nonnull)event SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC12GetSocialSDK27RegisterOnPushServerUseCase")
@interface RegisterOnPushServerUseCase : UseCase
- (void)executeWithToken:(NSString * _Nonnull)token sandbox:(BOOL)sandbox;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe remove activities query.
SWIFT_CLASS_NAMED("RemoveActivitiesQuery")
@interface GetSocialRemoveActivitiesQuery : NSObject
/// Create query to remove activities.
/// \param ids List of activity ids to remove.
///
///
/// returns:
///
/// New <code>RemoveActivitiesQuery</code> instance.
+ (GetSocialRemoveActivitiesQuery * _Nonnull)activitiesWithIds:(NSArray<NSString *> * _Nonnull)ids SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12GetSocialSDK23RemoveGroupMembersQuery")
@interface RemoveGroupMembersQuery : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Describe reporting reason.
typedef SWIFT_ENUM_NAMED(NSInteger, GetSocialReportingReason, "ReportingReason", open) {
/// Spam.
  GetSocialReportingReasonSpam = 0,
/// Inappropriate content.
  GetSocialReportingReasonInappropriateContent = 1,
};

typedef SWIFT_ENUM_NAMED(NSInteger, GetSocialMemberRole, "Role", open) {
/// Owner
  GetSocialMemberRoleOwner = 0,
/// Admin
  GetSocialMemberRoleAdmin = 1,
/// Member
  GetSocialMemberRoleMember = 3,
/// Followers, used only in Topics permissions
  GetSocialMemberRoleFollower = 4,
/// Everyone, used only in Topics permissions
  GetSocialMemberRoleEveryone = 5,
};


/// Describe notification target.
SWIFT_CLASS_NAMED("SendNotificationTarget")
@interface GetSocialSendNotificationTarget : NSObject
/// Create target with user ids.
/// \param ids User ids.
///
///
/// returns:
///
/// New <code>SendNotificationTarget</code> instance.
+ (GetSocialSendNotificationTarget * _Nonnull)usersWithIds:(GetSocialUserIdList * _Nonnull)ids SWIFT_WARN_UNUSED_RESULT;
/// Add placeholder to define receivers.
/// \param placeholder Receiver placeholder, as defined <code>NotificationReceiversPlaceholders</code>.
///
///
/// returns:
///
/// New <code>SendNotificationTarget</code> instance.
- (GetSocialSendNotificationTarget * _Nonnull)addReceiverPlaceholder:(NSString * _Nonnull)placeholder SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC12GetSocialSDK43SetNotificationsStatusUpdateListenerUseCase")
@interface SetNotificationsStatusUpdateListenerUseCase : UseCase
+ (void)setNotificationsStatusUpdateListener:(void (^ _Nullable)(NSArray<NSString *> * _Nonnull, NSString * _Nonnull))listener;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe a suggested friend.
SWIFT_CLASS_NAMED("SuggestedFriend")
@interface GetSocialSuggestedFriend : GetSocialUser
/// Number of mutual friends with current user.
@property (nonatomic, readonly) NSInteger mutualFriendsCount;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe suggested friends paging query.
SWIFT_CLASS_NAMED("SuggestedFriendsPagingQuery")
@interface GetSocialSuggestedFriendsPagingQuery : GetSocialPagingQuery
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// Result of getting suggested friends method.
SWIFT_CLASS_NAMED("SuggestedFriendsPagingResult")
@interface GetSocialSuggestedFriendsPagingResult : GetSocialPagingResult
/// List of suggested friends.
@property (nonatomic, readonly, copy) NSArray<GetSocialSuggestedFriend *> * _Nonnull suggestedFriends;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC12GetSocialSDK20SwiftComponentHelper")
@interface SwiftComponentHelper : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull mediaUploader;)
+ (NSString * _Nonnull)mediaUploader SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull reachability;)
+ (NSString * _Nonnull)reachability SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull atomicIntegerProvider;)
+ (NSString * _Nonnull)atomicIntegerProvider SWIFT_WARN_UNUSED_RESULT;
+ (void)reset;
+ (void)registerComponentsWithObjcComponents:(NSDictionary<NSString *, id> * _Nonnull)objcComponents;
+ (void)registerTestComponents;
+ (void)setPushRegistrator:(void (^ _Nonnull)(void))block;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe query to get tags.
SWIFT_CLASS_NAMED("TagsQuery")
@interface GetSocialTagsQuery : NSObject
@property (nonatomic, strong) GetSocialPostActivityTarget * _Nullable inTarget;
/// Create query to find tags.
/// \param searchTerm Search term.
///
///
/// returns:
///
/// New <code>TagsQuery</code> instance.
+ (GetSocialTagsQuery * _Nonnull)find:(NSString * _Nonnull)searchTerm SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Describe topic object.
SWIFT_CLASS_NAMED("Topic")
@interface GetSocialTopic : NSObject
/// Topic identifier
@property (nonatomic, readonly, copy) NSString * _Nonnull topicId;
/// Topic localized title
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// Topic localized description
@property (nonatomic, readonly, copy) NSString * _Nullable topicDescription;
/// Avatar Url
@property (nonatomic, readonly, copy) NSString * _Nullable avatarUrl;
/// Creation date
@property (nonatomic, readonly) int64_t createdAt;
/// Last update
@property (nonatomic, readonly) int64_t updatedAt;
/// Setting
@property (nonatomic, readonly, strong) GetSocialCommunitiesSettings * _Nonnull settings;
/// Number of followers
@property (nonatomic, readonly) NSInteger followersCount;
/// Current user is follower or not
@property (nonatomic, readonly) BOOL isFollowedByMe;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe topics paging query.
SWIFT_CLASS_NAMED("TopicsPagingQuery")
@interface GetSocialTopicsPagingQuery : GetSocialPagingQuery
@property (nonatomic, readonly, strong) GetSocialTopicsQuery * _Nonnull query;
/// Constructor.
/// \param query <code>TopicsQuery</code> instance.
///
///
/// returns:
///
/// New <code>TopicsPagingQuery</code> instance.
- (nonnull instancetype)initWithQuery:(GetSocialTopicsQuery * _Nonnull)query OBJC_DESIGNATED_INITIALIZER;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Result of getting topics method.
SWIFT_CLASS_NAMED("TopicsPagingResult")
@interface GetSocialTopicsPagingResult : GetSocialPagingResult
/// List of topics.
@property (nonatomic, readonly, copy) NSArray<GetSocialTopic *> * _Nonnull topics;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Describe query to get topics.
SWIFT_CLASS_NAMED("TopicsQuery")
@interface GetSocialTopicsQuery : NSObject
/// Create a query to find a topic.
/// \param searchTerm Search term.
///
///
/// returns:
///
/// New <code>TopicsQuery</code> instance.
+ (GetSocialTopicsQuery * _Nonnull)find:(NSString * _Nonnull)searchTerm SWIFT_WARN_UNUSED_RESULT;
/// Create a query to get topics.
///
/// returns:
///
/// New <code>TopicsQuery</code> instance.
+ (GetSocialTopicsQuery * _Nonnull)all SWIFT_WARN_UNUSED_RESULT;
/// Filters topics followed by a specific user.
/// \param id User id.
///
- (GetSocialTopicsQuery * _Nonnull)followedByUserWithId:(GetSocialUserId * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end








/// Describe updating group members query.
SWIFT_CLASS_NAMED("UpdateGroupMembersQuery")
@interface GetSocialUpdateGroupMembersQuery : NSObject
/// Create a query to update group members.
/// \param id Group Id.
///
/// \param userIds User ids.
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id userIds:(GetSocialUserIdList * _Nonnull)userIds OBJC_DESIGNATED_INITIALIZER;
/// New status of users.
/// \param status New member status.
///
///
/// returns:
///
/// <ul>
///   <li>
///     <code>UpdateGroupMembersQuery</code> instance.
///   </li>
/// </ul>
- (GetSocialUpdateGroupMembersQuery * _Nonnull)withMemberStatus:(enum GetSocialMemberStatus)status SWIFT_WARN_UNUSED_RESULT;
/// New role of users.
/// \param role New member role.
///
///
/// returns:
///
/// <ul>
///   <li>
///     <code>UpdateGroupMembersQuery</code> instance.
///   </li>
/// </ul>
- (GetSocialUpdateGroupMembersQuery * _Nonnull)withRole:(enum GetSocialMemberRole)role SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end












/// Describe an external user id.
SWIFT_CLASS_NAMED("UserId")
@interface GetSocialUserId : NSObject
- (nonnull instancetype)init:(NSString * _Nonnull)userId providerId:(NSString * _Nullable)providerId OBJC_DESIGNATED_INITIALIZER;
/// Create a UserId instance with an external user id.
/// - parameters:
/// - id:       Id of user.
/// - returns:
/// New <code>UserId</code> instance.
+ (GetSocialUserId * _Nonnull)create:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Create a UserId instance with an external user id and provider id.
/// - parameters:
/// - provider:   Provider id.
/// - id:           Id of user.
/// - returns:
/// New <code>UserId</code> instance.
+ (GetSocialUserId * _Nonnull)createWithProvider:(NSString * _Nonnull)provider id:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Create a UserId instance with current user.
/// New <code>UserId</code> instance.
+ (GetSocialUserId * _Nonnull)currentUser SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Describe list of external user ids.
SWIFT_CLASS_NAMED("UserIdList")
@interface GetSocialUserIdList : NSObject
/// Create a UserId instance with a list of external user ids.
/// - parameters:
/// - ids:          Ids of users.
/// - returns:
/// New <code>UserId</code> instance.
+ (GetSocialUserIdList * _Nonnull)create:(NSArray<NSString *> * _Nonnull)ids SWIFT_WARN_UNUSED_RESULT;
/// Create a UserId instance with a list of external user ids and provider id.
/// - parameters:
/// - provider:   Provider id.
/// - id:           Ids of users.
/// - returns:
/// New <code>UserId</code> instance.
+ (GetSocialUserIdList * _Nonnull)createWithProvider:(NSString * _Nonnull)provider ids:(NSArray<NSString *> * _Nonnull)ids SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Describe a reaction created by a user.
SWIFT_CLASS_NAMED("UserReactions")
@interface GetSocialUserReactions : NSObject
/// User, who created the reaction.
@property (nonatomic, readonly, strong) GetSocialUser * _Nonnull user;
/// List of reactions.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull reactions;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Describe a lightweight user object.
SWIFT_CLASS_NAMED("UserReference")
@interface GetSocialUserReference : NSObject
/// User id.
@property (nonatomic, readonly, copy) NSString * _Nullable userId;
/// Display name.
@property (nonatomic, readonly, copy) NSString * _Nonnull displayName;
/// Avatar url.
@property (nonatomic, readonly, copy) NSString * _Nullable avatarUrl;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Describe user update object.
SWIFT_CLASS_NAMED("UserUpdate")
@interface GetSocialUserUpdate : NSObject
/// New display name.
@property (nonatomic, copy) NSString * _Nullable displayName;
/// New avatar Url.
@property (nonatomic, copy) NSString * _Nullable avatarUrl;
/// New avatar image.
@property (nonatomic, strong) UIImage * _Nullable avatar;
/// Public properties to modify
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull publicProperties;
/// Private properties to modify
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull privateProperties;
/// Remove public property.
- (void)removePublicPropertyWithKey:(NSString * _Nonnull)forKey;
/// Set public property.
/// \param value Value to set.
///
/// \param forKey Key for the value.
///
- (void)setPublicPropertyValue:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)forKey;
/// Set private property.
/// \param value Value to set.
///
/// \param forKey Key for the value.
///
- (void)setPrivatePropertyValue:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)forKey;
/// Remove private property.
- (void)removePrivatePropertyWithKey:(NSString * _Nonnull)forKey;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end






/// Describe users paging query.
SWIFT_CLASS_NAMED("UsersPagingQuery")
@interface GetSocialUsersPagingQuery : GetSocialPagingQuery
@property (nonatomic, readonly, strong) GetSocialUsersQuery * _Nonnull query;
/// Constructor.
/// \param query <code>UsersQuery</code> instance.
///
///
/// returns:
///
/// New <code>UsersPagingQuery</code> instance.
- (nonnull instancetype)initWithQuery:(GetSocialUsersQuery * _Nonnull)query OBJC_DESIGNATED_INITIALIZER;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Result of getting users method.
SWIFT_CLASS_NAMED("UsersPagingResult")
@interface GetSocialUsersPagingResult : GetSocialPagingResult
/// List of users.
@property (nonatomic, readonly, copy) NSArray<GetSocialUser *> * _Nonnull users;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Describe a query to get users.
SWIFT_CLASS_NAMED("UsersQuery")
@interface GetSocialUsersQuery : NSObject
/// Create a query to find users.
/// \param searchTerm Search term.
///
///
/// returns:
///
/// New <code>UsersQuery</code> instance.
+ (GetSocialUsersQuery * _Nonnull)find:(NSString * _Nonnull)searchTerm SWIFT_WARN_UNUSED_RESULT;
/// Create a query to find users who are followed by the specified user.
/// \param id UserId.
///
///
/// returns:
///
/// New <code>UsersQuery</code> instance.
+ (GetSocialUsersQuery * _Nonnull)followedBy:(GetSocialUserId * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#else
#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.1 (swiftlang-1100.0.270.13 clang-1100.0.33.7)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import UserNotifications;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="GetSocialSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// Describe action object.
SWIFT_CLASS_NAMED("Action")
@interface GetSocialAction : NSObject
/// Action type.
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
/// Action data.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull data;
/// Create an action with the specified type.
/// \param type Action type.
///
/// \param data Attached data.
///
///
/// returns:
///
/// New <code>Action</code> instance.
+ (GetSocialAction * _Nonnull)actionWithType:(NSString * _Nonnull)type data:(NSDictionary<NSString *, NSString *> * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Define keys for action data.
SWIFT_CLASS_NAMED("ActionDataKey")
@interface GetSocialActionDataKey : NSObject
/// ActivityId are mutually exclusive.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull openActivity_ActivityId;)
+ (NSString * _Nonnull)openActivity_ActivityId SWIFT_WARN_UNUSED_RESULT;
/// Optional. Can be present with ActivityId only.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull openActivity_CommentId;)
+ (NSString * _Nonnull)openActivity_CommentId SWIFT_WARN_UNUSED_RESULT;
/// TopicId identifies the source of activity.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull openActivity_TopicId;)
+ (NSString * _Nonnull)openActivity_TopicId SWIFT_WARN_UNUSED_RESULT;
/// UserId identifies the source of activity.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull openActivity_UserId;)
+ (NSString * _Nonnull)openActivity_UserId SWIFT_WARN_UNUSED_RESULT;
/// GroupId are mutually exclusive.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull openActivity_GroupId;)
+ (NSString * _Nonnull)openActivity_GroupId SWIFT_WARN_UNUSED_RESULT;
/// ID of user to be opened.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull openProfile_UserId;)
+ (NSString * _Nonnull)openProfile_UserId SWIFT_WARN_UNUSED_RESULT;
/// ID of user who wants to add as friend.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull addFriend_UserId;)
+ (NSString * _Nonnull)addFriend_UserId SWIFT_WARN_UNUSED_RESULT;
/// URL to be opened.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull openUrl_Url;)
+ (NSString * _Nonnull)openUrl_Url SWIFT_WARN_UNUSED_RESULT;
/// Promo Code to claim.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull claimPromoCode_PromoCode;)
+ (NSString * _Nonnull)claimPromoCode_PromoCode SWIFT_WARN_UNUSED_RESULT;
/// GroupId.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull addGroupMember_GroupId;)
+ (NSString * _Nonnull)addGroupMember_GroupId SWIFT_WARN_UNUSED_RESULT;
/// User Id.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull addGroupMember_UserId;)
+ (NSString * _Nonnull)addGroupMember_UserId SWIFT_WARN_UNUSED_RESULT;
/// Invitation token.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull addGroupMember_InvitationToken;)
+ (NSString * _Nonnull)addGroupMember_InvitationToken SWIFT_WARN_UNUSED_RESULT;
/// Role.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull addGroupMember_Role;)
+ (NSString * _Nonnull)addGroupMember_Role SWIFT_WARN_UNUSED_RESULT;
/// Status.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull addGroupMember_Status;)
+ (NSString * _Nonnull)addGroupMember_Status SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Define action types.
SWIFT_CLASS_NAMED("ActionType")
@interface GetSocialActionType : NSObject
/// Open user’s profile action.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull openProfile;)
+ (NSString * _Nonnull)openProfile SWIFT_WARN_UNUSED_RESULT;
/// Open an activity action.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull openActivity;)
+ (NSString * _Nonnull)openActivity SWIFT_WARN_UNUSED_RESULT;
/// Open invites UI action.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull openInvites;)
+ (NSString * _Nonnull)openInvites SWIFT_WARN_UNUSED_RESULT;
/// Open an url action.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull openUrl;)
+ (NSString * _Nonnull)openUrl SWIFT_WARN_UNUSED_RESULT;
/// Add a friend action.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull addFriend;)
+ (NSString * _Nonnull)addFriend SWIFT_WARN_UNUSED_RESULT;
/// Claim Promo Code action.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull claimPromoCode;)
+ (NSString * _Nonnull)claimPromoCode SWIFT_WARN_UNUSED_RESULT;
/// Add group member.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull addGroupMember;)
+ (NSString * _Nonnull)addGroupMember SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe generic paging query.
SWIFT_CLASS_NAMED("PagingQuery")
@interface GetSocialPagingQuery : NSObject
/// Default limit.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger defaultLimit;)
+ (NSInteger)defaultLimit SWIFT_WARN_UNUSED_RESULT;
/// Next cursor to load next result page.
/// Set it to <code>nil</code> or empty string to get first result page.
@property (nonatomic, copy) NSString * _Nullable nextCursor;
/// Limit.
@property (nonatomic) NSInteger limit;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class GetSocialActivitiesQuery;

/// Describe activities paging query.
SWIFT_CLASS_NAMED("ActivitiesPagingQuery")
@interface GetSocialActivitiesPagingQuery : GetSocialPagingQuery
@property (nonatomic, readonly, strong) GetSocialActivitiesQuery * _Nonnull query;
/// Constructor.
/// \param query <code>ActivitiesQuery</code> instance.
///
///
/// returns:
///
/// New <code>ActivitiesPagingQuery</code> instance.
- (nonnull instancetype)initWithQuery:(GetSocialActivitiesQuery * _Nonnull)query OBJC_DESIGNATED_INITIALIZER;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Generic paging result object.
SWIFT_CLASS_NAMED("PagingResult")
@interface GetSocialPagingResult : NSObject
/// Define next cursor to load next page.
/// If value is empty there is no more page to load.
@property (nonatomic, readonly, copy) NSString * _Nonnull nextCursor;
/// Define if there is a next page to load.
@property (nonatomic, readonly) BOOL isLastPage;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class GetSocialActivity;

/// Result of getting activities method.
SWIFT_CLASS_NAMED("ActivitiesPagingResult")
@interface GetSocialActivitiesPagingResult : GetSocialPagingResult
/// List of activities.
@property (nonatomic, readonly, copy) NSArray<GetSocialActivity *> * _Nonnull activities;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class GetSocialUserId;
@class GetSocialPostActivityTarget;
@class GetSocialAnnouncementsQuery;

/// Describe query to get activities.
SWIFT_CLASS_NAMED("ActivitiesQuery")
@interface GetSocialActivitiesQuery : NSObject
@property (nonatomic, readonly, strong) GetSocialUserId * _Nullable byUser;
@property (nonatomic, readonly, copy) NSString * _Nullable tag;
/// Create a query to get activities for a specific user.
/// \param id User id.
///
///
/// returns:
///
/// New <code>ActivitiesQuery</code> instance.
+ (GetSocialActivitiesQuery * _Nonnull)feedOfUserWithId:(GetSocialUserId * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Create a query to get activities in a specific topic.
/// \param id Topic id.
///
///
/// returns:
///
/// New <code>ActivitiesQuery</code> instance.
+ (GetSocialActivitiesQuery * _Nonnull)inTopicWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Create a query to get activities in a specific group.
/// \param id Group id.
///
///
/// returns:
///
/// New <code>ActivitiesQuery</code> instance.
+ (GetSocialActivitiesQuery * _Nonnull)inGroupWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Create a query to get activities from all topics.
///
/// returns:
///
/// New <code>ActivitiesQuery</code> instance.
+ (GetSocialActivitiesQuery * _Nonnull)inAllTopics SWIFT_WARN_UNUSED_RESULT;
/// Create a query to get activities in current user timeline.
///
/// returns:
///
/// New <code>ActivitiesQuery</code> instance.
+ (GetSocialActivitiesQuery * _Nonnull)timeline SWIFT_WARN_UNUSED_RESULT;
/// Create a query to get all activities from every target.
///
/// returns:
///
/// New <code>ActivitiesQuery</code> instance.
+ (GetSocialActivitiesQuery * _Nonnull)everywhere SWIFT_WARN_UNUSED_RESULT;
/// Filter activities by author.
///
/// returns:
///
/// New <code>ActivitiesQuery</code> instance.
- (GetSocialActivitiesQuery * _Nonnull)byUserWithId:(GetSocialUserId * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Filter activities by a tag.
///
/// returns:
///
/// New <code>ActivitiesQuery</code> instance.
- (GetSocialActivitiesQuery * _Nonnull)withTag:(NSString * _Nonnull)tag SWIFT_WARN_UNUSED_RESULT;
/// Converts query to post target.
/// - returns:
/// <code>PostActivityTarget</code> instance.
- (GetSocialPostActivityTarget * _Nullable)asPostTarget SWIFT_WARN_UNUSED_RESULT;
/// Converts query to announcements query.
/// - returns:
/// <code>AnnouncementsQuery</code> instance.
- (GetSocialAnnouncementsQuery * _Nullable)asAnnouncementsQuery SWIFT_WARN_UNUSED_RESULT;
/// Query to get comments for by a specific user.
/// \param id Activity id.
///
///
/// returns:
///
/// New <code>ActivitiesQuery</code> instance.
+ (GetSocialActivitiesQuery * _Nonnull)commentsToActivityWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class GetSocialUser;
@class GetSocialMediaAttachment;
@class GetSocialActivityButton;
@class GetSocialUserReactions;
@class GetSocialMention;
@class GetSocialCommunitiesEntity;

/// Describe an activity instance.
SWIFT_CLASS_NAMED("Activity")
@interface GetSocialActivity : NSObject
/// Activity id.
@property (nonatomic, readonly, copy) NSString * _Nonnull activityId;
/// Text content.
@property (nonatomic, readonly, copy) NSString * _Nullable text;
/// Author.
@property (nonatomic, readonly, strong) GetSocialUser * _Nonnull author;
/// Media attachments.
@property (nonatomic, readonly, copy) NSArray<GetSocialMediaAttachment *> * _Nonnull mediaAttachments;
/// Activity button.
@property (nonatomic, readonly, strong) GetSocialActivityButton * _Nullable button;
/// Activity type.
@property (nonatomic, readonly, copy) NSString * _Nullable type;
/// Activity is announcement or not.
@property (nonatomic, readonly) BOOL isAnnouncement;
/// Number of comments.
@property (nonatomic, readonly) NSInteger commentsCount;
/// Number of reactions by type.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSNumber *> * _Nonnull reactionsCount;
/// Current user’s reactions.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull myReactions;
/// Reactions.
@property (nonatomic, readonly, copy) NSArray<GetSocialUserReactions *> * _Nonnull reactions;
/// Commenters.
@property (nonatomic, readonly, copy) NSArray<GetSocialUser *> * _Nonnull commenters;
/// Custom properties.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull properties;
/// Date of creation as UNIX timestamp in UTC.
@property (nonatomic, readonly) int64_t createdAt;
/// Mentions.
@property (nonatomic, readonly, copy) NSArray<GetSocialMention *> * _Nonnull mentions;
/// Number of views.
@property (nonatomic, readonly) NSInteger viewCount;
/// Parent of activity.
@property (nonatomic, readonly, strong) GetSocialCommunitiesEntity * _Nullable source;
/// Status of activity. For possible values check {ActivityStatus} class.
@property (nonatomic, readonly, copy) NSString * _Nonnull status;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe activity button.
SWIFT_CLASS_NAMED("ActivityButton")
@interface GetSocialActivityButton : NSObject
/// Button title.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// Action to be executed when button is pressed.
@property (nonatomic, readonly, strong) GetSocialAction * _Nonnull action;
/// Create new <code>ActionButton</code> instance.
/// - parameters:
/// - title:    Button title.
/// - action:   Action to be executed when button is pressed.
/// - returns:
/// New <code>ActivityButton</code> instance.
+ (GetSocialActivityButton * _Nonnull)createWithTitle:(NSString * _Nonnull)title action:(GetSocialAction * _Nonnull)action SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Describe Activity content.
SWIFT_CLASS_NAMED("ActivityContent")
@interface GetSocialActivityContent : NSObject
/// Text content.
@property (nonatomic, copy) NSString * _Nullable text;
/// Attachments, like image and video.
@property (nonatomic, copy) NSArray<GetSocialMediaAttachment *> * _Nonnull attachments;
/// Activity button.
@property (nonatomic, strong) GetSocialActivityButton * _Nullable button;
/// Custom properties.
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull properties;
/// Set property.
/// \param value Value to set.
///
/// \param forKey Key for the value.
///
- (void)setPropertyValue:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)forKey;
/// Append media attachment.
/// \param attachment Media attachment.
///
- (void)appendMediaAttachment:(GetSocialMediaAttachment * _Nonnull)attachment;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC12GetSocialSDK14ActivityStatus")
@interface ActivityStatus : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class GetSocialUserIdList;
enum GetSocialMemberRole : NSInteger;
enum GetSocialMemberStatus : NSInteger;

/// Describe updating group members query.
SWIFT_CLASS_NAMED("AddGroupMembersQuery")
@interface GetSocialAddGroupMembersQuery : NSObject
/// Create a query to add new members to a group. By default users added with role <code>.member</code> and status <code>.member</code>.
/// \param id Group Id.
///
/// \param userIds User ids to add.
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id userIds:(GetSocialUserIdList * _Nonnull)userIds OBJC_DESIGNATED_INITIALIZER;
/// Sets role to new users.
/// \param role User role.
///
///
/// returns:
///
/// Updated <code>AddGroupMembersQuery</code> instance.
- (GetSocialAddGroupMembersQuery * _Nonnull)withRole:(enum GetSocialMemberRole)role SWIFT_WARN_UNUSED_RESULT;
/// Sets status to new users.
/// \param status User status.
///
///
/// returns:
///
/// Updated <code>AddGroupMembersQuery</code> instance.
- (GetSocialAddGroupMembersQuery * _Nonnull)withMemberStatus:(enum GetSocialMemberStatus)status SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class GetSocialPurchaseData;

/// Defines interface for Analytics.
SWIFT_CLASS_NAMED("Analytics")
@interface GetSocialAnalytics : NSObject
/// Report in-app purchase.
/// \param data Purchase details.
///
///
/// returns:
///
/// <code>true</code>, if operation was successful, otherwise <code>false</code>.
+ (BOOL)trackPurchase:(GetSocialPurchaseData * _Nonnull)data;
/// Report custom event.
/// \param event Event name.
///
/// \param properties Event properties.
///
///
/// returns:
///
/// <code>true</code>, if operation was successful, otherwise <code>false</code>.
+ (BOOL)trackCustomEvent:(NSString * _Nonnull)event properties:(NSDictionary<NSString *, NSString *> * _Nullable)properties;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12GetSocialSDK19AnalyticsEventNames")
@interface AnalyticsEventNames : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull appSessionStart;)
+ (NSString * _Nonnull)appSessionStart SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull appSessionEnd;)
+ (NSString * _Nonnull)appSessionEnd SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull uiContentSession;)
+ (NSString * _Nonnull)uiContentSession SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull uiError;)
+ (NSString * _Nonnull)uiError SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkError;)
+ (NSString * _Nonnull)sdkError SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkLog;)
+ (NSString * _Nonnull)sdkLog SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull inviteSent;)
+ (NSString * _Nonnull)inviteSent SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull inviteCanceled;)
+ (NSString * _Nonnull)inviteCanceled SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull inviteFailed;)
+ (NSString * _Nonnull)inviteFailed SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull uiInviteClicked;)
+ (NSString * _Nonnull)uiInviteClicked SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull installReferrerReceivedAfterInit;)
+ (NSString * _Nonnull)installReferrerReceivedAfterInit SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull uiUserActivityActionClick;)
+ (NSString * _Nonnull)uiUserActivityActionClick SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull uiUserActivityPlayVideoClick;)
+ (NSString * _Nonnull)uiUserActivityPlayVideoClick SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull pushNotificationReceived;)
+ (NSString * _Nonnull)pushNotificationReceived SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull pushNotificationClicked;)
+ (NSString * _Nonnull)pushNotificationClicked SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull inappPurchase;)
+ (NSString * _Nonnull)inappPurchase SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull uiNotificationsClick;)
+ (NSString * _Nonnull)uiNotificationsClick SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12GetSocialSDK24AnalyticsEventProperties")
@interface AnalyticsEventProperties : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull action;)
+ (NSString * _Nonnull)action SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull activitiesSource;)
+ (NSString * _Nonnull)activitiesSource SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull activityLikersSource;)
+ (NSString * _Nonnull)activityLikersSource SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull activityId;)
+ (NSString * _Nonnull)activityId SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull commentLikersSource;)
+ (NSString * _Nonnull)commentLikersSource SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull commentsSource;)
+ (NSString * _Nonnull)commentsSource SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull content;)
+ (NSString * _Nonnull)content SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull duration;)
+ (NSString * _Nonnull)duration SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorKey;)
+ (NSString * _Nonnull)errorKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorMessage;)
+ (NSString * _Nonnull)errorMessage SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorSeverity;)
+ (NSString * _Nonnull)errorSeverity SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorSource;)
+ (NSString * _Nonnull)errorSource SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull invitesSource;)
+ (NSString * _Nonnull)invitesSource SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull isOnline;)
+ (NSString * _Nonnull)isOnline SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull notificationActionButtonId;)
+ (NSString * _Nonnull)notificationActionButtonId SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull notificationActionType;)
+ (NSString * _Nonnull)notificationActionType SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull notificationId;)
+ (NSString * _Nonnull)notificationId SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull notificationsClickActionButton;)
+ (NSString * _Nonnull)notificationsClickActionButton SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull notificationsClickListItem;)
+ (NSString * _Nonnull)notificationsClickListItem SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull notificationsClickMarkAsReadButton;)
+ (NSString * _Nonnull)notificationsClickMarkAsReadButton SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull notificationsClickMarkAllAsReadButton;)
+ (NSString * _Nonnull)notificationsClickMarkAllAsReadButton SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull notificationsClickRemoveButton;)
+ (NSString * _Nonnull)notificationsClickRemoveButton SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull notificationsClickRemoveAllButton;)
+ (NSString * _Nonnull)notificationsClickRemoveAllButton SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull notificationsClickSource;)
+ (NSString * _Nonnull)notificationsClickSource SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull notificationsSource;)
+ (NSString * _Nonnull)notificationsSource SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull price;)
+ (NSString * _Nonnull)price SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull priceCurrency;)
+ (NSString * _Nonnull)priceCurrency SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull provider;)
+ (NSString * _Nonnull)provider SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull productId;)
+ (NSString * _Nonnull)productId SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull productTitle;)
+ (NSString * _Nonnull)productTitle SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull productType;)
+ (NSString * _Nonnull)productType SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull purchaseDataAuto;)
+ (NSString * _Nonnull)purchaseDataAuto SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull purchaseDataManual;)
+ (NSString * _Nonnull)purchaseDataManual SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull purchaseDate;)
+ (NSString * _Nonnull)purchaseDate SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull purchaseId;)
+ (NSString * _Nonnull)purchaseId SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull purchaseState;)
+ (NSString * _Nonnull)purchaseState SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull source;)
+ (NSString * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sourceValueUser;)
+ (NSString * _Nonnull)sourceValueUser SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull subProvider;)
+ (NSString * _Nonnull)subProvider SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull title;)
+ (NSString * _Nonnull)title SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull tokenKey;)
+ (NSString * _Nonnull)tokenKey SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Result of getting announcements method.
SWIFT_CLASS_NAMED("AnnouncementsPagingResult")
@interface GetSocialAnnouncementsPagingResult : GetSocialPagingResult
/// List of activities.
@property (nonatomic, readonly, copy) NSArray<GetSocialActivity *> * _Nonnull activities;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Describe query to get announcements.
SWIFT_CLASS_NAMED("AnnouncementsQuery")
@interface GetSocialAnnouncementsQuery : NSObject
/// Create a query to get announcements for a specific user.
/// \param id User id.
///
///
/// returns:
///
/// New <code>AnnouncementsQuery</code> instance.
+ (GetSocialAnnouncementsQuery * _Nonnull)forFeedOfUserWithId:(GetSocialUserId * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Create a query to get announcements in a topic.
/// \param id Topic id.
///
///
/// returns:
///
/// New <code>AnnouncementsQuery</code> instance.
+ (GetSocialAnnouncementsQuery * _Nonnull)inTopicWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Create a query to get announcements in user’s timeline.
///
/// returns:
///
/// New <code>AnnouncementsQuery</code> instance.
+ (GetSocialAnnouncementsQuery * _Nonnull)timeline SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_PROTOCOL("_TtP12GetSocialSDK21AtomicIntegerProvider_")
@protocol AtomicIntegerProvider
- (NSInteger)incrementAndGet SWIFT_WARN_UNUSED_RESULT;
@end


/// Describe ban info object.
SWIFT_CLASS_NAMED("BanInfo")
@interface GetSocialBanInfo : NSObject
/// Ban reason.
@property (nonatomic, readonly, copy) NSString * _Nullable reason;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class GetSocialFriendsQuery;
@class GetSocialFriendsPagingQuery;
@class GetSocialFriendsPagingResult;
@class GetSocialSuggestedFriendsPagingQuery;
@class GetSocialSuggestedFriendsPagingResult;
@class GetSocialUsersPagingQuery;
@class GetSocialUsersPagingResult;
@class GetSocialUsersQuery;
@class GetSocialFollowQuery;
@class GetSocialFollowersPagingQuery;
@class GetSocialFollowersQuery;
@class GetSocialReactionsPagingQuery;
@class GetSocialReactionsPagingResult;
enum GetSocialReportingReason : NSInteger;
@class GetSocialRemoveActivitiesQuery;
@class GetSocialTagsQuery;
@class GetSocialTopic;
@class GetSocialTopicsPagingQuery;
@class GetSocialTopicsPagingResult;
@class GetSocialTopicsQuery;
@class GetSocialGroupContent;
@class GetSocialGroup;
@class GetSocialMembersPagingQuery;
@class GetSocialGroupMembersPagingResult;
@class GetSocialGroupsPagingQuery;
@class GetSocialGroupsPagingResult;
@class GetSocialGroupsQuery;
@class GetSocialGroupMember;
@class GetSocialJoinGroupQuery;
@class GetSocialUpdateGroupMembersQuery;
@class RemoveGroupMembersQuery;
@class Membership;

/// Interface for community related methods.
SWIFT_CLASS_NAMED("Communities")
@interface GetSocialCommunities : NSObject
/// Add a friend to current user, if operation succeeds, they both became friends.
/// If try to add a user who is already a friend, <code>success</code> callback will be called,
/// but user will be added to friends list only once and friends count won’t be increased.
/// \param ids List of user identifiers to add as friend.
///
/// \param success Called if friend ware added.
///
/// \param failure Callend called if operation failed.
///
+ (void)addFriendsWithIds:(GetSocialUserIdList * _Nonnull)ids success:(void (^ _Nonnull)(NSInteger))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Remove users from friends list.
/// If trying to remove a user who is not a friend, success callback will be called,
/// and user’s friends count won’t be decreased.
/// <ul>
///   <li>
///     parameters
///     <ul>
///       <li>
///         ids:          List of user identifiers to remove from friends list.
///       </li>
///       <li>
///         success:      Called if friends were removed.
///       </li>
///       <li>
///         failure:      Called if operation failed.
///       </li>
///     </ul>
///   </li>
/// </ul>
+ (void)removeFriendsWithIds:(GetSocialUserIdList * _Nonnull)ids success:(void (^ _Nonnull)(NSInteger))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Check if users are friend of current user.
/// \param ids List of user identifiers.
///
/// \param success Called with result if users are friends or not.
///
/// \param failure Called if operation failed.
///
+ (void)areFriendsWithIds:(GetSocialUserIdList * _Nonnull)ids success:(void (^ _Nonnull)(NSDictionary<NSString *, NSNumber *> * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Check if user is friend of current user.
/// \param id User identifier.
///
/// \param success Called with result if user is friend or not.
///
/// \param failure Called if operation failed.
///
+ (void)isFriendWithId:(GetSocialUserId * _Nonnull)id success:(void (^ _Nonnull)(BOOL))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Return number of friends of a user.
/// \param query Query parameters.
///
/// \param success Called with number of friends.
///
/// \param failure Called if operation failed.
///
+ (void)friendsCountWithQuery:(GetSocialFriendsQuery * _Nonnull)query success:(void (^ _Nonnull)(NSInteger))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get a list of friends of a user.
/// \param query Query parameters.
///
/// \param success Called with friends of the provided user.
///
/// \param failure Called if operation failed.
///
+ (void)friendsWithQuery:(GetSocialFriendsPagingQuery * _Nonnull)query success:(void (^ _Nonnull)(GetSocialFriendsPagingResult * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get a list of suggested friends of current user.
/// \param query Query parameter.
///
/// \param success Called with list of suggested friends.
///
/// \param failure Called if operation failed.
///
+ (void)suggestedFriendsWithQuery:(GetSocialSuggestedFriendsPagingQuery * _Nonnull)query success:(void (^ _Nonnull)(GetSocialSuggestedFriendsPagingResult * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Set the provided users as friends of current user.
/// important:
///
/// Existing friends will be removed!
/// \param ids List of user identifiers.
///
/// \param success Called if friends was successfully set.
///
/// \param failure Called if operation failed.
///
+ (void)setFriendsWithIds:(GetSocialUserIdList * _Nonnull)ids success:(void (^ _Nonnull)(NSInteger))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Find users.
/// \param query Search parameter.
///
/// \param success Called with list of users. The list is empty if no user found.
///
/// \param failure Called if operation failed.
///
+ (void)usersWithQuery:(GetSocialUsersPagingQuery * _Nonnull)query success:(void (^ _Nonnull)(GetSocialUsersPagingResult * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get multiple users by identifiers.
/// \param ids List of user identifiers.
///
/// \param success Called with map of users, where key is user id. The list is empty if no user found.
///
/// \param failure Called if operation failed.
///
+ (void)usersWithIds:(GetSocialUserIdList * _Nonnull)ids success:(void (^ _Nonnull)(NSDictionary<NSString *, GetSocialUser *> * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get single user by identifier.
/// \param id User identifier.
///
/// \param success Called with the user instance.
///
/// \param failure Called if operation failed.
///
+ (void)userWithId:(GetSocialUserId * _Nonnull)id success:(void (^ _Nonnull)(GetSocialUser * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Return number of user matching the provided query.
/// \param query Query parameter.
///
/// \param success Called with number of users.
///
/// \param failure Called if operation failed.
///
+ (void)usersCountWithQuery:(GetSocialUsersQuery * _Nonnull)query success:(void (^ _Nonnull)(NSInteger))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Follow a community entity, like topic or user.
/// \param query Query parameter.
///
/// \param success Called if operation succeeded with total numbers of followed entities.
///
/// \param failure Called if operation failed.
///
+ (void)followWithQuery:(GetSocialFollowQuery * _Nonnull)query success:(void (^ _Nonnull)(NSInteger))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Unfollow a community entity, like topic or user.
/// \param query Query parameter.
///
/// \param success Called if operation succeeded total numbers of followed entities.
///
/// \param failure Called if operation failed.
///
+ (void)unfollowWithQuery:(GetSocialFollowQuery * _Nonnull)query success:(void (^ _Nonnull)(NSInteger))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Check if a user follows a community entity, like topic or user.
/// \param id User id.
///
/// \param query Query parameter.
///
/// \param success Called with result map, where key is the community entity’s id.
///
/// \param failure Called if operation failed.
///
+ (void)isFollowingWithUserId:(GetSocialUserId * _Nonnull)id query:(GetSocialFollowQuery * _Nonnull)query success:(void (^ _Nonnull)(NSDictionary<NSString *, NSNumber *> * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get followers of a community entity, like topic or user.
/// \param query Query parameter.
///
/// \param success Called with followers.
///
/// \param failure Called if operation failed.
///
+ (void)followersWithQuery:(GetSocialFollowersPagingQuery * _Nonnull)query success:(void (^ _Nonnull)(GetSocialUsersPagingResult * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get number of followers of a community entity, like topic or user.
/// \param query Query parameter.
///
/// \param success Called with number of followers.
///
/// \param failure Called if operation failed.
///
+ (void)followersCountWithQuery:(GetSocialFollowersQuery * _Nonnull)query success:(void (^ _Nonnull)(NSInteger))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get announcements.
/// \param query Query parameter.
///
/// \param success Called with list of announcements.
///
/// \param failure Called if operation failed.
///
+ (void)announcementsWithQuery:(GetSocialAnnouncementsQuery * _Nonnull)query success:(void (^ _Nonnull)(NSArray<GetSocialActivity *> * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get activities.
/// \param query Query parameter.
///
/// \param success Called with list of activities.
///
/// \param failure Called if operation failed.
///
+ (void)activitiesWithQuery:(GetSocialActivitiesPagingQuery * _Nonnull)query success:(void (^ _Nonnull)(GetSocialActivitiesPagingResult * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get a single activity.
/// \param id Activity id.
///
/// \param success Called with activity instance.
///
/// \param failure Called if operation failed.
///
+ (void)activityWithId:(NSString * _Nonnull)id success:(void (^ _Nonnull)(GetSocialActivity * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Post activity content to the specified target.
/// \param content Content to post.
///
/// \param target Where to post the content.
///
/// \param success Called with activity instance if operation succeeded.
///
/// \param failure Called if operation failed.
///
+ (void)postActivityContent:(GetSocialActivityContent * _Nonnull)content target:(GetSocialPostActivityTarget * _Nonnull)target success:(void (^ _Nonnull)(GetSocialActivity * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Update existing activity with provided content.
/// \param id Activity id to update.
///
/// \param content New content.
///
/// \param success Called with updated activity instance if operation succeeded.
///
/// \param failure Called if operation failed.
///
+ (void)updateActivityWithId:(NSString * _Nonnull)id content:(GetSocialActivityContent * _Nonnull)content success:(void (^ _Nonnull)(GetSocialActivity * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Add reaction to an activity.
/// \param reaction Reaction to add.
///
/// \param activityId To add the reaction to.
///
/// \param success Called if operation succeeded.
///
/// \param failure Called if operation failed.
///
+ (void)addReaction:(NSString * _Nonnull)reaction toActivityWithId:(NSString * _Nonnull)activityId success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Remove a reaction from an activity.
/// \param reaction Reaction to remove.
///
/// \param activityId To remove the reaction from.
///
/// \param success Called if operation succeeded.
///
/// \param failure Called if operation failed.
///
+ (void)removeReaction:(NSString * _Nonnull)reaction fromActivityWithId:(NSString * _Nonnull)activityId success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get reactions.
/// \param query Query parameters.
///
/// \param success Called with reactions.
///
/// \param failure Called if operation failed.
///
+ (void)reactionsWithQuery:(GetSocialReactionsPagingQuery * _Nonnull)query success:(void (^ _Nonnull)(GetSocialReactionsPagingResult * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Report an activity.
/// \param id Activity id to report.
///
/// \param reason Reason of reporting.
///
/// \param explanation Explanation of reason.
///
/// \param success Called if operation succeededs.
///
/// \param failure Called if operation failed.
///
+ (void)reportActivityWithId:(NSString * _Nonnull)id reason:(enum GetSocialReportingReason)reason explanation:(NSString * _Nullable)explanation success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Remove activities.
/// \param query Query parameters.
///
/// \param success Called if operation succeeded.
///
/// \param failure Called if operation failed.
///
+ (void)removeActivitiesWithQuery:(GetSocialRemoveActivitiesQuery * _Nonnull)query success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Find tags.
/// \param query Query parameters.
///
/// \param success Called with list of tags.
///
/// \param failure Called if operation failed.
///
+ (void)tagsWithQuery:(GetSocialTagsQuery * _Nonnull)query success:(void (^ _Nonnull)(NSArray<NSString *> * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get a single topic.
/// \param id Topic id.
///
/// \param success Called with topic.
///
/// \param failure Called if operation failed.
///
+ (void)topicWithId:(NSString * _Nonnull)id success:(void (^ _Nonnull)(GetSocialTopic * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Find topics.
/// \param query Query parameter.
///
/// \param success Called with list of topics.
///
/// \param failure Called if operation failed.
///
+ (void)topicsWithQuery:(GetSocialTopicsPagingQuery * _Nonnull)query success:(void (^ _Nonnull)(GetSocialTopicsPagingResult * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get number of topics.
/// \param query Query parameter.
///
/// \param success Called with number of topics.
///
/// \param failure Called if operation failed.
///
+ (void)topicsCountWithQuery:(GetSocialTopicsQuery * _Nonnull)query success:(void (^ _Nonnull)(NSInteger))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Creates a new group.
/// \param content Group content.
///
/// \param success Called with created group.
///
/// \param failure Called if operation failed.
///
+ (void)createGroupWithContent:(GetSocialGroupContent * _Nonnull)content success:(void (^ _Nonnull)(GetSocialGroup * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Updates an existing group.
/// \param id Existing group id.
///
/// \param content New group content.
///
/// \param success Called with updated topic.
///
/// \param failure Called if operation failed.
///
+ (void)updateGroupWithId:(NSString * _Nonnull)id content:(GetSocialGroupContent * _Nonnull)content success:(void (^ _Nonnull)(GetSocialGroup * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Removes groups.
/// \param ids Group ids to delete.
///
/// \param success Called if groups are removed.
///
/// \param failure Called if operation failed.
///
+ (void)removeGroupsWithIds:(NSArray<NSString *> * _Nonnull)ids success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get members of the provided group.
/// \param query Query parameter.
///
/// \param success Called with group members .
///
/// \param failure Called if operation failed.
///
+ (void)membersOfGroupWithQuery:(GetSocialMembersPagingQuery * _Nonnull)query success:(void (^ _Nonnull)(GetSocialGroupMembersPagingResult * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get groups.
/// \param query Query parameter.
///
/// \param success Called with groups.
///
/// \param failure Called if operation failed.
///
+ (void)groupsWithQuery:(GetSocialGroupsPagingQuery * _Nonnull)query success:(void (^ _Nonnull)(GetSocialGroupsPagingResult * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get number of groups.
/// \param query Query parameter.
///
/// \param success Called with number of groups .
///
/// \param failure Called if operation failed.
///
+ (void)groupsCountWithQuery:(GetSocialGroupsQuery * _Nonnull)query success:(void (^ _Nonnull)(NSInteger))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get group by id.
/// \param id Group id.
///
/// \param success Called with group .
///
/// \param failure Called if operation failed.
///
+ (void)groupWithId:(NSString * _Nonnull)id success:(void (^ _Nonnull)(GetSocialGroup * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Adds user to a group.
/// \param query Query parameter.
///
/// \param success Called with new group member .
///
/// \param failure Called if operation failed.
///
+ (void)addGroupMembersWithQuery:(GetSocialAddGroupMembersQuery * _Nonnull)query success:(void (^ _Nonnull)(NSArray<GetSocialGroupMember *> * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Current user joins a group.
/// \param query Query parameter.
///
/// \param success Called with new group member.
///
/// \param failure Called if operation failed.
///
+ (void)joinGroupWithQuery:(GetSocialJoinGroupQuery * _Nonnull)query success:(void (^ _Nonnull)(GetSocialGroupMember * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Updates an existing group member.
/// \param query Query parameter.
///
/// \param success Called with updated group member.
///
/// \param failure Called if operation failed.
///
+ (void)updateGroupMembersWithQuery:(GetSocialUpdateGroupMembersQuery * _Nonnull)query success:(void (^ _Nonnull)(NSArray<GetSocialGroupMember *> * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Removes member from group.
/// \param query Query parameter.
///
/// \param success Called if member removed.
///
/// \param failure Called if operation failed.
///
+ (void)removeGroupMembersWithQuery:(RemoveGroupMembersQuery * _Nonnull)query success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Checks if users are member of group.
/// \param id Group id.
///
/// \param userIds User ids to check.
///
/// \param success Called if member statuses.
///
/// \param failure Called if operation failed.
///
+ (void)areGroupMembersOf:(NSString * _Nonnull)id userIds:(GetSocialUserIdList * _Nonnull)userIds success:(void (^ _Nonnull)(NSDictionary<NSString *, Membership *> * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// List of all possible actions.
typedef SWIFT_ENUM_NAMED(NSInteger, GetSocialCommunitiesAction, "CommunitiesAction", open) {
/// Post an activity.
  GetSocialCommunitiesActionPost = 0,
/// Interact, like a post.
  GetSocialCommunitiesActionReact = 1,
/// Post a comment.
  GetSocialCommunitiesActionComment = 2,
};

enum GetSocialCommunitiesEntityType : NSInteger;

/// Describe a community entity.
SWIFT_CLASS_NAMED("CommunitiesEntity")
@interface GetSocialCommunitiesEntity : NSObject
/// Entity id.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Entity type.
@property (nonatomic, readonly) enum GetSocialCommunitiesEntityType type;
/// Localized title.
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// Avatar url.
@property (nonatomic, readonly, copy) NSString * _Nullable avatarUrl;
/// Number of followers.
@property (nonatomic, readonly) NSInteger followersCount;
/// Current user is follower or not.
@property (nonatomic, readonly) BOOL isFollowedByMe;
/// Check if specified action is available or not.
/// - parameters:
/// - action:       The action to check.
/// - returns:
/// <code>true</code>, if action is available, otherwise <code>false</code>.
- (BOOL)isActionAllowedWithAction:(enum GetSocialCommunitiesAction)action SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Comminity Entity types.
typedef SWIFT_ENUM_NAMED(NSInteger, GetSocialCommunitiesEntityType, "CommunitiesEntityType", open) {
/// Unknown.
  GetSocialCommunitiesEntityTypeUnknown = 0,
/// App.
  GetSocialCommunitiesEntityTypeApp = 1,
/// Topic.
  GetSocialCommunitiesEntityTypeTopic = 2,
/// Group.
  GetSocialCommunitiesEntityTypeGroup = 3,
/// User.
  GetSocialCommunitiesEntityTypeUser = 4,
/// Activity.
  GetSocialCommunitiesEntityTypeActivity = 6,
};


/// Describe community settings.
SWIFT_CLASS_NAMED("CommunitiesSettings")
@interface GetSocialCommunitiesSettings : NSObject
/// Properties.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull properties;
/// Is discoverable.
@property (nonatomic, readonly) BOOL isDiscovarable;
/// Is private.
@property (nonatomic, readonly) BOOL isPrivate;
/// Check if sepcified action is available or not.
/// - parameters:
/// - action:       The action to check.
/// - returns:
/// <code>true</code>, if action is available, otherwise <code>false</code>.
- (BOOL)isActionAllowedWithAction:(enum GetSocialCommunitiesAction)action SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe user instance.
SWIFT_CLASS_NAMED("User")
@interface GetSocialUser : NSObject
/// GetSocial Id of user.
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
/// Display name.
@property (nonatomic, readonly, copy) NSString * _Nonnull displayName;
/// Avatar Url.
@property (nonatomic, readonly, copy) NSString * _Nullable avatarUrl;
/// Identities added to user.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull identities;
/// Public properties.
/// These properties are accessible to other users.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull publicProperties;
/// Check if user is the app itself.
@property (nonatomic, readonly) BOOL isApp;
/// Check if user is verified.
@property (nonatomic, readonly) BOOL isVerified;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Check if user is equal to another user.
/// \param object Another user object.
///
///
/// returns:
///
/// <code>true</code> if users are equal, otherwise <code>false</code>.
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe a private user object.
SWIFT_CLASS("_TtC12GetSocialSDK11PrivateUser")
@interface PrivateUser : GetSocialUser
/// Private properties.
/// These properties are not accessible to other users.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull privateProperties;
/// Ban information if user is banned.
@property (nonatomic, readonly, strong) GetSocialBanInfo * _Nullable banInfo;
/// Shows if user is banned or not.
@property (nonatomic, readonly) BOOL isBanned;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Check if user object equal to another user object.
/// \param object Other user object.
///
///
/// returns:
///
/// <code>true</code> if they equal, otherwise <code>false</code>.
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describbe a conflict user object.
SWIFT_CLASS_NAMED("ConflictUser")
@interface GetSocialConflictUser : PrivateUser
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@class GetSocialUserUpdate;
@class GetSocialIdentity;

/// Interface for managing current GetSocial user.
SWIFT_CLASS_NAMED("CurrentUser")
@interface GetSocialCurrentUser : PrivateUser
/// Update user details.
/// \param userUpdate Properties and their new values.
///
/// \param success Called if user was updated.
///
/// \param failure Called if operation failed.
///
- (void)updateDetailsWith:(GetSocialUserUpdate * _Nonnull)userUpdate success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Indicate if the user has at least one identity available.
///
/// returns:
///
/// <code>true</code>, if user is anonymous or framework is not initalized, otherwise <code>false</code>
- (BOOL)isAnonymous SWIFT_WARN_UNUSED_RESULT;
/// Add identity to current user.
/// \param identity Identity to add.
///
/// \param success Called if identity was added.
///
/// \param conflict Called if identity could not be added due to a conflict with other user.
///
/// \param failure Called if operation failed.
///
- (void)addIdentity:(GetSocialIdentity * _Nonnull)identity success:(void (^ _Nonnull)(void))success conflict:(void (^ _Nonnull)(GetSocialConflictUser * _Nonnull))conflict failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Remove identity from current user.
/// \param providerId The provider connected to an identity on current user. Check <code>IdentityProviderIds</code> class for common provider ids.
///
/// \param success Called if identity was removed.
///
/// \param failure Called if operation failed.
///
- (void)removeIdentityByProviderId:(NSString * _Nonnull)providerId success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12GetSocialSDK7UseCase")
@interface UseCase : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12GetSocialSDK16DebugLogsUseCase")
@interface DebugLogsUseCase : UseCase
- (void)changeStatusWithNewSetting:(NSString * _Nullable)newSetting;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("ErrorCode")
@interface GetSocialErrorCode : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger Unknown;)
+ (NSInteger)Unknown SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger GenericCommunicationError;)
+ (NSInteger)GenericCommunicationError SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger NullAppID;)
+ (NSInteger)NullAppID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger InvalidAppID;)
+ (NSInteger)InvalidAppID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger InvalidThriftResponse;)
+ (NSInteger)InvalidThriftResponse SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger UncaughtException;)
+ (NSInteger)UncaughtException SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger ActionDenied;)
+ (NSInteger)ActionDenied SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger SdkInitializationFailed;)
+ (NSInteger)SdkInitializationFailed SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger IllegalArgument;)
+ (NSInteger)IllegalArgument SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger IllegalState;)
+ (NSInteger)IllegalState SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger InvalidOptionalValue;)
+ (NSInteger)InvalidOptionalValue SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger SdkNotInitialized;)
+ (NSInteger)SdkNotInitialized SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger ActivityNotFound;)
+ (NSInteger)ActivityNotFound SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger UserIsBanned;)
+ (NSInteger)UserIsBanned SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger PlatformDisabled;)
+ (NSInteger)PlatformDisabled SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger AppSignatureMismatch;)
+ (NSInteger)AppSignatureMismatch SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger UserIdTokenMismatch;)
+ (NSInteger)UserIdTokenMismatch SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger UserConflict;)
+ (NSInteger)UserConflict SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger NoReferrerMatch;)
+ (NSInteger)NoReferrerMatch SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger ActivityRejected;)
+ (NSInteger)ActivityRejected SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger ActivityRateLimited;)
+ (NSInteger)ActivityRateLimited SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger CommentRateLimited;)
+ (NSInteger)CommentRateLimited SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger ConnectionTimeout;)
+ (NSInteger)ConnectionTimeout SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger NoInternet;)
+ (NSInteger)NoInternet SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger JsonBridge;)
+ (NSInteger)JsonBridge SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger JsonEncode;)
+ (NSInteger)JsonEncode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger JsonDecode;)
+ (NSInteger)JsonDecode SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe a query to follow an entity.
SWIFT_CLASS_NAMED("FollowQuery")
@interface GetSocialFollowQuery : NSObject
/// Create query to follow topics.
/// \param ids List of topic ids.
///
///
/// returns:
///
/// New <code>FollowQuery</code> instance.
+ (GetSocialFollowQuery * _Nonnull)topicsWithIds:(NSArray<NSString *> * _Nonnull)ids SWIFT_WARN_UNUSED_RESULT;
/// Create query to follow groups.
/// \param ids List of group ids.
///
///
/// returns:
///
/// New <code>FollowQuery</code> instance.
+ (GetSocialFollowQuery * _Nonnull)groupsWithIds:(NSArray<NSString *> * _Nonnull)ids SWIFT_WARN_UNUSED_RESULT;
/// Create query to follow users.
/// \param ids User ids.
///
///
/// returns:
///
/// New <code>FollowQuery</code> instance.
+ (GetSocialFollowQuery * _Nonnull)usersWithIds:(GetSocialUserIdList * _Nonnull)ids SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end






/// Describe followers paging query.
SWIFT_CLASS_NAMED("FollowersPagingQuery")
@interface GetSocialFollowersPagingQuery : GetSocialPagingQuery
@property (nonatomic, readonly, strong) GetSocialFollowersQuery * _Nonnull query;
/// Constructor.
/// \param query <code>FollowersQuery</code> instance.
///
///
/// returns:
///
/// New <code>FollowersQuery</code> instance.
- (nonnull instancetype)initWithQuery:(GetSocialFollowersQuery * _Nonnull)query OBJC_DESIGNATED_INITIALIZER;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Result of getting followers method.
SWIFT_CLASS_NAMED("FollowersPagingResult")
@interface GetSocialFollowersPagingResult : GetSocialPagingResult
/// List of followers.
@property (nonatomic, readonly, copy) NSArray<GetSocialUser *> * _Nonnull followers;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Describe query to get followers.
SWIFT_CLASS_NAMED("FollowersQuery")
@interface GetSocialFollowersQuery : NSObject
/// Create query to get followers of a topic.
/// \param id Topic id.
///
///
/// returns:
///
/// New <code>FollowersQuery</code> instance.
+ (GetSocialFollowersQuery * _Nonnull)ofTopicWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Create query to get followers of a group.
/// \param id Group id.
///
///
/// returns:
///
/// New <code>FollowersQuery</code> instance.
+ (GetSocialFollowersQuery * _Nonnull)ofGroupWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Create a query to get followers of a user.
/// \param id User id.
///
///
/// returns:
///
/// New <code>FollowersQuery</code> instance.
+ (GetSocialFollowersQuery * _Nonnull)ofUserWithId:(GetSocialUserId * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Friends paging query.
SWIFT_CLASS_NAMED("FriendsPagingQuery")
@interface GetSocialFriendsPagingQuery : GetSocialPagingQuery
@property (nonatomic, readonly, strong) GetSocialFriendsQuery * _Nonnull query;
/// Constructor.
/// \param query <code>FriendsQuery</code> instance.
///
///
/// returns:
///
/// New <code>FriendsPagingQuery</code> instance.
- (nonnull instancetype)initWithQuery:(GetSocialFriendsQuery * _Nonnull)query OBJC_DESIGNATED_INITIALIZER;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Result of getting friends method.
SWIFT_CLASS_NAMED("FriendsPagingResult")
@interface GetSocialFriendsPagingResult : GetSocialPagingResult
/// List of friends.
@property (nonatomic, readonly, copy) NSArray<GetSocialUser *> * _Nonnull friends;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Describe a query to get friends.
SWIFT_CLASS_NAMED("FriendsQuery")
@interface GetSocialFriendsQuery : NSObject
/// Create a query to friends of another user.
/// - returns:
/// New <code>FriendsQuery</code> instance.
+ (GetSocialFriendsQuery * _Nonnull)ofUserWithId:(GetSocialUserId * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC12GetSocialSDK25GetApplicationInfoUseCase")
@interface GetApplicationInfoUseCase : UseCase
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable appName;)
+ (NSString * _Nullable)appName SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable appAvatar;)
+ (NSString * _Nullable)appAvatar SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Interface for common methods.
SWIFT_CLASS("_TtC12GetSocialSDK9GetSocial")
@interface GetSocial : NSObject
/// Return version of GetSocial framework.
///
/// returns:
///
/// Framework version, like 7.0.0
+ (NSString * _Nonnull)sdkVersion SWIFT_WARN_UNUSED_RESULT;
/// Indicate if the device the app is running on added as test device to GetSocial Dashboard.
///
/// returns:
///
/// <code>true</code>, if added, otherwise <code>false</code>.
+ (BOOL)isTestDevice SWIFT_WARN_UNUSED_RESULT;
/// Return device identifier.
///
/// returns:
///
/// Device identifier. If Limit Ad Tracking is enabled, the returned value contains only <code>0</code>s.
+ (NSString * _Nonnull)deviceIdentifier SWIFT_WARN_UNUSED_RESULT;
/// Initialize the SDK. Use <code>OnInitializedListener</code> to be notified when SDK is initialized.
/// GetSocial App Id will be taken from getsocial.json file.
+ (void)initSdk SWIFT_METHOD_FAMILY(none);
/// Initialize the SDK. Use <code>OnInitializedListener</code> to be notified when SDK is initialized.
/// \param appId GetSocial App Id, you can find your App Id on GetSocial Dashboard.
///
+ (void)initSdkWithAppId:(NSString * _Nonnull)appId SWIFT_METHOD_FAMILY(none);
/// Initialize the SDK with a specific user. SDK should be uninitialized at that moment.
/// \param identity Identity of the user.
///
/// \param success Called if operation succeeded.
///
/// \param failure Called if operation failed.
///
+ (void)initSdkWithIdentity:(GetSocialIdentity * _Nonnull)identity success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure SWIFT_METHOD_FAMILY(none);
/// Set listener to be invoked when SDK initialized.
/// It will be executed immediately, if SDK is already initialized.
/// \param listener Listener to be invoked.
///
+ (void)addOnInitializedListener:(void (^ _Nonnull)(void))listener;
/// Indicate the status of GetSocial framework.
///
/// returns:
///
/// <code>true</code>, if initialization finished, otherwise <code>false</code>.
+ (BOOL)isInitialized SWIFT_WARN_UNUSED_RESULT;
/// Return instance of current GetSocial user.
///
/// returns:
///
/// User instance, or nil if initialization is not finished or failed.
+ (GetSocialCurrentUser * _Nullable)currentUser SWIFT_WARN_UNUSED_RESULT;
/// Set listener to be invoked when current user changed.
/// The action is executed on the main thread, so be careful with operations that you put inside the block.
/// Handler will be called in the following cases:
/// <ul>
///   <li>
///     SDK initialization finished.
///   </li>
///   <li>
///     <code>switchUser</code> method was called and user was changed.
///   </li>
///   <li>
///     <code>resetUser</code> method was called.
///   </li>
/// </ul>
/// \param listener Listener to be invoked.
///
///
/// returns:
///
/// Id to use in <code>removeOnCurrentUserChangedListener</code>.
+ (NSString * _Nonnull)addOnCurrentUserChangedListener:(void (^ _Nonnull)(GetSocialCurrentUser * _Nonnull))listener;
/// Remove previously added listener.
/// \param id Listener id to be removed.
///
+ (void)removeOnCurrentUserChangedListener:(NSString * _Nonnull)id;
/// Set the language of GetSocial framework.
/// If provided value is incorrect, the default language will be used.
/// \param languageCode Check possible values in <code>LanguageCodes</code> class.
///
///
/// returns:
///
/// <code>true</code>, if operation was successful, otherwise <code>false</code>.
+ (BOOL)setLanguage:(NSString * _Nonnull)languageCode;
/// Return the current language of GetSocial framework.
///
/// returns:
///
/// Language code as defined in <code>LanguageCodes</code>.
+ (NSString * _Nonnull)language SWIFT_WARN_UNUSED_RESULT;
/// Handle action using the default GetSocial behaviour.
+ (void)handleAction:(GetSocialAction * _Nonnull)action;
/// Reset current user and creates a new anonymous user.
/// \param success Called if user was reset.
///
/// \param failure Called if operation failed.
///
+ (void)resetUserWithSuccess:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Reset current user and without creating a new user.
/// \param success Called if user was reset.
///
/// \param failure Called if operation failed.
///
+ (void)resetWithSuccess:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Switch the current user to another user identified by the provided identity.
/// \param identity Identity that current user should be switched to.
///
/// \param success Called if user was switched.
///
/// \param failure Called if operation failed.
///
+ (void)switchUserToIdentity:(GetSocialIdentity * _Nonnull)identity success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12GetSocialSDK19GetSocialLoggerObjc")
@interface GetSocialLoggerObjc : NSObject
+ (void)logWithLevel:(NSString * _Nonnull)level message:(NSString * _Nonnull)message;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class GetSocialNotificationButton;
@class GetSocialNotificationCustomization;

/// Describe notification object.
SWIFT_CLASS("_TtC12GetSocialSDK21GetSocialNotification")
@interface GetSocialNotification : NSObject
/// Notification type.
@property (nonatomic, readonly, copy) NSString * _Nullable type;
/// Notification status.
@property (nonatomic, readonly, copy) NSString * _Nullable status;
/// Creation date.
@property (nonatomic, readonly) int64_t createdAt;
/// Notification id.
@property (nonatomic, readonly, copy) NSString * _Nonnull notificationId;
/// Notification text.
@property (nonatomic, readonly, copy) NSString * _Nullable text;
/// Notification title.
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// Media attachment.
@property (nonatomic, strong) GetSocialMediaAttachment * _Nullable mediaAttachment;
/// Notification action.
@property (nonatomic, readonly, strong) GetSocialAction * _Nullable notificationAction;
/// Action buttons.
@property (nonatomic, readonly, copy) NSArray<GetSocialNotificationButton *> * _Nonnull actionButtons;
/// Sender.
@property (nonatomic, readonly, strong) GetSocialUser * _Nonnull sender;
/// Customization.
@property (nonatomic, readonly, strong) GetSocialNotificationCustomization * _Nullable customization;
/// Check if notification was read or not.
@property (nonatomic, readonly) BOOL wasRead;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe group object.
SWIFT_CLASS_NAMED("Group")
@interface GetSocialGroup : NSObject
/// Group identifier
@property (nonatomic, readonly, copy) NSString * _Nonnull groupId;
/// Group localized title
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// Group localized description
@property (nonatomic, readonly, copy) NSString * _Nullable groupDescription;
/// Avatar Url
@property (nonatomic, readonly, copy) NSString * _Nullable avatarUrl;
/// Creation date
@property (nonatomic, readonly) int64_t createdAt;
/// Last update
@property (nonatomic, readonly) int64_t updatedAt;
/// Setting
@property (nonatomic, readonly, strong) GetSocialCommunitiesSettings * _Nonnull settings;
/// Number of followers
@property (nonatomic, readonly) NSInteger followersCount;
/// Current user is follower or not
@property (nonatomic, readonly) BOOL isFollowedByMe;
/// Number of members
@property (nonatomic, readonly) NSInteger membersCount;
/// Membership info
@property (nonatomic, readonly, strong) Membership * _Nullable membership;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe group content object.
SWIFT_CLASS_NAMED("GroupContent")
@interface GetSocialGroupContent : NSObject
/// Group id
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Group title
@property (nonatomic, copy) NSString * _Nullable title;
/// Group description
@property (nonatomic, copy) NSString * _Nullable groupDescription;
/// Group icon
@property (nonatomic, strong) GetSocialMediaAttachment * _Nullable avatar;
/// Custom properties
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull properties;
/// Create a new group content to create a group.
/// \param groupId Group id.
///
- (nonnull instancetype)initWithGroupId:(NSString * _Nonnull)groupId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Describe group member object.
SWIFT_CLASS_NAMED("GroupMember")
@interface GetSocialGroupMember : GetSocialUser
/// Membership details
@property (nonatomic, readonly, strong) Membership * _Nonnull membership;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Result of getting group members method.
SWIFT_CLASS_NAMED("GroupMembersPagingResult")
@interface GetSocialGroupMembersPagingResult : GetSocialPagingResult
/// List of members.
@property (nonatomic, readonly, copy) NSArray<GetSocialGroupMember *> * _Nonnull members;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Describe groups paging query.
SWIFT_CLASS_NAMED("GroupsPagingQuery")
@interface GetSocialGroupsPagingQuery : GetSocialPagingQuery
/// Constructor.
/// \param query <code>GroupsQuery</code> instance.
///
///
/// returns:
///
/// New <code>GroupsPagingQuery</code> instance.
- (nonnull instancetype)initWithQuery:(GetSocialGroupsQuery * _Nonnull)query OBJC_DESIGNATED_INITIALIZER;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Result of getting groups method.
SWIFT_CLASS_NAMED("GroupsPagingResult")
@interface GetSocialGroupsPagingResult : GetSocialPagingResult
/// List of groups.
@property (nonatomic, readonly, copy) NSArray<GetSocialGroup *> * _Nonnull groups;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Describe query to get group.
SWIFT_CLASS_NAMED("GroupsQuery")
@interface GetSocialGroupsQuery : NSObject
/// Create a query to find a group.
/// \param searchTerm Search term.
///
///
/// returns:
///
/// New <code>TopicsQuery</code> instance.
+ (GetSocialGroupsQuery * _Nonnull)find:(NSString * _Nonnull)searchTerm SWIFT_WARN_UNUSED_RESULT;
/// Create a query to get groups.
///
/// returns:
///
/// New <code>GroupsQuery</code> instance.
+ (GetSocialGroupsQuery * _Nonnull)all SWIFT_WARN_UNUSED_RESULT;
/// Filters groups followed by a specific user.
/// \param id User id.
///
- (GetSocialGroupsQuery * _Nonnull)followedByUserWithId:(GetSocialUserId * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Filters groups which a specific user is member of.
/// \param id User id.
///
- (GetSocialGroupsQuery * _Nonnull)byMemberId:(GetSocialUserId * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Describe identity object.
SWIFT_CLASS_NAMED("Identity")
@interface GetSocialIdentity : NSObject
/// Create an identity with Facebook’s access token.
/// - parameters:
/// - accessToken:      Access token as returned by Facebook.
/// - returns:
/// New <code>Identity</code> instance.
+ (GetSocialIdentity * _Nonnull)facebookIdentityWithAccessToken:(NSString * _Nonnull)accessToken SWIFT_WARN_UNUSED_RESULT;
/// Create an identity with custom data.
/// - parameters:
/// - providerId:       Custom provider id.
/// - userId:           Id of user.
/// - accessToken:      Access token.
/// - returns:
/// New <code>Identity</code> instance.
+ (GetSocialIdentity * _Nonnull)customIdentityWithProviderId:(NSString * _Nonnull)providerId userId:(NSString * _Nonnull)userId accessToken:(NSString * _Nonnull)accessToken SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end








/// Constants for identity provider ids.
SWIFT_CLASS_NAMED("IdentityProviderIds")
@interface GetSocialIdentityProviderIds : NSObject
/// IdentityProviderId for Facebook.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull facebook;)
+ (NSString * _Nonnull)facebook SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12GetSocialSDK14InitSdkUseCase")
@interface InitSdkUseCase : UseCase
- (void)executeWith:(GetSocialIdentity * _Nonnull)identity success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
- (void)executeWith:(NSString * _Nullable)appId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP12GetSocialSDK20InternetConnectivity_")
@protocol InternetConnectivity
- (BOOL)isConnected SWIFT_WARN_UNUSED_RESULT;
@end

@class UIImage;

/// Describe an invite object.
SWIFT_CLASS_NAMED("Invite")
@interface GetSocialInvite : NSObject
/// Invite subject.
@property (nonatomic, readonly, copy) NSString * _Nullable subject;
/// Invite text.
@property (nonatomic, readonly, copy) NSString * _Nullable text;
/// Invite sender’s display name.
@property (nonatomic, readonly, copy) NSString * _Nullable userName;
/// Image content as url.
@property (nonatomic, readonly, copy) NSString * _Nullable imageUrl;
/// Image content as UIImage.
@property (nonatomic, readonly, strong) UIImage * _Nullable image;
/// Gif url.
@property (nonatomic, readonly, copy) NSString * _Nullable gifUrl;
/// Video url.
@property (nonatomic, readonly, copy) NSString * _Nullable videoUrl;
/// Referral link url.
@property (nonatomic, readonly, copy) NSString * _Nullable referralUrl;
/// Link parameters.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull linkParams;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS_NAMED("InviteChannel")
@interface GetSocialInviteChannel : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull channelId;
@property (nonatomic, readonly, copy) NSString * _Nullable name;
@property (nonatomic, readonly, copy) NSString * _Nonnull iconUrl;
@property (nonatomic, readonly) BOOL isEnabled;
@property (nonatomic, readonly) int32_t displayOrder;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// Define invite channel ids.
SWIFT_CLASS_NAMED("InviteChannelIds")
@interface GetSocialInviteChannelIds : NSObject
/// Generic.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull generic;)
+ (NSString * _Nonnull)generic SWIFT_WARN_UNUSED_RESULT;
/// Email.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull email;)
+ (NSString * _Nonnull)email SWIFT_WARN_UNUSED_RESULT;
/// Facebook.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull facebook;)
+ (NSString * _Nonnull)facebook SWIFT_WARN_UNUSED_RESULT;
/// Instagram.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull instagramDirect;)
+ (NSString * _Nonnull)instagramDirect SWIFT_WARN_UNUSED_RESULT;
/// Kakao.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kakao;)
+ (NSString * _Nonnull)kakao SWIFT_WARN_UNUSED_RESULT;
/// Kik.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kik;)
+ (NSString * _Nonnull)kik SWIFT_WARN_UNUSED_RESULT;
/// Line.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull line;)
+ (NSString * _Nonnull)line SWIFT_WARN_UNUSED_RESULT;
/// Facebook Messenger.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull facebookMessenger;)
+ (NSString * _Nonnull)facebookMessenger SWIFT_WARN_UNUSED_RESULT;
/// Native share.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull nativeShare;)
+ (NSString * _Nonnull)nativeShare SWIFT_WARN_UNUSED_RESULT;
/// Snapchat.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull snapchat;)
+ (NSString * _Nonnull)snapchat SWIFT_WARN_UNUSED_RESULT;
/// SMS.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sms;)
+ (NSString * _Nonnull)sms SWIFT_WARN_UNUSED_RESULT;
/// Twitter.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull twitter;)
+ (NSString * _Nonnull)twitter SWIFT_WARN_UNUSED_RESULT;
/// Telegram.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull telegram;)
+ (NSString * _Nonnull)telegram SWIFT_WARN_UNUSED_RESULT;
/// Viber.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull viber;)
+ (NSString * _Nonnull)viber SWIFT_WARN_UNUSED_RESULT;
/// VK.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull vk;)
+ (NSString * _Nonnull)vk SWIFT_WARN_UNUSED_RESULT;
/// WhatsApp.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull whatsApp;)
+ (NSString * _Nonnull)whatsApp SWIFT_WARN_UNUSED_RESULT;
/// Instagram Stories.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull instagramStories;)
+ (NSString * _Nonnull)instagramStories SWIFT_WARN_UNUSED_RESULT;
/// Facebook Stories.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull facebookStories;)
+ (NSString * _Nonnull)facebookStories SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIViewController;

SWIFT_PROTOCOL_NAMED("InviteChannelPlugin")
@protocol GetSocialInviteChannelPluginProtocol
- (BOOL)isAvailableForDevice:(GetSocialInviteChannel * _Nonnull)inviteChannel SWIFT_WARN_UNUSED_RESULT;
- (void)presentPluginWithInviteChannel:(GetSocialInviteChannel * _Nonnull)inviteChannel invite:(GetSocialInvite * _Nonnull)invite onViewController:(UIViewController * _Nonnull)onViewController success:(void (^ _Nonnull)(NSDictionary<NSString *, NSString *> * _Nonnull))success cancel:(void (^ _Nonnull)(NSDictionary<NSString *, NSString *> * _Nonnull))cancel failure:(void (^ _Nonnull)(NSError * _Nonnull, NSDictionary<NSString *, NSString *> * _Nonnull))failure;
@end


/// Describe invite content.
SWIFT_CLASS_NAMED("InviteContent")
@interface GetSocialInviteContent : NSObject
/// Invite subject.
@property (nonatomic, copy) NSString * _Nullable subject;
/// Invite text.
@property (nonatomic, copy) NSString * _Nullable text;
/// Attachment.
@property (nonatomic, strong) GetSocialMediaAttachment * _Nullable mediaAttachment;
/// Link parameters.
@property (nonatomic, copy) NSDictionary<NSString *, NSObject *> * _Nonnull linkParams;
/// Set link parameter.
/// \param value Value to set.
///
/// \param forKey Key for the value.
///
- (void)setLinkParameterValue:(NSObject * _Nonnull)value forKey:(NSString * _Nonnull)forKey;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// Describe invite content placeholder.
SWIFT_CLASS_NAMED("InviteContentPlaceholders")
@interface GetSocialInviteContentPlaceholders : NSObject
/// Tag is replaced with referral url.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull inviteUrl;)
+ (NSString * _Nonnull)inviteUrl SWIFT_WARN_UNUSED_RESULT;
/// Tag is replaced with current user’s name.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull userName;)
+ (NSString * _Nonnull)userName SWIFT_WARN_UNUSED_RESULT;
/// Tag is replaced with promo code from LinkParams if any present.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull promoCode;)
+ (NSString * _Nonnull)promoCode SWIFT_WARN_UNUSED_RESULT;
/// Tag is replaced with the package string e.g. im.getsocial.testapp.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull appPackageName;)
+ (NSString * _Nonnull)appPackageName SWIFT_WARN_UNUSED_RESULT;
/// Tag is replaced with the subject provided on the GetSocial Dashboard.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull inviteSubject;)
+ (NSString * _Nonnull)inviteSubject SWIFT_WARN_UNUSED_RESULT;
/// Tag is replaced with the message text provided on the GetSocial Dashboard.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull inviteText;)
+ (NSString * _Nonnull)inviteText SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("InviteProperties")
@interface GetSocialInviteProperties : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable action;
@property (nonatomic, readonly, copy) NSString * _Nullable contentType;
@property (nonatomic, readonly, copy) NSString * _Nullable packageName;
@property (nonatomic, readonly, copy) NSString * _Nullable urlScheme;
@property (nonatomic, readonly, copy) NSString * _Nullable className;
@property (nonatomic, readonly, copy) NSString * _Nullable data;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end





@class GetSocialReferralData;
@class GetSocialReferralUsersPagingQuery;
@class GetSocialReferralUsersPagingResult;

/// Interface for Invites.
SWIFT_CLASS_NAMED("Invites")
@interface GetSocialInvites : NSObject
/// Return a list of available channels.
/// \param success Called with list of available channels.
///
/// \param failure Called if operation failed.
///
+ (void)availableChannelsWithSuccess:(SWIFT_NOESCAPE void (^ _Nonnull)(NSArray<GetSocialInviteChannel *> * _Nonnull))success failure:(SWIFT_NOESCAPE void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Send an invitation with content on the specified channel.
/// \param content Content to send.
///
/// \param onChannel Channel to use. Check <code>InviteChannelIds</code> for possible values.
///
/// \param success Called if invitation was sent.
///
/// \param cancel Called if invitation sending was canceled.
///
/// \param failure Called if operation failed.
///
+ (void)sendInviteContent:(GetSocialInviteContent * _Nullable)content onChannel:(NSString * _Nonnull)onChannel success:(void (^ _Nonnull)(void))success cancel:(void (^ _Nonnull)(void))cancel failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Create an invite with invite url to be shared any custom way.
/// \param content Content to use.
///
/// \param success Called with created invite.
///
/// \param failure Called if operation failed.
///
+ (void)createInviteWithContent:(GetSocialInviteContent * _Nullable)content success:(void (^ _Nonnull)(GetSocialInvite * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Create an invite url to be shared any custom way.
/// \param content Content to use.
///
/// \param success Called with created invite.
///
/// \param failure Called if operation failed.
///
+ (void)createInviteURLWithContent:(GetSocialInviteContent * _Nullable)content success:(void (^ _Nonnull)(NSString * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Register an invite channel plugin for the specified channel id.
/// <ul>
///   <li>
///     @result YES if the operation was successful, otherwise NO.
///   </li>
/// </ul>
/// \param plugin Plugin to register.
///
/// \param forChannel Channel id. Check <code>InviteChannelIds</code> for possible values.
///
+ (BOOL)registerPlugin:(id <GetSocialInviteChannelPluginProtocol> _Nonnull)plugin forChannel:(NSString * _Nonnull)forChannel;
/// Set listener to be invoked when referral data is received.
/// \param listener Listener to be invoked.
///
+ (void)setOnReferralDataReceivedListener:(void (^ _Nonnull)(GetSocialReferralData * _Nonnull))listener;
/// Get list of users who are referred by current user, filtered by the query parameter.
/// \param query Query to filter referred users.
///
/// \param success Called with list of referred users.
///
/// \param failure Called if operation failed.
///
+ (void)referredUsersWithQuery:(GetSocialReferralUsersPagingQuery * _Nonnull)query success:(void (^ _Nonnull)(GetSocialReferralUsersPagingResult * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get list of users who are referrers of current user, filtered by the query parameter.
/// \param query Query to filter referred users.
///
/// \param success Called with list of referrer users.
///
/// \param failure Called if operation failed.
///
+ (void)referrerUsersWithQuery:(GetSocialReferralUsersPagingQuery * _Nonnull)query success:(void (^ _Nonnull)(GetSocialReferralUsersPagingResult * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Set referrer details of current user.
/// \param id Id of referrer user.
///
/// \param event Referrer event.
///
/// \param customData Custom key-value pairs.
///
/// \param success Called if referrer was set.
///
/// \param failure Called if operation failed.
///
+ (void)setReferrerWithId:(GetSocialUserId * _Nonnull)id event:(NSString * _Nonnull)event customData:(NSDictionary<NSString *, NSString *> * _Nullable)customData success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12GetSocialSDK34InvokePendingInviteCallbackUseCase")
@interface InvokePendingInviteCallbackUseCase : UseCase
- (void)invoke;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe updating group members query.
SWIFT_CLASS_NAMED("JoinGroupQuery")
@interface GetSocialJoinGroupQuery : NSObject
/// Create a query to join to a group.
/// \param groupId Group Id.
///
- (nonnull instancetype)initWithGroupId:(NSString * _Nonnull)groupId OBJC_DESIGNATED_INITIALIZER;
/// Set invitation token. Use this method if user was invited to join a group.
/// \param invitationToken Invitation token.
///
///
/// returns:
///
/// Updated <code>JoinGroupQuery</code> instance.
- (GetSocialJoinGroupQuery * _Nonnull)withInvitationToken:(NSString * _Nonnull)invitationToken SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("LanguageCodes")
@interface GetSocialLanguageCodes : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull bengali;)
+ (NSString * _Nonnull)bengali SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull bhojpuri;)
+ (NSString * _Nonnull)bhojpuri SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull chinese_simplified;)
+ (NSString * _Nonnull)chinese_simplified SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull chinese_traditional;)
+ (NSString * _Nonnull)chinese_traditional SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull danish;)
+ (NSString * _Nonnull)danish SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull dutch;)
+ (NSString * _Nonnull)dutch SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull english;)
+ (NSString * _Nonnull)english SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull french;)
+ (NSString * _Nonnull)french SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull german;)
+ (NSString * _Nonnull)german SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull gujarati;)
+ (NSString * _Nonnull)gujarati SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull hindi;)
+ (NSString * _Nonnull)hindi SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull icelandic;)
+ (NSString * _Nonnull)icelandic SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull indonesian;)
+ (NSString * _Nonnull)indonesian SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull italian;)
+ (NSString * _Nonnull)italian SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull japanese;)
+ (NSString * _Nonnull)japanese SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kannada;)
+ (NSString * _Nonnull)kannada SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull korean;)
+ (NSString * _Nonnull)korean SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull latin_american_spanish;)
+ (NSString * _Nonnull)latin_american_spanish SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull malay;)
+ (NSString * _Nonnull)malay SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull malayalam;)
+ (NSString * _Nonnull)malayalam SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull marathi;)
+ (NSString * _Nonnull)marathi SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull norwegian;)
+ (NSString * _Nonnull)norwegian SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull polish;)
+ (NSString * _Nonnull)polish SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull portuguese;)
+ (NSString * _Nonnull)portuguese SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull portuguese_brazillian;)
+ (NSString * _Nonnull)portuguese_brazillian SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull punjabi;)
+ (NSString * _Nonnull)punjabi SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull russian;)
+ (NSString * _Nonnull)russian SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull spanish;)
+ (NSString * _Nonnull)spanish SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swedish;)
+ (NSString * _Nonnull)swedish SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull tagalog;)
+ (NSString * _Nonnull)tagalog SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull tamil;)
+ (NSString * _Nonnull)tamil SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull telugu;)
+ (NSString * _Nonnull)telugu SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull thai;)
+ (NSString * _Nonnull)thai SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull turkish;)
+ (NSString * _Nonnull)turkish SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ukrainian;)
+ (NSString * _Nonnull)ukrainian SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull vietnamese;)
+ (NSString * _Nonnull)vietnamese SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull defaultLanguage;)
+ (NSString * _Nonnull)defaultLanguage SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary<NSString *, NSString *> * _Nonnull)all SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Landing page customization keys.
SWIFT_CLASS_NAMED("LinkParams")
@interface GetSocialLinkParams : NSObject
/// Custom title to be shown on landing page.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull customTitle;)
+ (NSString * _Nonnull)customTitle SWIFT_WARN_UNUSED_RESULT;
/// Custom description to be shown on landing page.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull customDescription;)
+ (NSString * _Nonnull)customDescription SWIFT_WARN_UNUSED_RESULT;
/// Custom image to be shown on landing page.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull customImage;)
+ (NSString * _Nonnull)customImage SWIFT_WARN_UNUSED_RESULT;
/// Custom video to be shown on landing page.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull customYouTubeVideo;)
+ (NSString * _Nonnull)customYouTubeVideo SWIFT_WARN_UNUSED_RESULT;
/// Promo code to replace placeholder in invite text or subject.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull customPromoCode;)
+ (NSString * _Nonnull)customPromoCode SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe media attachment.
SWIFT_CLASS_NAMED("MediaAttachment")
@interface GetSocialMediaAttachment : NSObject
/// Video url.
@property (nonatomic, readonly, copy) NSString * _Nullable videoUrl;
/// Image url.
@property (nonatomic, readonly, copy) NSString * _Nullable imageUrl;
/// Create an attachment with image url.
/// \param imageUrl Url of the image.
///
///
/// returns:
///
/// New <code>MediaAttachment</code> instance.
+ (GetSocialMediaAttachment * _Nonnull)withImageUrl:(NSString * _Nonnull)imageUrl SWIFT_WARN_UNUSED_RESULT;
/// Create an attachment with image.
/// \param image Image instance.
///
///
/// returns:
///
/// New <code>MediaAttachment</code> instance.
+ (GetSocialMediaAttachment * _Nonnull)withImage:(UIImage * _Nonnull)image SWIFT_WARN_UNUSED_RESULT;
/// Create an attachment with video url.
/// \param videoUrl Url of the video.
///
///
/// returns:
///
/// New <code>MediaAttachment</code> instance.
+ (GetSocialMediaAttachment * _Nonnull)withVideoUrl:(NSString * _Nonnull)videoUrl SWIFT_WARN_UNUSED_RESULT;
/// Create an attachment with video.
/// \param video Video content.
///
///
/// returns:
///
/// New <code>MediaAttachment</code> instance.
+ (GetSocialMediaAttachment * _Nonnull)withVideo:(NSData * _Nonnull)video SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end






SWIFT_PROTOCOL_NAMED("MediaUploader")
@protocol GetSocialMediaUploader
- (NSString * _Nullable)uploadMedia:(NSData * _Nonnull)media to:(NSURL * _Nonnull)url withMetadata:(NSDictionary<NSString *, NSString *> * _Nonnull)metadata SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, GetSocialMemberStatus, "MemberStatus", open) {
/// User is not approved yet
  GetSocialMemberStatusApprovalPending = 0,
/// User has not accepted the invitation yet
  GetSocialMemberStatusInvitationPending = 1,
/// Member
  GetSocialMemberStatusMember = 2,
};

@class GetSocialMembersQuery;

/// Describe members paging query.
SWIFT_CLASS_NAMED("MembersPagingQuery")
@interface GetSocialMembersPagingQuery : GetSocialPagingQuery
/// Constructor.
/// \param query <code>MembersQuery</code> instance.
///
///
/// returns:
///
/// New <code>MembersPagingQuery</code> instance.
- (nonnull instancetype)initWithQuery:(GetSocialMembersQuery * _Nonnull)query OBJC_DESIGNATED_INITIALIZER;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Describe query to get members of a group.
SWIFT_CLASS_NAMED("MembersQuery")
@interface GetSocialMembersQuery : NSObject
/// Create a query to get members of a group.
/// \param id Group Id.
///
///
/// returns:
///
/// New <code>MembersQuery</code> instance.
+ (GetSocialMembersQuery * _Nonnull)ofGroupWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Filters members by role.
/// \param role Role.
///
///
/// returns:
///
/// Query instance.
- (GetSocialMembersQuery * _Nonnull)withRole:(enum GetSocialMemberRole)role SWIFT_WARN_UNUSED_RESULT;
/// Filters members by status.
/// \param status Status.
///
///
/// returns:
///
/// Query instance.
- (GetSocialMembersQuery * _Nonnull)withStatus:(enum GetSocialMemberStatus)status SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12GetSocialSDK10Membership")
@interface Membership : NSObject
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum GetSocialMentionType : NSInteger;

/// Describe a mention.
SWIFT_CLASS_NAMED("Mention")
@interface GetSocialMention : NSObject
/// Id of user who is mentioned.
@property (nonatomic, copy) NSString * _Nullable userId;
/// Start index of mention.
@property (nonatomic) NSInteger startIndex;
/// End index of mention.
@property (nonatomic) NSInteger endIndex;
/// Type of mention.
@property (nonatomic) enum GetSocialMentionType type;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Mention types.
typedef SWIFT_ENUM_NAMED(NSInteger, GetSocialMentionType, "MentionType", open) {
/// App.
  GetSocialMentionTypeApp = 0,
/// User.
  GetSocialMentionTypeUser = 1,
};


/// Describe notification badge object.
SWIFT_CLASS_NAMED("NotificationBadge")
@interface GetSocialNotificationBadge : NSObject
/// Create a notification badge object, which will increase the badge number with the specified value.
/// \param by Increase value.
///
///
/// returns:
///
/// New <code>NotificationBadge</code> instance.
+ (GetSocialNotificationBadge * _Nonnull)increaseBy:(int32_t)by SWIFT_WARN_UNUSED_RESULT;
/// Create a notification badge object, which will set the badge number with the specified value.
/// \param to Value to set badge number to.
///
///
/// returns:
///
/// New <code>NotificationBadge</code> instance.
+ (GetSocialNotificationBadge * _Nonnull)setTo:(int32_t)to SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Define action button object.
SWIFT_CLASS_NAMED("NotificationButton")
@interface GetSocialNotificationButton : NSObject
/// Constant for <code>consume</code> action id.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull actionIdConsume;)
+ (NSString * _Nonnull)actionIdConsume SWIFT_WARN_UNUSED_RESULT;
/// Constant for <code>ignore</code> action id.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull actionIdIgnore;)
+ (NSString * _Nonnull)actionIdIgnore SWIFT_WARN_UNUSED_RESULT;
/// Action id.
@property (nonatomic, readonly, copy) NSString * _Nonnull actionId;
/// Notification button title.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// Create a notification button instance with the provided parameters.
/// \param title Notification button title.
///
/// \param actionId Action id
///
///
/// returns:
///
/// New <code>NotificationButton</code> instance.
+ (GetSocialNotificationButton * _Nonnull)createWithTitle:(NSString * _Nonnull)title actionId:(NSString * _Nonnull)actionId SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Describe notification content.
SWIFT_CLASS_NAMED("NotificationContent")
@interface GetSocialNotificationContent : NSObject
/// Notification text.
@property (nonatomic, copy) NSString * _Nullable text;
/// Notification title.
@property (nonatomic, copy) NSString * _Nullable title;
/// Action buttons.
@property (nonatomic, copy) NSArray<GetSocialNotificationButton *> * _Nonnull actionButtons;
/// Notification action.
@property (nonatomic, strong) GetSocialAction * _Nullable action;
/// Template name.
@property (nonatomic, copy) NSString * _Nullable templateName;
/// Template placeholders.
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull templatePlaceholders;
/// Media attachment.
@property (nonatomic, strong) GetSocialMediaAttachment * _Nullable mediaAttachment;
/// Notification customization.
@property (nonatomic, strong) GetSocialNotificationCustomization * _Nullable customization;
/// Badge update.
@property (nonatomic, strong) GetSocialNotificationBadge * _Nullable badge;
/// Create a notification content with text.
/// \param text Notification text.
///
///
/// returns:
///
/// New <code>NotificationContent</code> instance.
+ (GetSocialNotificationContent * _Nonnull)withText:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
/// Create a notification content with a template.
/// \param name Notification template name.
///
///
/// returns:
///
/// New <code>NotificationContent</code> instance.
+ (GetSocialNotificationContent * _Nonnull)withTemplateName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Append an action button.
/// \param actionButton Action button.
///
- (void)appendActionButton:(GetSocialNotificationButton * _Nonnull)actionButton;
/// Set template placeholders.
/// \param value Template placeholder value.
///
/// \param forKey Template placeholder key.
///
- (void)setTemplatePlaceholderValue:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)forKey;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// Describe placeholders for notification content.
SWIFT_CLASS_NAMED("NotificationContentPlaceholders")
@interface GetSocialNotificationContentPlaceholders : NSObject
/// Placeholder to show sender’s display name in notification.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull senderDisplayName;)
+ (NSString * _Nonnull)senderDisplayName SWIFT_WARN_UNUSED_RESULT;
/// Placeholder to shows receiver’s display name in notification.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull receiverDisplayName;)
+ (NSString * _Nonnull)receiverDisplayName SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe notification context.
SWIFT_CLASS_NAMED("NotificationContext")
@interface GetSocialNotificationContext : NSObject
/// Notification action.
@property (nonatomic, copy) NSString * _Nullable action;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe notification customization object.
SWIFT_CLASS_NAMED("NotificationCustomization")
@interface GetSocialNotificationCustomization : NSObject
/// Background image.
@property (nonatomic, copy) NSString * _Nullable backgroundImageConfiguration;
/// Title text color.
@property (nonatomic, copy) NSString * _Nullable titleColor;
/// Text color.
@property (nonatomic, copy) NSString * _Nullable textColor;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// Describe placeholders for notification receivers.
SWIFT_CLASS_NAMED("NotificationReceiverPlaceholders")
@interface GetSocialNotificationReceiverPlaceholders : NSObject
/// Placeholder to send notification to all friends.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull friends;)
+ (NSString * _Nonnull)friends SWIFT_WARN_UNUSED_RESULT;
/// Placeholder to send notification to referred users.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull referredUsers;)
+ (NSString * _Nonnull)referredUsers SWIFT_WARN_UNUSED_RESULT;
/// Placeholder to send notification to referrer.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull referrer;)
+ (NSString * _Nonnull)referrer SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12GetSocialSDK26NotificationRepresentation")
@interface NotificationRepresentation : NSObject
@property (nonatomic) BOOL isSilent;
+ (NotificationRepresentation * _Nullable)fromInfo:(NSDictionary<NSString *, id> * _Nullable)info SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe notification statuses.
SWIFT_CLASS_NAMED("NotificationStatus")
@interface GetSocialNotificationStatus : NSObject
/// Notification is read.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull read;)
+ (NSString * _Nonnull)read SWIFT_WARN_UNUSED_RESULT;
/// Notification is unread.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull unread;)
+ (NSString * _Nonnull)unread SWIFT_WARN_UNUSED_RESULT;
/// Notification is consumed.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull consumed;)
+ (NSString * _Nonnull)consumed SWIFT_WARN_UNUSED_RESULT;
/// Notification is ignored.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ignored;)
+ (NSString * _Nonnull)ignored SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Notification types.
SWIFT_CLASS_NAMED("NotificationType")
@interface GetSocialNotificationType : NSObject
/// Someone commented on your activity.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull comment;)
+ (NSString * _Nonnull)comment SWIFT_WARN_UNUSED_RESULT;
/// Someone liked your activity.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull likeActivity;)
+ (NSString * _Nonnull)likeActivity SWIFT_WARN_UNUSED_RESULT;
/// Someone liked your comment.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull likeComment;)
+ (NSString * _Nonnull)likeComment SWIFT_WARN_UNUSED_RESULT;
/// Someone commented on the activity where you’ve commented before.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull relatedComment;)
+ (NSString * _Nonnull)relatedComment SWIFT_WARN_UNUSED_RESULT;
/// You became friends with another user.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull newFriendship;)
+ (NSString * _Nonnull)newFriendship SWIFT_WARN_UNUSED_RESULT;
/// Someone accepted your invite.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull inviteAccepted;)
+ (NSString * _Nonnull)inviteAccepted SWIFT_WARN_UNUSED_RESULT;
/// Someone mentioned you in comment.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull mentionInComment;)
+ (NSString * _Nonnull)mentionInComment SWIFT_WARN_UNUSED_RESULT;
/// Someone mentioned you in activity.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull mentionInActivity;)
+ (NSString * _Nonnull)mentionInActivity SWIFT_WARN_UNUSED_RESULT;
/// Someone replied to your comment.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull replyToComment;)
+ (NSString * _Nonnull)replyToComment SWIFT_WARN_UNUSED_RESULT;
/// Smart targeting Push Notifications.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull targeting;)
+ (NSString * _Nonnull)targeting SWIFT_WARN_UNUSED_RESULT;
/// Notifications sent from the Dashboard when using “Test Push Notifications”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull direct;)
+ (NSString * _Nonnull)direct SWIFT_WARN_UNUSED_RESULT;
/// Notification sent from SDK.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdk;)
+ (NSString * _Nonnull)sdk SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class GetSocialNotificationsPagingQuery;
@class GetSocialNotificationsPagingResult;
@class GetSocialNotificationsQuery;
@class GetSocialSendNotificationTarget;

/// Interface for managing notifications.
SWIFT_CLASS_NAMED("Notifications")
@interface GetSocialNotifications : NSObject
/// Get the list of notifications of current user.
/// \param query Query to filter notifications.
///
/// \param success Called with list of notifications.
///
/// \param failure Called if operation failed.
///
+ (void)getWithQuery:(GetSocialNotificationsPagingQuery * _Nonnull)query success:(void (^ _Nonnull)(GetSocialNotificationsPagingResult * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get the number of notifications of current user based on the provided query.
/// \param query Query to filter notifications.
///
/// \param success Called with the number of notifications.
///
/// \param failure Called if operation failed.
///
+ (void)countWithQuery:(GetSocialNotificationsQuery * _Nonnull)query success:(void (^ _Nonnull)(NSInteger))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Set notifications status.
/// \param newStatus New status.
///
/// \param notificationIds List of notifications ids.
///
/// \param success Called if operation finished.
///
/// \param failure Called if operation failed.
///
+ (void)setStatusTo:(NSString * _Nonnull)newStatus notificationIds:(NSArray<NSString *> * _Nonnull)notificationIds success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Enable or disable receiving Push Notifications.
/// If set to <code>false</code> current user won’t receive GetSocial Push Notifications anymore, until same method called with <code>true</code>.
/// \param enabled Enable or disable Push Notifications.
///
/// \param success Called if operation succeeded.
///
/// \param failure Called if operation failed.
///
+ (void)setPushNotificationsEnabled:(BOOL)enabled success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Check if Push Notifications are enabled for current user.
/// \param success Called with <code>true</code> if Push Notifications are enabled, otherwise <code>false</code>.
///
/// \param failure Called if operation failed.
///
+ (void)arePushNotificationsEnabledWithSuccess:(void (^ _Nonnull)(BOOL))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Send notification to any GetSocial user.
/// \param content Notification content to send.
///
/// \param target Notification recipients.
///
/// \param success Called with the number of successfully delivered notifications.
///
/// \param failure Called if operation failed.
///
+ (void)sendNotificationContent:(GetSocialNotificationContent * _Nonnull)content target:(GetSocialSendNotificationTarget * _Nonnull)target success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Register device for Push Notifications.
+ (void)registerDevice;
/// Set listener to be invoked when a Push Notification was clicked.
/// \param listener Handler to be invoked.
///
+ (void)setOnNotificationClickedListener:(void (^ _Nonnull)(GetSocialNotification * _Nonnull, GetSocialNotificationContext * _Nonnull))listener;
/// Set listener to be invoked when a Push Notification was received.
/// \param listener Listener to be invoked.
///
+ (void)setOnNotificationReceivedListener:(void (^ _Nonnull)(GetSocialNotification * _Nonnull))listener;
/// Set listener to be invoked when device was registered for Push Notifications.
/// \param listener Listener to be invoked.
///
+ (void)setOnTokenReceivedListener:(void (^ _Nonnull)(NSString * _Nonnull))listener;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe activities paging query.
SWIFT_CLASS_NAMED("NotificationsPagingQuery")
@interface GetSocialNotificationsPagingQuery : GetSocialPagingQuery
@property (nonatomic, readonly, strong) GetSocialNotificationsQuery * _Nonnull query;
/// Constructor.
/// \param query <code>NotificationsQuery</code> instance.
///
///
/// returns:
///
/// New <code>NotificationsQuery</code> instance.
- (nonnull instancetype)initWithQuery:(GetSocialNotificationsQuery * _Nonnull)query OBJC_DESIGNATED_INITIALIZER;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Result of getting notifications method.
SWIFT_CLASS_NAMED("NotificationsPagingResult")
@interface GetSocialNotificationsPagingResult : GetSocialPagingResult
/// List of notifications.
@property (nonatomic, readonly, copy) NSArray<GetSocialNotification *> * _Nonnull notifications;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Describe a query to get notifications.
SWIFT_CLASS_NAMED("NotificationsQuery")
@interface GetSocialNotificationsQuery : NSObject
/// Notification types.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull types;
/// Notification statuses.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull statuses;
/// Notification actions.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull actions;
/// Create query to get notifications with specified statuses.
/// - parameters:
/// - statuses:     List of statuses.
/// - returns:
/// New <code>NotificationsQuery</code> instance.
+ (GetSocialNotificationsQuery * _Nonnull)withStatuses:(NSArray<NSString *> * _Nonnull)statuses SWIFT_WARN_UNUSED_RESULT;
/// Create query to get notifications with any statuses.
/// - returns:
/// New <code>NotificationsQuery</code> instance.
+ (GetSocialNotificationsQuery * _Nonnull)withAllStatuses SWIFT_WARN_UNUSED_RESULT;
/// Append type to query.
/// \param type Type to append.
///
///
/// returns:
///
/// Modified <code>NotificationsQuery</code> instance.
- (GetSocialNotificationsQuery * _Nonnull)appendType:(NSString * _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
/// Append status to query.
/// \param status Type to append.
///
///
/// returns:
///
/// Modified <code>NotificationsQuery</code> instance.
- (GetSocialNotificationsQuery * _Nonnull)appendStatus:(NSString * _Nonnull)status SWIFT_WARN_UNUSED_RESULT;
/// Append action to query.
/// \param action Type to append.
///
///
/// returns:
///
/// Modified <code>NotificationsQuery</code> instance.
- (GetSocialNotificationsQuery * _Nonnull)appendAction:(NSString * _Nonnull)action SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC12GetSocialSDK16OldInviteContent")
@interface OldInviteContent : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end










/// Describe post activity target.
SWIFT_CLASS_NAMED("PostActivityTarget")
@interface GetSocialPostActivityTarget : NSObject
/// Target is a specific topic.
/// - parameters:
/// - id:       Topic id.
/// - returns:
/// <code>PostActivityTarget</code> instance.
+ (GetSocialPostActivityTarget * _Nonnull)topicWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Target is current user’s timeline.
/// - returns:
/// <code>PostActivityTarget</code> instance.
+ (GetSocialPostActivityTarget * _Nonnull)timeline SWIFT_WARN_UNUSED_RESULT;
/// Target is a specific group.
/// - parameters:
/// - id:       Group id.
/// - returns:
/// <code>PostActivityTarget</code> instance.
+ (GetSocialPostActivityTarget * _Nonnull)groupWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Target is a specific activity.
/// - parameters:
/// - activityId:       Activity id.
/// - returns:
/// <code>PostActivityTarget</code> instance.
+ (GetSocialPostActivityTarget * _Nonnull)commentTo:(NSString * _Nonnull)activityId SWIFT_WARN_UNUSED_RESULT;
/// Target type.
/// - returns:
/// <code>CommunityEntityType</code> instance.
- (enum GetSocialCommunitiesEntityType)type SWIFT_WARN_UNUSED_RESULT;
/// Target id.
/// - returns:
/// Id of target.
- (NSString * _Nonnull)targetId SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Private class.
SWIFT_CLASS_NAMED("PrivateActivityBuilder")
@interface GetSocialPrivateActivityBuilder : NSObject
/// Private method.
+ (void)likeActivity:(GetSocialActivity * _Nonnull)activity isLiked:(BOOL)isLiked;
/// Private method.
+ (GetSocialActivity * _Nonnull)commentActivity:(GetSocialActivity * _Nonnull)activity SWIFT_WARN_UNUSED_RESULT;
+ (GetSocialActivity * _Nonnull)removeCommentFromActivity:(GetSocialActivity * _Nonnull)activity SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Private class.
SWIFT_CLASS_NAMED("PrivateGroupBuilder")
@interface GetSocialPrivateGroupBuilder : NSObject
/// Private method.
+ (void)updateGroup:(GetSocialGroup * _Nonnull)group isFollowed:(BOOL)isFollowed;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12GetSocialSDK31PrivateInternetConnectedUseCase")
@interface PrivateInternetConnectedUseCase : UseCase
- (BOOL)isInternetConnected SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12GetSocialSDK22PrivateMetaDataUseCase")
@interface PrivateMetaDataUseCase : UseCase
+ (BOOL)shouldAutoInitSdk SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)uiConfigurationFile SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)disablePushNotifications SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Private class.
SWIFT_CLASS_NAMED("PrivateNotificationBuilder")
@interface GetSocialPrivateNotificationBuilder : NSObject
/// Private method.
+ (GetSocialNotification * _Nonnull)updateNotification:(GetSocialNotification * _Nonnull)notification newStatus:(NSString * _Nonnull)newStatus SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12GetSocialSDK33PrivateSessionStateHandlerUseCase")
@interface PrivateSessionStateHandlerUseCase : UseCase
- (BOOL)isInitialized SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isInitializing SWIFT_WARN_UNUSED_RESULT;
- (void)addOnInitializeListener:(void (^ _Nonnull)(void))listener;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12GetSocialSDK33PrivateSetUIActionListenerUseCase")
@interface PrivateSetUIActionListenerUseCase : UseCase
+ (void)setUIActionListener:(BOOL (^ _Nonnull)(GetSocialAction * _Nonnull))listener;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12GetSocialSDK41PrivateStartPendingHandlersInvokerUseCase")
@interface PrivateStartPendingHandlersInvokerUseCase : UseCase
- (void)private_execute;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Private class.
SWIFT_CLASS_NAMED("PrivateTopicBuilder")
@interface GetSocialPrivateTopicBuilder : NSObject
/// Private method.
+ (void)updateTopic:(GetSocialTopic * _Nonnull)topic isFollowed:(BOOL)isFollowed;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSError;

SWIFT_CLASS("_TtC12GetSocialSDK33PrivateTrackAnalyticsEventUseCase")
@interface PrivateTrackAnalyticsEventUseCase : UseCase
- (void)private_trackUIEvent:(NSString * _Nonnull)eventName properties:(NSDictionary<NSString *, NSString *> * _Nullable)properties;
- (void)private_trackUIError:(NSError * _Nonnull)error;
- (void)private_trackAppDidBecomeInactive;
- (void)private_trackAppSessionEvent;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end






/// Define purchase types.
typedef SWIFT_ENUM_NAMED(NSInteger, GetSocialProductType, "ProductType", open) {
/// Consumable or non-consumable item.
  GetSocialProductTypeItem = 0,
/// Subscription.
  GetSocialProductTypeSubscription = 1,
};


/// Describe promo code object.
SWIFT_CLASS_NAMED("PromoCode")
@interface GetSocialPromoCode : NSObject
/// Promo code.
@property (nonatomic, readonly, copy) NSString * _Nonnull code;
/// Attached data.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull properties;
/// Number of maximum claims.
@property (nonatomic, readonly) NSInteger maxClaimCount;
/// Start date.
@property (nonatomic, readonly) int64_t startDate;
/// End date.
@property (nonatomic, readonly) int64_t endDate;
/// Creator.
@property (nonatomic, readonly, strong) GetSocialUser * _Nonnull creator;
/// Number of claims.
@property (nonatomic, readonly) NSInteger claimCount;
/// Enabled or not.
@property (nonatomic, readonly) BOOL isEnabled;
/// Claimable or not.
@property (nonatomic, readonly) BOOL isClaimable;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe promo code content.
SWIFT_CLASS_NAMED("PromoCodeContent")
@interface GetSocialPromoCodeContent : NSObject
/// Promo code.
@property (nonatomic, copy) NSString * _Nullable code;
/// Attached data.
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull properties;
/// Start date.
@property (nonatomic, copy) NSDate * _Nullable startDate;
/// End date.
@property (nonatomic, copy) NSDate * _Nullable endDate;
/// Number of maximum claims.
@property (nonatomic) NSInteger maxClaims;
/// Create a promo code with random code.
///
/// returns:
///
/// New <code>PromoCodeContent</code> instance.
+ (GetSocialPromoCodeContent * _Nonnull)withRandomCode SWIFT_WARN_UNUSED_RESULT;
/// Create a promo code with the specified code.
/// \param code Promo code.
///
///
/// returns:
///
/// New <code>PromoCodeContent</code> instance.
+ (GetSocialPromoCodeContent * _Nonnull)withCode:(NSString * _Nonnull)code SWIFT_WARN_UNUSED_RESULT;
/// Set time limit of promo code.
/// \param startDate Start date.
///
/// \param endDate End date.
///
- (void)setTimeLimitWithStartDate:(NSDate * _Nullable)startDate endDate:(NSDate * _Nullable)endDate;
/// Set promo code data.
/// \param value Value to set.
///
/// \param forKey Key for the value.
///
- (void)setPropertyValue:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)forKey;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Interface for Promo Codes.
SWIFT_CLASS_NAMED("PromoCodes")
@interface GetSocialPromoCodes : NSObject
/// Create a promo code.
/// \param content Promo code content.
///
/// \param success Called with created <code>PromoCode</code> instance.
///
/// \param failure Called if operation failed.
///
+ (void)createWithContent:(GetSocialPromoCodeContent * _Nonnull)content success:(void (^ _Nonnull)(GetSocialPromoCode * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Retrieve a <code>PromoCode</code> instance by code.
/// \param code Promo code.
///
/// \param success Called with retrieved <code>PromoCode</code> instance.
///
/// \param failure Called if operation failed, or <code>PromoCode</code> does not exists with provided <code>code</code>.
///
+ (void)getWithCode:(NSString * _Nonnull)code success:(void (^ _Nonnull)(GetSocialPromoCode * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Claim a promo code.
/// \param code Promo code to claim.
///
/// \param success Called with claimed <code>PromoCode</code> instance.
///
/// \param failure Called if operation failed, or <code>PromoCode</code> does not exists, expired or already claimed.
///
+ (void)claimWithCode:(NSString * _Nonnull)code success:(void (^ _Nonnull)(GetSocialPromoCode * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Define purchase data.
SWIFT_CLASS_NAMED("PurchaseData")
@interface GetSocialPurchaseData : NSObject
/// Product Id.
@property (nonatomic, copy) NSString * _Nonnull productId;
/// Product Type.
@property (nonatomic) enum GetSocialProductType productType;
/// Product title.
@property (nonatomic, copy) NSString * _Nonnull productTitle;
/// Product price.
@property (nonatomic) float price;
/// Price currency.
@property (nonatomic, copy) NSString * _Nullable priceCurrency;
/// Date of purchase.
@property (nonatomic, copy) NSDate * _Nullable purchaseDate;
/// Transaction identifier.
@property (nonatomic, copy) NSString * _Nonnull transactionIdentifier;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC12GetSocialSDK34PushNotificationInteractionUseCase")
@interface PushNotificationInteractionUseCase : UseCase
- (void)trackReceivedNotificationWithNotification:(NotificationRepresentation * _Nonnull)notification;
- (void)trackNotificationClickWithNotification:(NotificationRepresentation * _Nonnull)notification;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Define reaction.
SWIFT_CLASS_NAMED("Reactions")
@interface GetSocialReactions : NSObject
/// Like.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull like;)
+ (NSString * _Nonnull)like SWIFT_WARN_UNUSED_RESULT;
/// Love.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull love;)
+ (NSString * _Nonnull)love SWIFT_WARN_UNUSED_RESULT;
/// Haha.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull haha;)
+ (NSString * _Nonnull)haha SWIFT_WARN_UNUSED_RESULT;
/// Wow.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull wow;)
+ (NSString * _Nonnull)wow SWIFT_WARN_UNUSED_RESULT;
/// Sad.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sad;)
+ (NSString * _Nonnull)sad SWIFT_WARN_UNUSED_RESULT;
/// Angry.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull angry;)
+ (NSString * _Nonnull)angry SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class GetSocialReactionsQuery;

/// Reactions paging query.
SWIFT_CLASS_NAMED("ReactionsPagingQuery")
@interface GetSocialReactionsPagingQuery : GetSocialPagingQuery
@property (nonatomic, readonly, strong) GetSocialReactionsQuery * _Nonnull query;
/// Constructor.
/// \param query <code>ReactionsQuery</code> instance.
///
///
/// returns:
///
/// New <code>ReactionsPagingQuery</code> instance.
- (nonnull instancetype)initWithQuery:(GetSocialReactionsQuery * _Nonnull)query OBJC_DESIGNATED_INITIALIZER;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Result of getting reactions method.
SWIFT_CLASS_NAMED("ReactionsPagingResult")
@interface GetSocialReactionsPagingResult : GetSocialPagingResult
/// List of reactions.
@property (nonatomic, readonly, copy) NSArray<GetSocialUserReactions *> * _Nonnull reactions;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Describe a query to get reaction.
SWIFT_CLASS_NAMED("ReactionsQuery")
@interface GetSocialReactionsQuery : NSObject
/// Reaction to filter. If not set, all reactions will be returned.
@property (nonatomic, copy) NSString * _Nullable reaction;
/// Create query to get reactions for an activity.
/// \param id Activity id.
///
///
/// returns:
///
/// New <code>ReactionsQuery</code> instance.
+ (GetSocialReactionsQuery * _Nonnull)forActivityWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end






/// Define referral data.
SWIFT_CLASS_NAMED("ReferralData")
@interface GetSocialReferralData : NSObject
/// Invite token.
@property (nonatomic, readonly, copy) NSString * _Nonnull token;
/// Referrer user id.
@property (nonatomic, readonly, copy) NSString * _Nullable referrerUserId;
/// Referrer channel id.
@property (nonatomic, readonly, copy) NSString * _Nonnull referrerChannelId;
/// Indicate if first match.
@property (nonatomic, readonly) BOOL isFirstMatch;
/// Indicate if guaranteed match.
@property (nonatomic, readonly) BOOL isGuaranteedMatch;
/// Indicate if reinstall.
@property (nonatomic, readonly) BOOL isReinstall;
/// Indicate if first match is link.
@property (nonatomic, readonly) BOOL isFirstMatchLink;
/// Link parameters.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull linkParams;
/// Original link parameters.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull originalLinkParams;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end






SWIFT_CLASS("_TtC12GetSocialSDK19ReferralDataUseCase")
@interface ReferralDataUseCase : UseCase
- (void)clear;
- (void)onPause;
- (BOOL)onResumeWithSourceApplication:(NSString * _Nullable)sourceApplication referrer:(NSURL * _Nullable)referrer SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe referral user.
SWIFT_CLASS_NAMED("ReferralUser")
@interface GetSocialReferralUser : GetSocialUser
/// Event date.
@property (nonatomic, readonly) NSUInteger eventDate;
/// Event.
@property (nonatomic, readonly, copy) NSString * _Nullable event;
/// Event data.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull eventData;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class GetSocialReferralUsersQuery;

/// Describe referral users paging query.
SWIFT_CLASS_NAMED("ReferralUsersPagingQuery")
@interface GetSocialReferralUsersPagingQuery : GetSocialPagingQuery
/// Constructor.
/// \param query <code>ReferralUsersQuery</code> instance.
///
///
/// returns:
///
/// New <code>ReferralUsersQuery</code> instance.
- (nonnull instancetype)initWithQuery:(GetSocialReferralUsersQuery * _Nonnull)query OBJC_DESIGNATED_INITIALIZER;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Result of getting referral users method.
SWIFT_CLASS_NAMED("ReferralUsersPagingResult")
@interface GetSocialReferralUsersPagingResult : GetSocialPagingResult
/// List of users.
@property (nonatomic, readonly, copy) NSArray<GetSocialReferralUser *> * _Nonnull users;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end




/// Describe query to get referral users.
SWIFT_CLASS_NAMED("ReferralUsersQuery")
@interface GetSocialReferralUsersQuery : GetSocialPagingQuery
/// Create query to get referral users.
///
/// returns:
///
/// New <code>ReferralUsersQuery</code> instance.
+ (GetSocialReferralUsersQuery * _Nonnull)allUsers SWIFT_WARN_UNUSED_RESULT;
/// Create query to get referral users for the specified event.
/// \param event Event name.
///
///
/// returns:
///
/// New <code>ReferralUsersQuery</code> instance.
+ (GetSocialReferralUsersQuery * _Nonnull)usersForEvent:(NSString * _Nonnull)event SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC12GetSocialSDK27RegisterOnPushServerUseCase")
@interface RegisterOnPushServerUseCase : UseCase
- (void)executeWithToken:(NSString * _Nonnull)token sandbox:(BOOL)sandbox;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe remove activities query.
SWIFT_CLASS_NAMED("RemoveActivitiesQuery")
@interface GetSocialRemoveActivitiesQuery : NSObject
/// Create query to remove activities.
/// \param ids List of activity ids to remove.
///
///
/// returns:
///
/// New <code>RemoveActivitiesQuery</code> instance.
+ (GetSocialRemoveActivitiesQuery * _Nonnull)activitiesWithIds:(NSArray<NSString *> * _Nonnull)ids SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12GetSocialSDK23RemoveGroupMembersQuery")
@interface RemoveGroupMembersQuery : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Describe reporting reason.
typedef SWIFT_ENUM_NAMED(NSInteger, GetSocialReportingReason, "ReportingReason", open) {
/// Spam.
  GetSocialReportingReasonSpam = 0,
/// Inappropriate content.
  GetSocialReportingReasonInappropriateContent = 1,
};

typedef SWIFT_ENUM_NAMED(NSInteger, GetSocialMemberRole, "Role", open) {
/// Owner
  GetSocialMemberRoleOwner = 0,
/// Admin
  GetSocialMemberRoleAdmin = 1,
/// Member
  GetSocialMemberRoleMember = 3,
/// Followers, used only in Topics permissions
  GetSocialMemberRoleFollower = 4,
/// Everyone, used only in Topics permissions
  GetSocialMemberRoleEveryone = 5,
};


/// Describe notification target.
SWIFT_CLASS_NAMED("SendNotificationTarget")
@interface GetSocialSendNotificationTarget : NSObject
/// Create target with user ids.
/// \param ids User ids.
///
///
/// returns:
///
/// New <code>SendNotificationTarget</code> instance.
+ (GetSocialSendNotificationTarget * _Nonnull)usersWithIds:(GetSocialUserIdList * _Nonnull)ids SWIFT_WARN_UNUSED_RESULT;
/// Add placeholder to define receivers.
/// \param placeholder Receiver placeholder, as defined <code>NotificationReceiversPlaceholders</code>.
///
///
/// returns:
///
/// New <code>SendNotificationTarget</code> instance.
- (GetSocialSendNotificationTarget * _Nonnull)addReceiverPlaceholder:(NSString * _Nonnull)placeholder SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC12GetSocialSDK43SetNotificationsStatusUpdateListenerUseCase")
@interface SetNotificationsStatusUpdateListenerUseCase : UseCase
+ (void)setNotificationsStatusUpdateListener:(void (^ _Nullable)(NSArray<NSString *> * _Nonnull, NSString * _Nonnull))listener;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe a suggested friend.
SWIFT_CLASS_NAMED("SuggestedFriend")
@interface GetSocialSuggestedFriend : GetSocialUser
/// Number of mutual friends with current user.
@property (nonatomic, readonly) NSInteger mutualFriendsCount;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe suggested friends paging query.
SWIFT_CLASS_NAMED("SuggestedFriendsPagingQuery")
@interface GetSocialSuggestedFriendsPagingQuery : GetSocialPagingQuery
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// Result of getting suggested friends method.
SWIFT_CLASS_NAMED("SuggestedFriendsPagingResult")
@interface GetSocialSuggestedFriendsPagingResult : GetSocialPagingResult
/// List of suggested friends.
@property (nonatomic, readonly, copy) NSArray<GetSocialSuggestedFriend *> * _Nonnull suggestedFriends;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC12GetSocialSDK20SwiftComponentHelper")
@interface SwiftComponentHelper : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull mediaUploader;)
+ (NSString * _Nonnull)mediaUploader SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull reachability;)
+ (NSString * _Nonnull)reachability SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull atomicIntegerProvider;)
+ (NSString * _Nonnull)atomicIntegerProvider SWIFT_WARN_UNUSED_RESULT;
+ (void)reset;
+ (void)registerComponentsWithObjcComponents:(NSDictionary<NSString *, id> * _Nonnull)objcComponents;
+ (void)registerTestComponents;
+ (void)setPushRegistrator:(void (^ _Nonnull)(void))block;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe query to get tags.
SWIFT_CLASS_NAMED("TagsQuery")
@interface GetSocialTagsQuery : NSObject
@property (nonatomic, strong) GetSocialPostActivityTarget * _Nullable inTarget;
/// Create query to find tags.
/// \param searchTerm Search term.
///
///
/// returns:
///
/// New <code>TagsQuery</code> instance.
+ (GetSocialTagsQuery * _Nonnull)find:(NSString * _Nonnull)searchTerm SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Describe topic object.
SWIFT_CLASS_NAMED("Topic")
@interface GetSocialTopic : NSObject
/// Topic identifier
@property (nonatomic, readonly, copy) NSString * _Nonnull topicId;
/// Topic localized title
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// Topic localized description
@property (nonatomic, readonly, copy) NSString * _Nullable topicDescription;
/// Avatar Url
@property (nonatomic, readonly, copy) NSString * _Nullable avatarUrl;
/// Creation date
@property (nonatomic, readonly) int64_t createdAt;
/// Last update
@property (nonatomic, readonly) int64_t updatedAt;
/// Setting
@property (nonatomic, readonly, strong) GetSocialCommunitiesSettings * _Nonnull settings;
/// Number of followers
@property (nonatomic, readonly) NSInteger followersCount;
/// Current user is follower or not
@property (nonatomic, readonly) BOOL isFollowedByMe;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe topics paging query.
SWIFT_CLASS_NAMED("TopicsPagingQuery")
@interface GetSocialTopicsPagingQuery : GetSocialPagingQuery
@property (nonatomic, readonly, strong) GetSocialTopicsQuery * _Nonnull query;
/// Constructor.
/// \param query <code>TopicsQuery</code> instance.
///
///
/// returns:
///
/// New <code>TopicsPagingQuery</code> instance.
- (nonnull instancetype)initWithQuery:(GetSocialTopicsQuery * _Nonnull)query OBJC_DESIGNATED_INITIALIZER;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Result of getting topics method.
SWIFT_CLASS_NAMED("TopicsPagingResult")
@interface GetSocialTopicsPagingResult : GetSocialPagingResult
/// List of topics.
@property (nonatomic, readonly, copy) NSArray<GetSocialTopic *> * _Nonnull topics;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Describe query to get topics.
SWIFT_CLASS_NAMED("TopicsQuery")
@interface GetSocialTopicsQuery : NSObject
/// Create a query to find a topic.
/// \param searchTerm Search term.
///
///
/// returns:
///
/// New <code>TopicsQuery</code> instance.
+ (GetSocialTopicsQuery * _Nonnull)find:(NSString * _Nonnull)searchTerm SWIFT_WARN_UNUSED_RESULT;
/// Create a query to get topics.
///
/// returns:
///
/// New <code>TopicsQuery</code> instance.
+ (GetSocialTopicsQuery * _Nonnull)all SWIFT_WARN_UNUSED_RESULT;
/// Filters topics followed by a specific user.
/// \param id User id.
///
- (GetSocialTopicsQuery * _Nonnull)followedByUserWithId:(GetSocialUserId * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end








/// Describe updating group members query.
SWIFT_CLASS_NAMED("UpdateGroupMembersQuery")
@interface GetSocialUpdateGroupMembersQuery : NSObject
/// Create a query to update group members.
/// \param id Group Id.
///
/// \param userIds User ids.
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id userIds:(GetSocialUserIdList * _Nonnull)userIds OBJC_DESIGNATED_INITIALIZER;
/// New status of users.
/// \param status New member status.
///
///
/// returns:
///
/// <ul>
///   <li>
///     <code>UpdateGroupMembersQuery</code> instance.
///   </li>
/// </ul>
- (GetSocialUpdateGroupMembersQuery * _Nonnull)withMemberStatus:(enum GetSocialMemberStatus)status SWIFT_WARN_UNUSED_RESULT;
/// New role of users.
/// \param role New member role.
///
///
/// returns:
///
/// <ul>
///   <li>
///     <code>UpdateGroupMembersQuery</code> instance.
///   </li>
/// </ul>
- (GetSocialUpdateGroupMembersQuery * _Nonnull)withRole:(enum GetSocialMemberRole)role SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end












/// Describe an external user id.
SWIFT_CLASS_NAMED("UserId")
@interface GetSocialUserId : NSObject
- (nonnull instancetype)init:(NSString * _Nonnull)userId providerId:(NSString * _Nullable)providerId OBJC_DESIGNATED_INITIALIZER;
/// Create a UserId instance with an external user id.
/// - parameters:
/// - id:       Id of user.
/// - returns:
/// New <code>UserId</code> instance.
+ (GetSocialUserId * _Nonnull)create:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Create a UserId instance with an external user id and provider id.
/// - parameters:
/// - provider:   Provider id.
/// - id:           Id of user.
/// - returns:
/// New <code>UserId</code> instance.
+ (GetSocialUserId * _Nonnull)createWithProvider:(NSString * _Nonnull)provider id:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Create a UserId instance with current user.
/// New <code>UserId</code> instance.
+ (GetSocialUserId * _Nonnull)currentUser SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Describe list of external user ids.
SWIFT_CLASS_NAMED("UserIdList")
@interface GetSocialUserIdList : NSObject
/// Create a UserId instance with a list of external user ids.
/// - parameters:
/// - ids:          Ids of users.
/// - returns:
/// New <code>UserId</code> instance.
+ (GetSocialUserIdList * _Nonnull)create:(NSArray<NSString *> * _Nonnull)ids SWIFT_WARN_UNUSED_RESULT;
/// Create a UserId instance with a list of external user ids and provider id.
/// - parameters:
/// - provider:   Provider id.
/// - id:           Ids of users.
/// - returns:
/// New <code>UserId</code> instance.
+ (GetSocialUserIdList * _Nonnull)createWithProvider:(NSString * _Nonnull)provider ids:(NSArray<NSString *> * _Nonnull)ids SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Describe a reaction created by a user.
SWIFT_CLASS_NAMED("UserReactions")
@interface GetSocialUserReactions : NSObject
/// User, who created the reaction.
@property (nonatomic, readonly, strong) GetSocialUser * _Nonnull user;
/// List of reactions.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull reactions;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Describe a lightweight user object.
SWIFT_CLASS_NAMED("UserReference")
@interface GetSocialUserReference : NSObject
/// User id.
@property (nonatomic, readonly, copy) NSString * _Nullable userId;
/// Display name.
@property (nonatomic, readonly, copy) NSString * _Nonnull displayName;
/// Avatar url.
@property (nonatomic, readonly, copy) NSString * _Nullable avatarUrl;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Describe user update object.
SWIFT_CLASS_NAMED("UserUpdate")
@interface GetSocialUserUpdate : NSObject
/// New display name.
@property (nonatomic, copy) NSString * _Nullable displayName;
/// New avatar Url.
@property (nonatomic, copy) NSString * _Nullable avatarUrl;
/// New avatar image.
@property (nonatomic, strong) UIImage * _Nullable avatar;
/// Public properties to modify
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull publicProperties;
/// Private properties to modify
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull privateProperties;
/// Remove public property.
- (void)removePublicPropertyWithKey:(NSString * _Nonnull)forKey;
/// Set public property.
/// \param value Value to set.
///
/// \param forKey Key for the value.
///
- (void)setPublicPropertyValue:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)forKey;
/// Set private property.
/// \param value Value to set.
///
/// \param forKey Key for the value.
///
- (void)setPrivatePropertyValue:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)forKey;
/// Remove private property.
- (void)removePrivatePropertyWithKey:(NSString * _Nonnull)forKey;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end






/// Describe users paging query.
SWIFT_CLASS_NAMED("UsersPagingQuery")
@interface GetSocialUsersPagingQuery : GetSocialPagingQuery
@property (nonatomic, readonly, strong) GetSocialUsersQuery * _Nonnull query;
/// Constructor.
/// \param query <code>UsersQuery</code> instance.
///
///
/// returns:
///
/// New <code>UsersPagingQuery</code> instance.
- (nonnull instancetype)initWithQuery:(GetSocialUsersQuery * _Nonnull)query OBJC_DESIGNATED_INITIALIZER;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Result of getting users method.
SWIFT_CLASS_NAMED("UsersPagingResult")
@interface GetSocialUsersPagingResult : GetSocialPagingResult
/// List of users.
@property (nonatomic, readonly, copy) NSArray<GetSocialUser *> * _Nonnull users;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Describe a query to get users.
SWIFT_CLASS_NAMED("UsersQuery")
@interface GetSocialUsersQuery : NSObject
/// Create a query to find users.
/// \param searchTerm Search term.
///
///
/// returns:
///
/// New <code>UsersQuery</code> instance.
+ (GetSocialUsersQuery * _Nonnull)find:(NSString * _Nonnull)searchTerm SWIFT_WARN_UNUSED_RESULT;
/// Create a query to find users who are followed by the specified user.
/// \param id UserId.
///
///
/// returns:
///
/// New <code>UsersQuery</code> instance.
+ (GetSocialUsersQuery * _Nonnull)followedBy:(GetSocialUserId * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.1 (swiftlang-1100.0.270.13 clang-1100.0.33.7)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import UserNotifications;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="GetSocialSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// Describe action object.
SWIFT_CLASS_NAMED("Action")
@interface GetSocialAction : NSObject
/// Action type.
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
/// Action data.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull data;
/// Create an action with the specified type.
/// \param type Action type.
///
/// \param data Attached data.
///
///
/// returns:
///
/// New <code>Action</code> instance.
+ (GetSocialAction * _Nonnull)actionWithType:(NSString * _Nonnull)type data:(NSDictionary<NSString *, NSString *> * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Define keys for action data.
SWIFT_CLASS_NAMED("ActionDataKey")
@interface GetSocialActionDataKey : NSObject
/// ActivityId are mutually exclusive.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull openActivity_ActivityId;)
+ (NSString * _Nonnull)openActivity_ActivityId SWIFT_WARN_UNUSED_RESULT;
/// Optional. Can be present with ActivityId only.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull openActivity_CommentId;)
+ (NSString * _Nonnull)openActivity_CommentId SWIFT_WARN_UNUSED_RESULT;
/// TopicId identifies the source of activity.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull openActivity_TopicId;)
+ (NSString * _Nonnull)openActivity_TopicId SWIFT_WARN_UNUSED_RESULT;
/// UserId identifies the source of activity.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull openActivity_UserId;)
+ (NSString * _Nonnull)openActivity_UserId SWIFT_WARN_UNUSED_RESULT;
/// GroupId are mutually exclusive.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull openActivity_GroupId;)
+ (NSString * _Nonnull)openActivity_GroupId SWIFT_WARN_UNUSED_RESULT;
/// ID of user to be opened.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull openProfile_UserId;)
+ (NSString * _Nonnull)openProfile_UserId SWIFT_WARN_UNUSED_RESULT;
/// ID of user who wants to add as friend.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull addFriend_UserId;)
+ (NSString * _Nonnull)addFriend_UserId SWIFT_WARN_UNUSED_RESULT;
/// URL to be opened.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull openUrl_Url;)
+ (NSString * _Nonnull)openUrl_Url SWIFT_WARN_UNUSED_RESULT;
/// Promo Code to claim.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull claimPromoCode_PromoCode;)
+ (NSString * _Nonnull)claimPromoCode_PromoCode SWIFT_WARN_UNUSED_RESULT;
/// GroupId.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull addGroupMember_GroupId;)
+ (NSString * _Nonnull)addGroupMember_GroupId SWIFT_WARN_UNUSED_RESULT;
/// User Id.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull addGroupMember_UserId;)
+ (NSString * _Nonnull)addGroupMember_UserId SWIFT_WARN_UNUSED_RESULT;
/// Invitation token.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull addGroupMember_InvitationToken;)
+ (NSString * _Nonnull)addGroupMember_InvitationToken SWIFT_WARN_UNUSED_RESULT;
/// Role.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull addGroupMember_Role;)
+ (NSString * _Nonnull)addGroupMember_Role SWIFT_WARN_UNUSED_RESULT;
/// Status.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull addGroupMember_Status;)
+ (NSString * _Nonnull)addGroupMember_Status SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Define action types.
SWIFT_CLASS_NAMED("ActionType")
@interface GetSocialActionType : NSObject
/// Open user’s profile action.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull openProfile;)
+ (NSString * _Nonnull)openProfile SWIFT_WARN_UNUSED_RESULT;
/// Open an activity action.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull openActivity;)
+ (NSString * _Nonnull)openActivity SWIFT_WARN_UNUSED_RESULT;
/// Open invites UI action.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull openInvites;)
+ (NSString * _Nonnull)openInvites SWIFT_WARN_UNUSED_RESULT;
/// Open an url action.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull openUrl;)
+ (NSString * _Nonnull)openUrl SWIFT_WARN_UNUSED_RESULT;
/// Add a friend action.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull addFriend;)
+ (NSString * _Nonnull)addFriend SWIFT_WARN_UNUSED_RESULT;
/// Claim Promo Code action.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull claimPromoCode;)
+ (NSString * _Nonnull)claimPromoCode SWIFT_WARN_UNUSED_RESULT;
/// Add group member.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull addGroupMember;)
+ (NSString * _Nonnull)addGroupMember SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe generic paging query.
SWIFT_CLASS_NAMED("PagingQuery")
@interface GetSocialPagingQuery : NSObject
/// Default limit.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger defaultLimit;)
+ (NSInteger)defaultLimit SWIFT_WARN_UNUSED_RESULT;
/// Next cursor to load next result page.
/// Set it to <code>nil</code> or empty string to get first result page.
@property (nonatomic, copy) NSString * _Nullable nextCursor;
/// Limit.
@property (nonatomic) NSInteger limit;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class GetSocialActivitiesQuery;

/// Describe activities paging query.
SWIFT_CLASS_NAMED("ActivitiesPagingQuery")
@interface GetSocialActivitiesPagingQuery : GetSocialPagingQuery
@property (nonatomic, readonly, strong) GetSocialActivitiesQuery * _Nonnull query;
/// Constructor.
/// \param query <code>ActivitiesQuery</code> instance.
///
///
/// returns:
///
/// New <code>ActivitiesPagingQuery</code> instance.
- (nonnull instancetype)initWithQuery:(GetSocialActivitiesQuery * _Nonnull)query OBJC_DESIGNATED_INITIALIZER;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Generic paging result object.
SWIFT_CLASS_NAMED("PagingResult")
@interface GetSocialPagingResult : NSObject
/// Define next cursor to load next page.
/// If value is empty there is no more page to load.
@property (nonatomic, readonly, copy) NSString * _Nonnull nextCursor;
/// Define if there is a next page to load.
@property (nonatomic, readonly) BOOL isLastPage;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class GetSocialActivity;

/// Result of getting activities method.
SWIFT_CLASS_NAMED("ActivitiesPagingResult")
@interface GetSocialActivitiesPagingResult : GetSocialPagingResult
/// List of activities.
@property (nonatomic, readonly, copy) NSArray<GetSocialActivity *> * _Nonnull activities;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class GetSocialUserId;
@class GetSocialPostActivityTarget;
@class GetSocialAnnouncementsQuery;

/// Describe query to get activities.
SWIFT_CLASS_NAMED("ActivitiesQuery")
@interface GetSocialActivitiesQuery : NSObject
@property (nonatomic, readonly, strong) GetSocialUserId * _Nullable byUser;
@property (nonatomic, readonly, copy) NSString * _Nullable tag;
/// Create a query to get activities for a specific user.
/// \param id User id.
///
///
/// returns:
///
/// New <code>ActivitiesQuery</code> instance.
+ (GetSocialActivitiesQuery * _Nonnull)feedOfUserWithId:(GetSocialUserId * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Create a query to get activities in a specific topic.
/// \param id Topic id.
///
///
/// returns:
///
/// New <code>ActivitiesQuery</code> instance.
+ (GetSocialActivitiesQuery * _Nonnull)inTopicWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Create a query to get activities in a specific group.
/// \param id Group id.
///
///
/// returns:
///
/// New <code>ActivitiesQuery</code> instance.
+ (GetSocialActivitiesQuery * _Nonnull)inGroupWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Create a query to get activities from all topics.
///
/// returns:
///
/// New <code>ActivitiesQuery</code> instance.
+ (GetSocialActivitiesQuery * _Nonnull)inAllTopics SWIFT_WARN_UNUSED_RESULT;
/// Create a query to get activities in current user timeline.
///
/// returns:
///
/// New <code>ActivitiesQuery</code> instance.
+ (GetSocialActivitiesQuery * _Nonnull)timeline SWIFT_WARN_UNUSED_RESULT;
/// Create a query to get all activities from every target.
///
/// returns:
///
/// New <code>ActivitiesQuery</code> instance.
+ (GetSocialActivitiesQuery * _Nonnull)everywhere SWIFT_WARN_UNUSED_RESULT;
/// Filter activities by author.
///
/// returns:
///
/// New <code>ActivitiesQuery</code> instance.
- (GetSocialActivitiesQuery * _Nonnull)byUserWithId:(GetSocialUserId * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Filter activities by a tag.
///
/// returns:
///
/// New <code>ActivitiesQuery</code> instance.
- (GetSocialActivitiesQuery * _Nonnull)withTag:(NSString * _Nonnull)tag SWIFT_WARN_UNUSED_RESULT;
/// Converts query to post target.
/// - returns:
/// <code>PostActivityTarget</code> instance.
- (GetSocialPostActivityTarget * _Nullable)asPostTarget SWIFT_WARN_UNUSED_RESULT;
/// Converts query to announcements query.
/// - returns:
/// <code>AnnouncementsQuery</code> instance.
- (GetSocialAnnouncementsQuery * _Nullable)asAnnouncementsQuery SWIFT_WARN_UNUSED_RESULT;
/// Query to get comments for by a specific user.
/// \param id Activity id.
///
///
/// returns:
///
/// New <code>ActivitiesQuery</code> instance.
+ (GetSocialActivitiesQuery * _Nonnull)commentsToActivityWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class GetSocialUser;
@class GetSocialMediaAttachment;
@class GetSocialActivityButton;
@class GetSocialUserReactions;
@class GetSocialMention;
@class GetSocialCommunitiesEntity;

/// Describe an activity instance.
SWIFT_CLASS_NAMED("Activity")
@interface GetSocialActivity : NSObject
/// Activity id.
@property (nonatomic, readonly, copy) NSString * _Nonnull activityId;
/// Text content.
@property (nonatomic, readonly, copy) NSString * _Nullable text;
/// Author.
@property (nonatomic, readonly, strong) GetSocialUser * _Nonnull author;
/// Media attachments.
@property (nonatomic, readonly, copy) NSArray<GetSocialMediaAttachment *> * _Nonnull mediaAttachments;
/// Activity button.
@property (nonatomic, readonly, strong) GetSocialActivityButton * _Nullable button;
/// Activity type.
@property (nonatomic, readonly, copy) NSString * _Nullable type;
/// Activity is announcement or not.
@property (nonatomic, readonly) BOOL isAnnouncement;
/// Number of comments.
@property (nonatomic, readonly) NSInteger commentsCount;
/// Number of reactions by type.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSNumber *> * _Nonnull reactionsCount;
/// Current user’s reactions.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull myReactions;
/// Reactions.
@property (nonatomic, readonly, copy) NSArray<GetSocialUserReactions *> * _Nonnull reactions;
/// Commenters.
@property (nonatomic, readonly, copy) NSArray<GetSocialUser *> * _Nonnull commenters;
/// Custom properties.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull properties;
/// Date of creation as UNIX timestamp in UTC.
@property (nonatomic, readonly) int64_t createdAt;
/// Mentions.
@property (nonatomic, readonly, copy) NSArray<GetSocialMention *> * _Nonnull mentions;
/// Number of views.
@property (nonatomic, readonly) NSInteger viewCount;
/// Parent of activity.
@property (nonatomic, readonly, strong) GetSocialCommunitiesEntity * _Nullable source;
/// Status of activity. For possible values check {ActivityStatus} class.
@property (nonatomic, readonly, copy) NSString * _Nonnull status;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe activity button.
SWIFT_CLASS_NAMED("ActivityButton")
@interface GetSocialActivityButton : NSObject
/// Button title.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// Action to be executed when button is pressed.
@property (nonatomic, readonly, strong) GetSocialAction * _Nonnull action;
/// Create new <code>ActionButton</code> instance.
/// - parameters:
/// - title:    Button title.
/// - action:   Action to be executed when button is pressed.
/// - returns:
/// New <code>ActivityButton</code> instance.
+ (GetSocialActivityButton * _Nonnull)createWithTitle:(NSString * _Nonnull)title action:(GetSocialAction * _Nonnull)action SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Describe Activity content.
SWIFT_CLASS_NAMED("ActivityContent")
@interface GetSocialActivityContent : NSObject
/// Text content.
@property (nonatomic, copy) NSString * _Nullable text;
/// Attachments, like image and video.
@property (nonatomic, copy) NSArray<GetSocialMediaAttachment *> * _Nonnull attachments;
/// Activity button.
@property (nonatomic, strong) GetSocialActivityButton * _Nullable button;
/// Custom properties.
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull properties;
/// Set property.
/// \param value Value to set.
///
/// \param forKey Key for the value.
///
- (void)setPropertyValue:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)forKey;
/// Append media attachment.
/// \param attachment Media attachment.
///
- (void)appendMediaAttachment:(GetSocialMediaAttachment * _Nonnull)attachment;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC12GetSocialSDK14ActivityStatus")
@interface ActivityStatus : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class GetSocialUserIdList;
enum GetSocialMemberRole : NSInteger;
enum GetSocialMemberStatus : NSInteger;

/// Describe updating group members query.
SWIFT_CLASS_NAMED("AddGroupMembersQuery")
@interface GetSocialAddGroupMembersQuery : NSObject
/// Create a query to add new members to a group. By default users added with role <code>.member</code> and status <code>.member</code>.
/// \param id Group Id.
///
/// \param userIds User ids to add.
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id userIds:(GetSocialUserIdList * _Nonnull)userIds OBJC_DESIGNATED_INITIALIZER;
/// Sets role to new users.
/// \param role User role.
///
///
/// returns:
///
/// Updated <code>AddGroupMembersQuery</code> instance.
- (GetSocialAddGroupMembersQuery * _Nonnull)withRole:(enum GetSocialMemberRole)role SWIFT_WARN_UNUSED_RESULT;
/// Sets status to new users.
/// \param status User status.
///
///
/// returns:
///
/// Updated <code>AddGroupMembersQuery</code> instance.
- (GetSocialAddGroupMembersQuery * _Nonnull)withMemberStatus:(enum GetSocialMemberStatus)status SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class GetSocialPurchaseData;

/// Defines interface for Analytics.
SWIFT_CLASS_NAMED("Analytics")
@interface GetSocialAnalytics : NSObject
/// Report in-app purchase.
/// \param data Purchase details.
///
///
/// returns:
///
/// <code>true</code>, if operation was successful, otherwise <code>false</code>.
+ (BOOL)trackPurchase:(GetSocialPurchaseData * _Nonnull)data;
/// Report custom event.
/// \param event Event name.
///
/// \param properties Event properties.
///
///
/// returns:
///
/// <code>true</code>, if operation was successful, otherwise <code>false</code>.
+ (BOOL)trackCustomEvent:(NSString * _Nonnull)event properties:(NSDictionary<NSString *, NSString *> * _Nullable)properties;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12GetSocialSDK19AnalyticsEventNames")
@interface AnalyticsEventNames : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull appSessionStart;)
+ (NSString * _Nonnull)appSessionStart SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull appSessionEnd;)
+ (NSString * _Nonnull)appSessionEnd SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull uiContentSession;)
+ (NSString * _Nonnull)uiContentSession SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull uiError;)
+ (NSString * _Nonnull)uiError SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkError;)
+ (NSString * _Nonnull)sdkError SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkLog;)
+ (NSString * _Nonnull)sdkLog SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull inviteSent;)
+ (NSString * _Nonnull)inviteSent SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull inviteCanceled;)
+ (NSString * _Nonnull)inviteCanceled SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull inviteFailed;)
+ (NSString * _Nonnull)inviteFailed SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull uiInviteClicked;)
+ (NSString * _Nonnull)uiInviteClicked SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull installReferrerReceivedAfterInit;)
+ (NSString * _Nonnull)installReferrerReceivedAfterInit SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull uiUserActivityActionClick;)
+ (NSString * _Nonnull)uiUserActivityActionClick SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull uiUserActivityPlayVideoClick;)
+ (NSString * _Nonnull)uiUserActivityPlayVideoClick SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull pushNotificationReceived;)
+ (NSString * _Nonnull)pushNotificationReceived SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull pushNotificationClicked;)
+ (NSString * _Nonnull)pushNotificationClicked SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull inappPurchase;)
+ (NSString * _Nonnull)inappPurchase SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull uiNotificationsClick;)
+ (NSString * _Nonnull)uiNotificationsClick SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12GetSocialSDK24AnalyticsEventProperties")
@interface AnalyticsEventProperties : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull action;)
+ (NSString * _Nonnull)action SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull activitiesSource;)
+ (NSString * _Nonnull)activitiesSource SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull activityLikersSource;)
+ (NSString * _Nonnull)activityLikersSource SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull activityId;)
+ (NSString * _Nonnull)activityId SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull commentLikersSource;)
+ (NSString * _Nonnull)commentLikersSource SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull commentsSource;)
+ (NSString * _Nonnull)commentsSource SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull content;)
+ (NSString * _Nonnull)content SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull duration;)
+ (NSString * _Nonnull)duration SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorKey;)
+ (NSString * _Nonnull)errorKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorMessage;)
+ (NSString * _Nonnull)errorMessage SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorSeverity;)
+ (NSString * _Nonnull)errorSeverity SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorSource;)
+ (NSString * _Nonnull)errorSource SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull invitesSource;)
+ (NSString * _Nonnull)invitesSource SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull isOnline;)
+ (NSString * _Nonnull)isOnline SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull notificationActionButtonId;)
+ (NSString * _Nonnull)notificationActionButtonId SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull notificationActionType;)
+ (NSString * _Nonnull)notificationActionType SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull notificationId;)
+ (NSString * _Nonnull)notificationId SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull notificationsClickActionButton;)
+ (NSString * _Nonnull)notificationsClickActionButton SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull notificationsClickListItem;)
+ (NSString * _Nonnull)notificationsClickListItem SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull notificationsClickMarkAsReadButton;)
+ (NSString * _Nonnull)notificationsClickMarkAsReadButton SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull notificationsClickMarkAllAsReadButton;)
+ (NSString * _Nonnull)notificationsClickMarkAllAsReadButton SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull notificationsClickRemoveButton;)
+ (NSString * _Nonnull)notificationsClickRemoveButton SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull notificationsClickRemoveAllButton;)
+ (NSString * _Nonnull)notificationsClickRemoveAllButton SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull notificationsClickSource;)
+ (NSString * _Nonnull)notificationsClickSource SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull notificationsSource;)
+ (NSString * _Nonnull)notificationsSource SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull price;)
+ (NSString * _Nonnull)price SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull priceCurrency;)
+ (NSString * _Nonnull)priceCurrency SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull provider;)
+ (NSString * _Nonnull)provider SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull productId;)
+ (NSString * _Nonnull)productId SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull productTitle;)
+ (NSString * _Nonnull)productTitle SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull productType;)
+ (NSString * _Nonnull)productType SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull purchaseDataAuto;)
+ (NSString * _Nonnull)purchaseDataAuto SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull purchaseDataManual;)
+ (NSString * _Nonnull)purchaseDataManual SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull purchaseDate;)
+ (NSString * _Nonnull)purchaseDate SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull purchaseId;)
+ (NSString * _Nonnull)purchaseId SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull purchaseState;)
+ (NSString * _Nonnull)purchaseState SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull source;)
+ (NSString * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sourceValueUser;)
+ (NSString * _Nonnull)sourceValueUser SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull subProvider;)
+ (NSString * _Nonnull)subProvider SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull title;)
+ (NSString * _Nonnull)title SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull tokenKey;)
+ (NSString * _Nonnull)tokenKey SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Result of getting announcements method.
SWIFT_CLASS_NAMED("AnnouncementsPagingResult")
@interface GetSocialAnnouncementsPagingResult : GetSocialPagingResult
/// List of activities.
@property (nonatomic, readonly, copy) NSArray<GetSocialActivity *> * _Nonnull activities;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Describe query to get announcements.
SWIFT_CLASS_NAMED("AnnouncementsQuery")
@interface GetSocialAnnouncementsQuery : NSObject
/// Create a query to get announcements for a specific user.
/// \param id User id.
///
///
/// returns:
///
/// New <code>AnnouncementsQuery</code> instance.
+ (GetSocialAnnouncementsQuery * _Nonnull)forFeedOfUserWithId:(GetSocialUserId * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Create a query to get announcements in a topic.
/// \param id Topic id.
///
///
/// returns:
///
/// New <code>AnnouncementsQuery</code> instance.
+ (GetSocialAnnouncementsQuery * _Nonnull)inTopicWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Create a query to get announcements in user’s timeline.
///
/// returns:
///
/// New <code>AnnouncementsQuery</code> instance.
+ (GetSocialAnnouncementsQuery * _Nonnull)timeline SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_PROTOCOL("_TtP12GetSocialSDK21AtomicIntegerProvider_")
@protocol AtomicIntegerProvider
- (NSInteger)incrementAndGet SWIFT_WARN_UNUSED_RESULT;
@end


/// Describe ban info object.
SWIFT_CLASS_NAMED("BanInfo")
@interface GetSocialBanInfo : NSObject
/// Ban reason.
@property (nonatomic, readonly, copy) NSString * _Nullable reason;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class GetSocialFriendsQuery;
@class GetSocialFriendsPagingQuery;
@class GetSocialFriendsPagingResult;
@class GetSocialSuggestedFriendsPagingQuery;
@class GetSocialSuggestedFriendsPagingResult;
@class GetSocialUsersPagingQuery;
@class GetSocialUsersPagingResult;
@class GetSocialUsersQuery;
@class GetSocialFollowQuery;
@class GetSocialFollowersPagingQuery;
@class GetSocialFollowersQuery;
@class GetSocialReactionsPagingQuery;
@class GetSocialReactionsPagingResult;
enum GetSocialReportingReason : NSInteger;
@class GetSocialRemoveActivitiesQuery;
@class GetSocialTagsQuery;
@class GetSocialTopic;
@class GetSocialTopicsPagingQuery;
@class GetSocialTopicsPagingResult;
@class GetSocialTopicsQuery;
@class GetSocialGroupContent;
@class GetSocialGroup;
@class GetSocialMembersPagingQuery;
@class GetSocialGroupMembersPagingResult;
@class GetSocialGroupsPagingQuery;
@class GetSocialGroupsPagingResult;
@class GetSocialGroupsQuery;
@class GetSocialGroupMember;
@class GetSocialJoinGroupQuery;
@class GetSocialUpdateGroupMembersQuery;
@class RemoveGroupMembersQuery;
@class Membership;

/// Interface for community related methods.
SWIFT_CLASS_NAMED("Communities")
@interface GetSocialCommunities : NSObject
/// Add a friend to current user, if operation succeeds, they both became friends.
/// If try to add a user who is already a friend, <code>success</code> callback will be called,
/// but user will be added to friends list only once and friends count won’t be increased.
/// \param ids List of user identifiers to add as friend.
///
/// \param success Called if friend ware added.
///
/// \param failure Callend called if operation failed.
///
+ (void)addFriendsWithIds:(GetSocialUserIdList * _Nonnull)ids success:(void (^ _Nonnull)(NSInteger))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Remove users from friends list.
/// If trying to remove a user who is not a friend, success callback will be called,
/// and user’s friends count won’t be decreased.
/// <ul>
///   <li>
///     parameters
///     <ul>
///       <li>
///         ids:          List of user identifiers to remove from friends list.
///       </li>
///       <li>
///         success:      Called if friends were removed.
///       </li>
///       <li>
///         failure:      Called if operation failed.
///       </li>
///     </ul>
///   </li>
/// </ul>
+ (void)removeFriendsWithIds:(GetSocialUserIdList * _Nonnull)ids success:(void (^ _Nonnull)(NSInteger))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Check if users are friend of current user.
/// \param ids List of user identifiers.
///
/// \param success Called with result if users are friends or not.
///
/// \param failure Called if operation failed.
///
+ (void)areFriendsWithIds:(GetSocialUserIdList * _Nonnull)ids success:(void (^ _Nonnull)(NSDictionary<NSString *, NSNumber *> * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Check if user is friend of current user.
/// \param id User identifier.
///
/// \param success Called with result if user is friend or not.
///
/// \param failure Called if operation failed.
///
+ (void)isFriendWithId:(GetSocialUserId * _Nonnull)id success:(void (^ _Nonnull)(BOOL))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Return number of friends of a user.
/// \param query Query parameters.
///
/// \param success Called with number of friends.
///
/// \param failure Called if operation failed.
///
+ (void)friendsCountWithQuery:(GetSocialFriendsQuery * _Nonnull)query success:(void (^ _Nonnull)(NSInteger))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get a list of friends of a user.
/// \param query Query parameters.
///
/// \param success Called with friends of the provided user.
///
/// \param failure Called if operation failed.
///
+ (void)friendsWithQuery:(GetSocialFriendsPagingQuery * _Nonnull)query success:(void (^ _Nonnull)(GetSocialFriendsPagingResult * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get a list of suggested friends of current user.
/// \param query Query parameter.
///
/// \param success Called with list of suggested friends.
///
/// \param failure Called if operation failed.
///
+ (void)suggestedFriendsWithQuery:(GetSocialSuggestedFriendsPagingQuery * _Nonnull)query success:(void (^ _Nonnull)(GetSocialSuggestedFriendsPagingResult * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Set the provided users as friends of current user.
/// important:
///
/// Existing friends will be removed!
/// \param ids List of user identifiers.
///
/// \param success Called if friends was successfully set.
///
/// \param failure Called if operation failed.
///
+ (void)setFriendsWithIds:(GetSocialUserIdList * _Nonnull)ids success:(void (^ _Nonnull)(NSInteger))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Find users.
/// \param query Search parameter.
///
/// \param success Called with list of users. The list is empty if no user found.
///
/// \param failure Called if operation failed.
///
+ (void)usersWithQuery:(GetSocialUsersPagingQuery * _Nonnull)query success:(void (^ _Nonnull)(GetSocialUsersPagingResult * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get multiple users by identifiers.
/// \param ids List of user identifiers.
///
/// \param success Called with map of users, where key is user id. The list is empty if no user found.
///
/// \param failure Called if operation failed.
///
+ (void)usersWithIds:(GetSocialUserIdList * _Nonnull)ids success:(void (^ _Nonnull)(NSDictionary<NSString *, GetSocialUser *> * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get single user by identifier.
/// \param id User identifier.
///
/// \param success Called with the user instance.
///
/// \param failure Called if operation failed.
///
+ (void)userWithId:(GetSocialUserId * _Nonnull)id success:(void (^ _Nonnull)(GetSocialUser * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Return number of user matching the provided query.
/// \param query Query parameter.
///
/// \param success Called with number of users.
///
/// \param failure Called if operation failed.
///
+ (void)usersCountWithQuery:(GetSocialUsersQuery * _Nonnull)query success:(void (^ _Nonnull)(NSInteger))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Follow a community entity, like topic or user.
/// \param query Query parameter.
///
/// \param success Called if operation succeeded with total numbers of followed entities.
///
/// \param failure Called if operation failed.
///
+ (void)followWithQuery:(GetSocialFollowQuery * _Nonnull)query success:(void (^ _Nonnull)(NSInteger))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Unfollow a community entity, like topic or user.
/// \param query Query parameter.
///
/// \param success Called if operation succeeded total numbers of followed entities.
///
/// \param failure Called if operation failed.
///
+ (void)unfollowWithQuery:(GetSocialFollowQuery * _Nonnull)query success:(void (^ _Nonnull)(NSInteger))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Check if a user follows a community entity, like topic or user.
/// \param id User id.
///
/// \param query Query parameter.
///
/// \param success Called with result map, where key is the community entity’s id.
///
/// \param failure Called if operation failed.
///
+ (void)isFollowingWithUserId:(GetSocialUserId * _Nonnull)id query:(GetSocialFollowQuery * _Nonnull)query success:(void (^ _Nonnull)(NSDictionary<NSString *, NSNumber *> * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get followers of a community entity, like topic or user.
/// \param query Query parameter.
///
/// \param success Called with followers.
///
/// \param failure Called if operation failed.
///
+ (void)followersWithQuery:(GetSocialFollowersPagingQuery * _Nonnull)query success:(void (^ _Nonnull)(GetSocialUsersPagingResult * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get number of followers of a community entity, like topic or user.
/// \param query Query parameter.
///
/// \param success Called with number of followers.
///
/// \param failure Called if operation failed.
///
+ (void)followersCountWithQuery:(GetSocialFollowersQuery * _Nonnull)query success:(void (^ _Nonnull)(NSInteger))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get announcements.
/// \param query Query parameter.
///
/// \param success Called with list of announcements.
///
/// \param failure Called if operation failed.
///
+ (void)announcementsWithQuery:(GetSocialAnnouncementsQuery * _Nonnull)query success:(void (^ _Nonnull)(NSArray<GetSocialActivity *> * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get activities.
/// \param query Query parameter.
///
/// \param success Called with list of activities.
///
/// \param failure Called if operation failed.
///
+ (void)activitiesWithQuery:(GetSocialActivitiesPagingQuery * _Nonnull)query success:(void (^ _Nonnull)(GetSocialActivitiesPagingResult * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get a single activity.
/// \param id Activity id.
///
/// \param success Called with activity instance.
///
/// \param failure Called if operation failed.
///
+ (void)activityWithId:(NSString * _Nonnull)id success:(void (^ _Nonnull)(GetSocialActivity * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Post activity content to the specified target.
/// \param content Content to post.
///
/// \param target Where to post the content.
///
/// \param success Called with activity instance if operation succeeded.
///
/// \param failure Called if operation failed.
///
+ (void)postActivityContent:(GetSocialActivityContent * _Nonnull)content target:(GetSocialPostActivityTarget * _Nonnull)target success:(void (^ _Nonnull)(GetSocialActivity * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Update existing activity with provided content.
/// \param id Activity id to update.
///
/// \param content New content.
///
/// \param success Called with updated activity instance if operation succeeded.
///
/// \param failure Called if operation failed.
///
+ (void)updateActivityWithId:(NSString * _Nonnull)id content:(GetSocialActivityContent * _Nonnull)content success:(void (^ _Nonnull)(GetSocialActivity * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Add reaction to an activity.
/// \param reaction Reaction to add.
///
/// \param activityId To add the reaction to.
///
/// \param success Called if operation succeeded.
///
/// \param failure Called if operation failed.
///
+ (void)addReaction:(NSString * _Nonnull)reaction toActivityWithId:(NSString * _Nonnull)activityId success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Remove a reaction from an activity.
/// \param reaction Reaction to remove.
///
/// \param activityId To remove the reaction from.
///
/// \param success Called if operation succeeded.
///
/// \param failure Called if operation failed.
///
+ (void)removeReaction:(NSString * _Nonnull)reaction fromActivityWithId:(NSString * _Nonnull)activityId success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get reactions.
/// \param query Query parameters.
///
/// \param success Called with reactions.
///
/// \param failure Called if operation failed.
///
+ (void)reactionsWithQuery:(GetSocialReactionsPagingQuery * _Nonnull)query success:(void (^ _Nonnull)(GetSocialReactionsPagingResult * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Report an activity.
/// \param id Activity id to report.
///
/// \param reason Reason of reporting.
///
/// \param explanation Explanation of reason.
///
/// \param success Called if operation succeededs.
///
/// \param failure Called if operation failed.
///
+ (void)reportActivityWithId:(NSString * _Nonnull)id reason:(enum GetSocialReportingReason)reason explanation:(NSString * _Nullable)explanation success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Remove activities.
/// \param query Query parameters.
///
/// \param success Called if operation succeeded.
///
/// \param failure Called if operation failed.
///
+ (void)removeActivitiesWithQuery:(GetSocialRemoveActivitiesQuery * _Nonnull)query success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Find tags.
/// \param query Query parameters.
///
/// \param success Called with list of tags.
///
/// \param failure Called if operation failed.
///
+ (void)tagsWithQuery:(GetSocialTagsQuery * _Nonnull)query success:(void (^ _Nonnull)(NSArray<NSString *> * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get a single topic.
/// \param id Topic id.
///
/// \param success Called with topic.
///
/// \param failure Called if operation failed.
///
+ (void)topicWithId:(NSString * _Nonnull)id success:(void (^ _Nonnull)(GetSocialTopic * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Find topics.
/// \param query Query parameter.
///
/// \param success Called with list of topics.
///
/// \param failure Called if operation failed.
///
+ (void)topicsWithQuery:(GetSocialTopicsPagingQuery * _Nonnull)query success:(void (^ _Nonnull)(GetSocialTopicsPagingResult * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get number of topics.
/// \param query Query parameter.
///
/// \param success Called with number of topics.
///
/// \param failure Called if operation failed.
///
+ (void)topicsCountWithQuery:(GetSocialTopicsQuery * _Nonnull)query success:(void (^ _Nonnull)(NSInteger))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Creates a new group.
/// \param content Group content.
///
/// \param success Called with created group.
///
/// \param failure Called if operation failed.
///
+ (void)createGroupWithContent:(GetSocialGroupContent * _Nonnull)content success:(void (^ _Nonnull)(GetSocialGroup * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Updates an existing group.
/// \param id Existing group id.
///
/// \param content New group content.
///
/// \param success Called with updated topic.
///
/// \param failure Called if operation failed.
///
+ (void)updateGroupWithId:(NSString * _Nonnull)id content:(GetSocialGroupContent * _Nonnull)content success:(void (^ _Nonnull)(GetSocialGroup * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Removes groups.
/// \param ids Group ids to delete.
///
/// \param success Called if groups are removed.
///
/// \param failure Called if operation failed.
///
+ (void)removeGroupsWithIds:(NSArray<NSString *> * _Nonnull)ids success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get members of the provided group.
/// \param query Query parameter.
///
/// \param success Called with group members .
///
/// \param failure Called if operation failed.
///
+ (void)membersOfGroupWithQuery:(GetSocialMembersPagingQuery * _Nonnull)query success:(void (^ _Nonnull)(GetSocialGroupMembersPagingResult * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get groups.
/// \param query Query parameter.
///
/// \param success Called with groups.
///
/// \param failure Called if operation failed.
///
+ (void)groupsWithQuery:(GetSocialGroupsPagingQuery * _Nonnull)query success:(void (^ _Nonnull)(GetSocialGroupsPagingResult * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get number of groups.
/// \param query Query parameter.
///
/// \param success Called with number of groups .
///
/// \param failure Called if operation failed.
///
+ (void)groupsCountWithQuery:(GetSocialGroupsQuery * _Nonnull)query success:(void (^ _Nonnull)(NSInteger))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get group by id.
/// \param id Group id.
///
/// \param success Called with group .
///
/// \param failure Called if operation failed.
///
+ (void)groupWithId:(NSString * _Nonnull)id success:(void (^ _Nonnull)(GetSocialGroup * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Adds user to a group.
/// \param query Query parameter.
///
/// \param success Called with new group member .
///
/// \param failure Called if operation failed.
///
+ (void)addGroupMembersWithQuery:(GetSocialAddGroupMembersQuery * _Nonnull)query success:(void (^ _Nonnull)(NSArray<GetSocialGroupMember *> * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Current user joins a group.
/// \param query Query parameter.
///
/// \param success Called with new group member.
///
/// \param failure Called if operation failed.
///
+ (void)joinGroupWithQuery:(GetSocialJoinGroupQuery * _Nonnull)query success:(void (^ _Nonnull)(GetSocialGroupMember * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Updates an existing group member.
/// \param query Query parameter.
///
/// \param success Called with updated group member.
///
/// \param failure Called if operation failed.
///
+ (void)updateGroupMembersWithQuery:(GetSocialUpdateGroupMembersQuery * _Nonnull)query success:(void (^ _Nonnull)(NSArray<GetSocialGroupMember *> * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Removes member from group.
/// \param query Query parameter.
///
/// \param success Called if member removed.
///
/// \param failure Called if operation failed.
///
+ (void)removeGroupMembersWithQuery:(RemoveGroupMembersQuery * _Nonnull)query success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Checks if users are member of group.
/// \param id Group id.
///
/// \param userIds User ids to check.
///
/// \param success Called if member statuses.
///
/// \param failure Called if operation failed.
///
+ (void)areGroupMembersOf:(NSString * _Nonnull)id userIds:(GetSocialUserIdList * _Nonnull)userIds success:(void (^ _Nonnull)(NSDictionary<NSString *, Membership *> * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// List of all possible actions.
typedef SWIFT_ENUM_NAMED(NSInteger, GetSocialCommunitiesAction, "CommunitiesAction", open) {
/// Post an activity.
  GetSocialCommunitiesActionPost = 0,
/// Interact, like a post.
  GetSocialCommunitiesActionReact = 1,
/// Post a comment.
  GetSocialCommunitiesActionComment = 2,
};

enum GetSocialCommunitiesEntityType : NSInteger;

/// Describe a community entity.
SWIFT_CLASS_NAMED("CommunitiesEntity")
@interface GetSocialCommunitiesEntity : NSObject
/// Entity id.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Entity type.
@property (nonatomic, readonly) enum GetSocialCommunitiesEntityType type;
/// Localized title.
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// Avatar url.
@property (nonatomic, readonly, copy) NSString * _Nullable avatarUrl;
/// Number of followers.
@property (nonatomic, readonly) NSInteger followersCount;
/// Current user is follower or not.
@property (nonatomic, readonly) BOOL isFollowedByMe;
/// Check if specified action is available or not.
/// - parameters:
/// - action:       The action to check.
/// - returns:
/// <code>true</code>, if action is available, otherwise <code>false</code>.
- (BOOL)isActionAllowedWithAction:(enum GetSocialCommunitiesAction)action SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Comminity Entity types.
typedef SWIFT_ENUM_NAMED(NSInteger, GetSocialCommunitiesEntityType, "CommunitiesEntityType", open) {
/// Unknown.
  GetSocialCommunitiesEntityTypeUnknown = 0,
/// App.
  GetSocialCommunitiesEntityTypeApp = 1,
/// Topic.
  GetSocialCommunitiesEntityTypeTopic = 2,
/// Group.
  GetSocialCommunitiesEntityTypeGroup = 3,
/// User.
  GetSocialCommunitiesEntityTypeUser = 4,
/// Activity.
  GetSocialCommunitiesEntityTypeActivity = 6,
};


/// Describe community settings.
SWIFT_CLASS_NAMED("CommunitiesSettings")
@interface GetSocialCommunitiesSettings : NSObject
/// Properties.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull properties;
/// Is discoverable.
@property (nonatomic, readonly) BOOL isDiscovarable;
/// Is private.
@property (nonatomic, readonly) BOOL isPrivate;
/// Check if sepcified action is available or not.
/// - parameters:
/// - action:       The action to check.
/// - returns:
/// <code>true</code>, if action is available, otherwise <code>false</code>.
- (BOOL)isActionAllowedWithAction:(enum GetSocialCommunitiesAction)action SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe user instance.
SWIFT_CLASS_NAMED("User")
@interface GetSocialUser : NSObject
/// GetSocial Id of user.
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
/// Display name.
@property (nonatomic, readonly, copy) NSString * _Nonnull displayName;
/// Avatar Url.
@property (nonatomic, readonly, copy) NSString * _Nullable avatarUrl;
/// Identities added to user.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull identities;
/// Public properties.
/// These properties are accessible to other users.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull publicProperties;
/// Check if user is the app itself.
@property (nonatomic, readonly) BOOL isApp;
/// Check if user is verified.
@property (nonatomic, readonly) BOOL isVerified;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Check if user is equal to another user.
/// \param object Another user object.
///
///
/// returns:
///
/// <code>true</code> if users are equal, otherwise <code>false</code>.
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe a private user object.
SWIFT_CLASS("_TtC12GetSocialSDK11PrivateUser")
@interface PrivateUser : GetSocialUser
/// Private properties.
/// These properties are not accessible to other users.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull privateProperties;
/// Ban information if user is banned.
@property (nonatomic, readonly, strong) GetSocialBanInfo * _Nullable banInfo;
/// Shows if user is banned or not.
@property (nonatomic, readonly) BOOL isBanned;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Check if user object equal to another user object.
/// \param object Other user object.
///
///
/// returns:
///
/// <code>true</code> if they equal, otherwise <code>false</code>.
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describbe a conflict user object.
SWIFT_CLASS_NAMED("ConflictUser")
@interface GetSocialConflictUser : PrivateUser
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@class GetSocialUserUpdate;
@class GetSocialIdentity;

/// Interface for managing current GetSocial user.
SWIFT_CLASS_NAMED("CurrentUser")
@interface GetSocialCurrentUser : PrivateUser
/// Update user details.
/// \param userUpdate Properties and their new values.
///
/// \param success Called if user was updated.
///
/// \param failure Called if operation failed.
///
- (void)updateDetailsWith:(GetSocialUserUpdate * _Nonnull)userUpdate success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Indicate if the user has at least one identity available.
///
/// returns:
///
/// <code>true</code>, if user is anonymous or framework is not initalized, otherwise <code>false</code>
- (BOOL)isAnonymous SWIFT_WARN_UNUSED_RESULT;
/// Add identity to current user.
/// \param identity Identity to add.
///
/// \param success Called if identity was added.
///
/// \param conflict Called if identity could not be added due to a conflict with other user.
///
/// \param failure Called if operation failed.
///
- (void)addIdentity:(GetSocialIdentity * _Nonnull)identity success:(void (^ _Nonnull)(void))success conflict:(void (^ _Nonnull)(GetSocialConflictUser * _Nonnull))conflict failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Remove identity from current user.
/// \param providerId The provider connected to an identity on current user. Check <code>IdentityProviderIds</code> class for common provider ids.
///
/// \param success Called if identity was removed.
///
/// \param failure Called if operation failed.
///
- (void)removeIdentityByProviderId:(NSString * _Nonnull)providerId success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12GetSocialSDK7UseCase")
@interface UseCase : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12GetSocialSDK16DebugLogsUseCase")
@interface DebugLogsUseCase : UseCase
- (void)changeStatusWithNewSetting:(NSString * _Nullable)newSetting;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("ErrorCode")
@interface GetSocialErrorCode : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger Unknown;)
+ (NSInteger)Unknown SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger GenericCommunicationError;)
+ (NSInteger)GenericCommunicationError SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger NullAppID;)
+ (NSInteger)NullAppID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger InvalidAppID;)
+ (NSInteger)InvalidAppID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger InvalidThriftResponse;)
+ (NSInteger)InvalidThriftResponse SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger UncaughtException;)
+ (NSInteger)UncaughtException SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger ActionDenied;)
+ (NSInteger)ActionDenied SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger SdkInitializationFailed;)
+ (NSInteger)SdkInitializationFailed SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger IllegalArgument;)
+ (NSInteger)IllegalArgument SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger IllegalState;)
+ (NSInteger)IllegalState SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger InvalidOptionalValue;)
+ (NSInteger)InvalidOptionalValue SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger SdkNotInitialized;)
+ (NSInteger)SdkNotInitialized SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger ActivityNotFound;)
+ (NSInteger)ActivityNotFound SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger UserIsBanned;)
+ (NSInteger)UserIsBanned SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger PlatformDisabled;)
+ (NSInteger)PlatformDisabled SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger AppSignatureMismatch;)
+ (NSInteger)AppSignatureMismatch SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger UserIdTokenMismatch;)
+ (NSInteger)UserIdTokenMismatch SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger UserConflict;)
+ (NSInteger)UserConflict SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger NoReferrerMatch;)
+ (NSInteger)NoReferrerMatch SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger ActivityRejected;)
+ (NSInteger)ActivityRejected SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger ActivityRateLimited;)
+ (NSInteger)ActivityRateLimited SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger CommentRateLimited;)
+ (NSInteger)CommentRateLimited SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger ConnectionTimeout;)
+ (NSInteger)ConnectionTimeout SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger NoInternet;)
+ (NSInteger)NoInternet SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger JsonBridge;)
+ (NSInteger)JsonBridge SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger JsonEncode;)
+ (NSInteger)JsonEncode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger JsonDecode;)
+ (NSInteger)JsonDecode SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe a query to follow an entity.
SWIFT_CLASS_NAMED("FollowQuery")
@interface GetSocialFollowQuery : NSObject
/// Create query to follow topics.
/// \param ids List of topic ids.
///
///
/// returns:
///
/// New <code>FollowQuery</code> instance.
+ (GetSocialFollowQuery * _Nonnull)topicsWithIds:(NSArray<NSString *> * _Nonnull)ids SWIFT_WARN_UNUSED_RESULT;
/// Create query to follow groups.
/// \param ids List of group ids.
///
///
/// returns:
///
/// New <code>FollowQuery</code> instance.
+ (GetSocialFollowQuery * _Nonnull)groupsWithIds:(NSArray<NSString *> * _Nonnull)ids SWIFT_WARN_UNUSED_RESULT;
/// Create query to follow users.
/// \param ids User ids.
///
///
/// returns:
///
/// New <code>FollowQuery</code> instance.
+ (GetSocialFollowQuery * _Nonnull)usersWithIds:(GetSocialUserIdList * _Nonnull)ids SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end






/// Describe followers paging query.
SWIFT_CLASS_NAMED("FollowersPagingQuery")
@interface GetSocialFollowersPagingQuery : GetSocialPagingQuery
@property (nonatomic, readonly, strong) GetSocialFollowersQuery * _Nonnull query;
/// Constructor.
/// \param query <code>FollowersQuery</code> instance.
///
///
/// returns:
///
/// New <code>FollowersQuery</code> instance.
- (nonnull instancetype)initWithQuery:(GetSocialFollowersQuery * _Nonnull)query OBJC_DESIGNATED_INITIALIZER;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Result of getting followers method.
SWIFT_CLASS_NAMED("FollowersPagingResult")
@interface GetSocialFollowersPagingResult : GetSocialPagingResult
/// List of followers.
@property (nonatomic, readonly, copy) NSArray<GetSocialUser *> * _Nonnull followers;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Describe query to get followers.
SWIFT_CLASS_NAMED("FollowersQuery")
@interface GetSocialFollowersQuery : NSObject
/// Create query to get followers of a topic.
/// \param id Topic id.
///
///
/// returns:
///
/// New <code>FollowersQuery</code> instance.
+ (GetSocialFollowersQuery * _Nonnull)ofTopicWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Create query to get followers of a group.
/// \param id Group id.
///
///
/// returns:
///
/// New <code>FollowersQuery</code> instance.
+ (GetSocialFollowersQuery * _Nonnull)ofGroupWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Create a query to get followers of a user.
/// \param id User id.
///
///
/// returns:
///
/// New <code>FollowersQuery</code> instance.
+ (GetSocialFollowersQuery * _Nonnull)ofUserWithId:(GetSocialUserId * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Friends paging query.
SWIFT_CLASS_NAMED("FriendsPagingQuery")
@interface GetSocialFriendsPagingQuery : GetSocialPagingQuery
@property (nonatomic, readonly, strong) GetSocialFriendsQuery * _Nonnull query;
/// Constructor.
/// \param query <code>FriendsQuery</code> instance.
///
///
/// returns:
///
/// New <code>FriendsPagingQuery</code> instance.
- (nonnull instancetype)initWithQuery:(GetSocialFriendsQuery * _Nonnull)query OBJC_DESIGNATED_INITIALIZER;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Result of getting friends method.
SWIFT_CLASS_NAMED("FriendsPagingResult")
@interface GetSocialFriendsPagingResult : GetSocialPagingResult
/// List of friends.
@property (nonatomic, readonly, copy) NSArray<GetSocialUser *> * _Nonnull friends;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Describe a query to get friends.
SWIFT_CLASS_NAMED("FriendsQuery")
@interface GetSocialFriendsQuery : NSObject
/// Create a query to friends of another user.
/// - returns:
/// New <code>FriendsQuery</code> instance.
+ (GetSocialFriendsQuery * _Nonnull)ofUserWithId:(GetSocialUserId * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC12GetSocialSDK25GetApplicationInfoUseCase")
@interface GetApplicationInfoUseCase : UseCase
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable appName;)
+ (NSString * _Nullable)appName SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable appAvatar;)
+ (NSString * _Nullable)appAvatar SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Interface for common methods.
SWIFT_CLASS("_TtC12GetSocialSDK9GetSocial")
@interface GetSocial : NSObject
/// Return version of GetSocial framework.
///
/// returns:
///
/// Framework version, like 7.0.0
+ (NSString * _Nonnull)sdkVersion SWIFT_WARN_UNUSED_RESULT;
/// Indicate if the device the app is running on added as test device to GetSocial Dashboard.
///
/// returns:
///
/// <code>true</code>, if added, otherwise <code>false</code>.
+ (BOOL)isTestDevice SWIFT_WARN_UNUSED_RESULT;
/// Return device identifier.
///
/// returns:
///
/// Device identifier. If Limit Ad Tracking is enabled, the returned value contains only <code>0</code>s.
+ (NSString * _Nonnull)deviceIdentifier SWIFT_WARN_UNUSED_RESULT;
/// Initialize the SDK. Use <code>OnInitializedListener</code> to be notified when SDK is initialized.
/// GetSocial App Id will be taken from getsocial.json file.
+ (void)initSdk SWIFT_METHOD_FAMILY(none);
/// Initialize the SDK. Use <code>OnInitializedListener</code> to be notified when SDK is initialized.
/// \param appId GetSocial App Id, you can find your App Id on GetSocial Dashboard.
///
+ (void)initSdkWithAppId:(NSString * _Nonnull)appId SWIFT_METHOD_FAMILY(none);
/// Initialize the SDK with a specific user. SDK should be uninitialized at that moment.
/// \param identity Identity of the user.
///
/// \param success Called if operation succeeded.
///
/// \param failure Called if operation failed.
///
+ (void)initSdkWithIdentity:(GetSocialIdentity * _Nonnull)identity success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure SWIFT_METHOD_FAMILY(none);
/// Set listener to be invoked when SDK initialized.
/// It will be executed immediately, if SDK is already initialized.
/// \param listener Listener to be invoked.
///
+ (void)addOnInitializedListener:(void (^ _Nonnull)(void))listener;
/// Indicate the status of GetSocial framework.
///
/// returns:
///
/// <code>true</code>, if initialization finished, otherwise <code>false</code>.
+ (BOOL)isInitialized SWIFT_WARN_UNUSED_RESULT;
/// Return instance of current GetSocial user.
///
/// returns:
///
/// User instance, or nil if initialization is not finished or failed.
+ (GetSocialCurrentUser * _Nullable)currentUser SWIFT_WARN_UNUSED_RESULT;
/// Set listener to be invoked when current user changed.
/// The action is executed on the main thread, so be careful with operations that you put inside the block.
/// Handler will be called in the following cases:
/// <ul>
///   <li>
///     SDK initialization finished.
///   </li>
///   <li>
///     <code>switchUser</code> method was called and user was changed.
///   </li>
///   <li>
///     <code>resetUser</code> method was called.
///   </li>
/// </ul>
/// \param listener Listener to be invoked.
///
///
/// returns:
///
/// Id to use in <code>removeOnCurrentUserChangedListener</code>.
+ (NSString * _Nonnull)addOnCurrentUserChangedListener:(void (^ _Nonnull)(GetSocialCurrentUser * _Nonnull))listener;
/// Remove previously added listener.
/// \param id Listener id to be removed.
///
+ (void)removeOnCurrentUserChangedListener:(NSString * _Nonnull)id;
/// Set the language of GetSocial framework.
/// If provided value is incorrect, the default language will be used.
/// \param languageCode Check possible values in <code>LanguageCodes</code> class.
///
///
/// returns:
///
/// <code>true</code>, if operation was successful, otherwise <code>false</code>.
+ (BOOL)setLanguage:(NSString * _Nonnull)languageCode;
/// Return the current language of GetSocial framework.
///
/// returns:
///
/// Language code as defined in <code>LanguageCodes</code>.
+ (NSString * _Nonnull)language SWIFT_WARN_UNUSED_RESULT;
/// Handle action using the default GetSocial behaviour.
+ (void)handleAction:(GetSocialAction * _Nonnull)action;
/// Reset current user and creates a new anonymous user.
/// \param success Called if user was reset.
///
/// \param failure Called if operation failed.
///
+ (void)resetUserWithSuccess:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Reset current user and without creating a new user.
/// \param success Called if user was reset.
///
/// \param failure Called if operation failed.
///
+ (void)resetWithSuccess:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Switch the current user to another user identified by the provided identity.
/// \param identity Identity that current user should be switched to.
///
/// \param success Called if user was switched.
///
/// \param failure Called if operation failed.
///
+ (void)switchUserToIdentity:(GetSocialIdentity * _Nonnull)identity success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12GetSocialSDK19GetSocialLoggerObjc")
@interface GetSocialLoggerObjc : NSObject
+ (void)logWithLevel:(NSString * _Nonnull)level message:(NSString * _Nonnull)message;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class GetSocialNotificationButton;
@class GetSocialNotificationCustomization;

/// Describe notification object.
SWIFT_CLASS("_TtC12GetSocialSDK21GetSocialNotification")
@interface GetSocialNotification : NSObject
/// Notification type.
@property (nonatomic, readonly, copy) NSString * _Nullable type;
/// Notification status.
@property (nonatomic, readonly, copy) NSString * _Nullable status;
/// Creation date.
@property (nonatomic, readonly) int64_t createdAt;
/// Notification id.
@property (nonatomic, readonly, copy) NSString * _Nonnull notificationId;
/// Notification text.
@property (nonatomic, readonly, copy) NSString * _Nullable text;
/// Notification title.
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// Media attachment.
@property (nonatomic, strong) GetSocialMediaAttachment * _Nullable mediaAttachment;
/// Notification action.
@property (nonatomic, readonly, strong) GetSocialAction * _Nullable notificationAction;
/// Action buttons.
@property (nonatomic, readonly, copy) NSArray<GetSocialNotificationButton *> * _Nonnull actionButtons;
/// Sender.
@property (nonatomic, readonly, strong) GetSocialUser * _Nonnull sender;
/// Customization.
@property (nonatomic, readonly, strong) GetSocialNotificationCustomization * _Nullable customization;
/// Check if notification was read or not.
@property (nonatomic, readonly) BOOL wasRead;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe group object.
SWIFT_CLASS_NAMED("Group")
@interface GetSocialGroup : NSObject
/// Group identifier
@property (nonatomic, readonly, copy) NSString * _Nonnull groupId;
/// Group localized title
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// Group localized description
@property (nonatomic, readonly, copy) NSString * _Nullable groupDescription;
/// Avatar Url
@property (nonatomic, readonly, copy) NSString * _Nullable avatarUrl;
/// Creation date
@property (nonatomic, readonly) int64_t createdAt;
/// Last update
@property (nonatomic, readonly) int64_t updatedAt;
/// Setting
@property (nonatomic, readonly, strong) GetSocialCommunitiesSettings * _Nonnull settings;
/// Number of followers
@property (nonatomic, readonly) NSInteger followersCount;
/// Current user is follower or not
@property (nonatomic, readonly) BOOL isFollowedByMe;
/// Number of members
@property (nonatomic, readonly) NSInteger membersCount;
/// Membership info
@property (nonatomic, readonly, strong) Membership * _Nullable membership;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe group content object.
SWIFT_CLASS_NAMED("GroupContent")
@interface GetSocialGroupContent : NSObject
/// Group id
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Group title
@property (nonatomic, copy) NSString * _Nullable title;
/// Group description
@property (nonatomic, copy) NSString * _Nullable groupDescription;
/// Group icon
@property (nonatomic, strong) GetSocialMediaAttachment * _Nullable avatar;
/// Custom properties
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull properties;
/// Create a new group content to create a group.
/// \param groupId Group id.
///
- (nonnull instancetype)initWithGroupId:(NSString * _Nonnull)groupId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Describe group member object.
SWIFT_CLASS_NAMED("GroupMember")
@interface GetSocialGroupMember : GetSocialUser
/// Membership details
@property (nonatomic, readonly, strong) Membership * _Nonnull membership;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Result of getting group members method.
SWIFT_CLASS_NAMED("GroupMembersPagingResult")
@interface GetSocialGroupMembersPagingResult : GetSocialPagingResult
/// List of members.
@property (nonatomic, readonly, copy) NSArray<GetSocialGroupMember *> * _Nonnull members;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Describe groups paging query.
SWIFT_CLASS_NAMED("GroupsPagingQuery")
@interface GetSocialGroupsPagingQuery : GetSocialPagingQuery
/// Constructor.
/// \param query <code>GroupsQuery</code> instance.
///
///
/// returns:
///
/// New <code>GroupsPagingQuery</code> instance.
- (nonnull instancetype)initWithQuery:(GetSocialGroupsQuery * _Nonnull)query OBJC_DESIGNATED_INITIALIZER;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Result of getting groups method.
SWIFT_CLASS_NAMED("GroupsPagingResult")
@interface GetSocialGroupsPagingResult : GetSocialPagingResult
/// List of groups.
@property (nonatomic, readonly, copy) NSArray<GetSocialGroup *> * _Nonnull groups;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Describe query to get group.
SWIFT_CLASS_NAMED("GroupsQuery")
@interface GetSocialGroupsQuery : NSObject
/// Create a query to find a group.
/// \param searchTerm Search term.
///
///
/// returns:
///
/// New <code>TopicsQuery</code> instance.
+ (GetSocialGroupsQuery * _Nonnull)find:(NSString * _Nonnull)searchTerm SWIFT_WARN_UNUSED_RESULT;
/// Create a query to get groups.
///
/// returns:
///
/// New <code>GroupsQuery</code> instance.
+ (GetSocialGroupsQuery * _Nonnull)all SWIFT_WARN_UNUSED_RESULT;
/// Filters groups followed by a specific user.
/// \param id User id.
///
- (GetSocialGroupsQuery * _Nonnull)followedByUserWithId:(GetSocialUserId * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Filters groups which a specific user is member of.
/// \param id User id.
///
- (GetSocialGroupsQuery * _Nonnull)byMemberId:(GetSocialUserId * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Describe identity object.
SWIFT_CLASS_NAMED("Identity")
@interface GetSocialIdentity : NSObject
/// Create an identity with Facebook’s access token.
/// - parameters:
/// - accessToken:      Access token as returned by Facebook.
/// - returns:
/// New <code>Identity</code> instance.
+ (GetSocialIdentity * _Nonnull)facebookIdentityWithAccessToken:(NSString * _Nonnull)accessToken SWIFT_WARN_UNUSED_RESULT;
/// Create an identity with custom data.
/// - parameters:
/// - providerId:       Custom provider id.
/// - userId:           Id of user.
/// - accessToken:      Access token.
/// - returns:
/// New <code>Identity</code> instance.
+ (GetSocialIdentity * _Nonnull)customIdentityWithProviderId:(NSString * _Nonnull)providerId userId:(NSString * _Nonnull)userId accessToken:(NSString * _Nonnull)accessToken SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end








/// Constants for identity provider ids.
SWIFT_CLASS_NAMED("IdentityProviderIds")
@interface GetSocialIdentityProviderIds : NSObject
/// IdentityProviderId for Facebook.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull facebook;)
+ (NSString * _Nonnull)facebook SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12GetSocialSDK14InitSdkUseCase")
@interface InitSdkUseCase : UseCase
- (void)executeWith:(GetSocialIdentity * _Nonnull)identity success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
- (void)executeWith:(NSString * _Nullable)appId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP12GetSocialSDK20InternetConnectivity_")
@protocol InternetConnectivity
- (BOOL)isConnected SWIFT_WARN_UNUSED_RESULT;
@end

@class UIImage;

/// Describe an invite object.
SWIFT_CLASS_NAMED("Invite")
@interface GetSocialInvite : NSObject
/// Invite subject.
@property (nonatomic, readonly, copy) NSString * _Nullable subject;
/// Invite text.
@property (nonatomic, readonly, copy) NSString * _Nullable text;
/// Invite sender’s display name.
@property (nonatomic, readonly, copy) NSString * _Nullable userName;
/// Image content as url.
@property (nonatomic, readonly, copy) NSString * _Nullable imageUrl;
/// Image content as UIImage.
@property (nonatomic, readonly, strong) UIImage * _Nullable image;
/// Gif url.
@property (nonatomic, readonly, copy) NSString * _Nullable gifUrl;
/// Video url.
@property (nonatomic, readonly, copy) NSString * _Nullable videoUrl;
/// Referral link url.
@property (nonatomic, readonly, copy) NSString * _Nullable referralUrl;
/// Link parameters.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull linkParams;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS_NAMED("InviteChannel")
@interface GetSocialInviteChannel : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull channelId;
@property (nonatomic, readonly, copy) NSString * _Nullable name;
@property (nonatomic, readonly, copy) NSString * _Nonnull iconUrl;
@property (nonatomic, readonly) BOOL isEnabled;
@property (nonatomic, readonly) int32_t displayOrder;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// Define invite channel ids.
SWIFT_CLASS_NAMED("InviteChannelIds")
@interface GetSocialInviteChannelIds : NSObject
/// Generic.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull generic;)
+ (NSString * _Nonnull)generic SWIFT_WARN_UNUSED_RESULT;
/// Email.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull email;)
+ (NSString * _Nonnull)email SWIFT_WARN_UNUSED_RESULT;
/// Facebook.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull facebook;)
+ (NSString * _Nonnull)facebook SWIFT_WARN_UNUSED_RESULT;
/// Instagram.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull instagramDirect;)
+ (NSString * _Nonnull)instagramDirect SWIFT_WARN_UNUSED_RESULT;
/// Kakao.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kakao;)
+ (NSString * _Nonnull)kakao SWIFT_WARN_UNUSED_RESULT;
/// Kik.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kik;)
+ (NSString * _Nonnull)kik SWIFT_WARN_UNUSED_RESULT;
/// Line.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull line;)
+ (NSString * _Nonnull)line SWIFT_WARN_UNUSED_RESULT;
/// Facebook Messenger.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull facebookMessenger;)
+ (NSString * _Nonnull)facebookMessenger SWIFT_WARN_UNUSED_RESULT;
/// Native share.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull nativeShare;)
+ (NSString * _Nonnull)nativeShare SWIFT_WARN_UNUSED_RESULT;
/// Snapchat.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull snapchat;)
+ (NSString * _Nonnull)snapchat SWIFT_WARN_UNUSED_RESULT;
/// SMS.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sms;)
+ (NSString * _Nonnull)sms SWIFT_WARN_UNUSED_RESULT;
/// Twitter.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull twitter;)
+ (NSString * _Nonnull)twitter SWIFT_WARN_UNUSED_RESULT;
/// Telegram.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull telegram;)
+ (NSString * _Nonnull)telegram SWIFT_WARN_UNUSED_RESULT;
/// Viber.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull viber;)
+ (NSString * _Nonnull)viber SWIFT_WARN_UNUSED_RESULT;
/// VK.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull vk;)
+ (NSString * _Nonnull)vk SWIFT_WARN_UNUSED_RESULT;
/// WhatsApp.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull whatsApp;)
+ (NSString * _Nonnull)whatsApp SWIFT_WARN_UNUSED_RESULT;
/// Instagram Stories.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull instagramStories;)
+ (NSString * _Nonnull)instagramStories SWIFT_WARN_UNUSED_RESULT;
/// Facebook Stories.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull facebookStories;)
+ (NSString * _Nonnull)facebookStories SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIViewController;

SWIFT_PROTOCOL_NAMED("InviteChannelPlugin")
@protocol GetSocialInviteChannelPluginProtocol
- (BOOL)isAvailableForDevice:(GetSocialInviteChannel * _Nonnull)inviteChannel SWIFT_WARN_UNUSED_RESULT;
- (void)presentPluginWithInviteChannel:(GetSocialInviteChannel * _Nonnull)inviteChannel invite:(GetSocialInvite * _Nonnull)invite onViewController:(UIViewController * _Nonnull)onViewController success:(void (^ _Nonnull)(NSDictionary<NSString *, NSString *> * _Nonnull))success cancel:(void (^ _Nonnull)(NSDictionary<NSString *, NSString *> * _Nonnull))cancel failure:(void (^ _Nonnull)(NSError * _Nonnull, NSDictionary<NSString *, NSString *> * _Nonnull))failure;
@end


/// Describe invite content.
SWIFT_CLASS_NAMED("InviteContent")
@interface GetSocialInviteContent : NSObject
/// Invite subject.
@property (nonatomic, copy) NSString * _Nullable subject;
/// Invite text.
@property (nonatomic, copy) NSString * _Nullable text;
/// Attachment.
@property (nonatomic, strong) GetSocialMediaAttachment * _Nullable mediaAttachment;
/// Link parameters.
@property (nonatomic, copy) NSDictionary<NSString *, NSObject *> * _Nonnull linkParams;
/// Set link parameter.
/// \param value Value to set.
///
/// \param forKey Key for the value.
///
- (void)setLinkParameterValue:(NSObject * _Nonnull)value forKey:(NSString * _Nonnull)forKey;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// Describe invite content placeholder.
SWIFT_CLASS_NAMED("InviteContentPlaceholders")
@interface GetSocialInviteContentPlaceholders : NSObject
/// Tag is replaced with referral url.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull inviteUrl;)
+ (NSString * _Nonnull)inviteUrl SWIFT_WARN_UNUSED_RESULT;
/// Tag is replaced with current user’s name.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull userName;)
+ (NSString * _Nonnull)userName SWIFT_WARN_UNUSED_RESULT;
/// Tag is replaced with promo code from LinkParams if any present.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull promoCode;)
+ (NSString * _Nonnull)promoCode SWIFT_WARN_UNUSED_RESULT;
/// Tag is replaced with the package string e.g. im.getsocial.testapp.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull appPackageName;)
+ (NSString * _Nonnull)appPackageName SWIFT_WARN_UNUSED_RESULT;
/// Tag is replaced with the subject provided on the GetSocial Dashboard.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull inviteSubject;)
+ (NSString * _Nonnull)inviteSubject SWIFT_WARN_UNUSED_RESULT;
/// Tag is replaced with the message text provided on the GetSocial Dashboard.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull inviteText;)
+ (NSString * _Nonnull)inviteText SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("InviteProperties")
@interface GetSocialInviteProperties : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable action;
@property (nonatomic, readonly, copy) NSString * _Nullable contentType;
@property (nonatomic, readonly, copy) NSString * _Nullable packageName;
@property (nonatomic, readonly, copy) NSString * _Nullable urlScheme;
@property (nonatomic, readonly, copy) NSString * _Nullable className;
@property (nonatomic, readonly, copy) NSString * _Nullable data;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end





@class GetSocialReferralData;
@class GetSocialReferralUsersPagingQuery;
@class GetSocialReferralUsersPagingResult;

/// Interface for Invites.
SWIFT_CLASS_NAMED("Invites")
@interface GetSocialInvites : NSObject
/// Return a list of available channels.
/// \param success Called with list of available channels.
///
/// \param failure Called if operation failed.
///
+ (void)availableChannelsWithSuccess:(SWIFT_NOESCAPE void (^ _Nonnull)(NSArray<GetSocialInviteChannel *> * _Nonnull))success failure:(SWIFT_NOESCAPE void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Send an invitation with content on the specified channel.
/// \param content Content to send.
///
/// \param onChannel Channel to use. Check <code>InviteChannelIds</code> for possible values.
///
/// \param success Called if invitation was sent.
///
/// \param cancel Called if invitation sending was canceled.
///
/// \param failure Called if operation failed.
///
+ (void)sendInviteContent:(GetSocialInviteContent * _Nullable)content onChannel:(NSString * _Nonnull)onChannel success:(void (^ _Nonnull)(void))success cancel:(void (^ _Nonnull)(void))cancel failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Create an invite with invite url to be shared any custom way.
/// \param content Content to use.
///
/// \param success Called with created invite.
///
/// \param failure Called if operation failed.
///
+ (void)createInviteWithContent:(GetSocialInviteContent * _Nullable)content success:(void (^ _Nonnull)(GetSocialInvite * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Create an invite url to be shared any custom way.
/// \param content Content to use.
///
/// \param success Called with created invite.
///
/// \param failure Called if operation failed.
///
+ (void)createInviteURLWithContent:(GetSocialInviteContent * _Nullable)content success:(void (^ _Nonnull)(NSString * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Register an invite channel plugin for the specified channel id.
/// <ul>
///   <li>
///     @result YES if the operation was successful, otherwise NO.
///   </li>
/// </ul>
/// \param plugin Plugin to register.
///
/// \param forChannel Channel id. Check <code>InviteChannelIds</code> for possible values.
///
+ (BOOL)registerPlugin:(id <GetSocialInviteChannelPluginProtocol> _Nonnull)plugin forChannel:(NSString * _Nonnull)forChannel;
/// Set listener to be invoked when referral data is received.
/// \param listener Listener to be invoked.
///
+ (void)setOnReferralDataReceivedListener:(void (^ _Nonnull)(GetSocialReferralData * _Nonnull))listener;
/// Get list of users who are referred by current user, filtered by the query parameter.
/// \param query Query to filter referred users.
///
/// \param success Called with list of referred users.
///
/// \param failure Called if operation failed.
///
+ (void)referredUsersWithQuery:(GetSocialReferralUsersPagingQuery * _Nonnull)query success:(void (^ _Nonnull)(GetSocialReferralUsersPagingResult * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get list of users who are referrers of current user, filtered by the query parameter.
/// \param query Query to filter referred users.
///
/// \param success Called with list of referrer users.
///
/// \param failure Called if operation failed.
///
+ (void)referrerUsersWithQuery:(GetSocialReferralUsersPagingQuery * _Nonnull)query success:(void (^ _Nonnull)(GetSocialReferralUsersPagingResult * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Set referrer details of current user.
/// \param id Id of referrer user.
///
/// \param event Referrer event.
///
/// \param customData Custom key-value pairs.
///
/// \param success Called if referrer was set.
///
/// \param failure Called if operation failed.
///
+ (void)setReferrerWithId:(GetSocialUserId * _Nonnull)id event:(NSString * _Nonnull)event customData:(NSDictionary<NSString *, NSString *> * _Nullable)customData success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12GetSocialSDK34InvokePendingInviteCallbackUseCase")
@interface InvokePendingInviteCallbackUseCase : UseCase
- (void)invoke;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe updating group members query.
SWIFT_CLASS_NAMED("JoinGroupQuery")
@interface GetSocialJoinGroupQuery : NSObject
/// Create a query to join to a group.
/// \param groupId Group Id.
///
- (nonnull instancetype)initWithGroupId:(NSString * _Nonnull)groupId OBJC_DESIGNATED_INITIALIZER;
/// Set invitation token. Use this method if user was invited to join a group.
/// \param invitationToken Invitation token.
///
///
/// returns:
///
/// Updated <code>JoinGroupQuery</code> instance.
- (GetSocialJoinGroupQuery * _Nonnull)withInvitationToken:(NSString * _Nonnull)invitationToken SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("LanguageCodes")
@interface GetSocialLanguageCodes : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull bengali;)
+ (NSString * _Nonnull)bengali SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull bhojpuri;)
+ (NSString * _Nonnull)bhojpuri SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull chinese_simplified;)
+ (NSString * _Nonnull)chinese_simplified SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull chinese_traditional;)
+ (NSString * _Nonnull)chinese_traditional SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull danish;)
+ (NSString * _Nonnull)danish SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull dutch;)
+ (NSString * _Nonnull)dutch SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull english;)
+ (NSString * _Nonnull)english SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull french;)
+ (NSString * _Nonnull)french SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull german;)
+ (NSString * _Nonnull)german SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull gujarati;)
+ (NSString * _Nonnull)gujarati SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull hindi;)
+ (NSString * _Nonnull)hindi SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull icelandic;)
+ (NSString * _Nonnull)icelandic SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull indonesian;)
+ (NSString * _Nonnull)indonesian SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull italian;)
+ (NSString * _Nonnull)italian SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull japanese;)
+ (NSString * _Nonnull)japanese SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kannada;)
+ (NSString * _Nonnull)kannada SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull korean;)
+ (NSString * _Nonnull)korean SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull latin_american_spanish;)
+ (NSString * _Nonnull)latin_american_spanish SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull malay;)
+ (NSString * _Nonnull)malay SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull malayalam;)
+ (NSString * _Nonnull)malayalam SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull marathi;)
+ (NSString * _Nonnull)marathi SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull norwegian;)
+ (NSString * _Nonnull)norwegian SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull polish;)
+ (NSString * _Nonnull)polish SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull portuguese;)
+ (NSString * _Nonnull)portuguese SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull portuguese_brazillian;)
+ (NSString * _Nonnull)portuguese_brazillian SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull punjabi;)
+ (NSString * _Nonnull)punjabi SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull russian;)
+ (NSString * _Nonnull)russian SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull spanish;)
+ (NSString * _Nonnull)spanish SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swedish;)
+ (NSString * _Nonnull)swedish SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull tagalog;)
+ (NSString * _Nonnull)tagalog SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull tamil;)
+ (NSString * _Nonnull)tamil SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull telugu;)
+ (NSString * _Nonnull)telugu SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull thai;)
+ (NSString * _Nonnull)thai SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull turkish;)
+ (NSString * _Nonnull)turkish SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ukrainian;)
+ (NSString * _Nonnull)ukrainian SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull vietnamese;)
+ (NSString * _Nonnull)vietnamese SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull defaultLanguage;)
+ (NSString * _Nonnull)defaultLanguage SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary<NSString *, NSString *> * _Nonnull)all SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Landing page customization keys.
SWIFT_CLASS_NAMED("LinkParams")
@interface GetSocialLinkParams : NSObject
/// Custom title to be shown on landing page.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull customTitle;)
+ (NSString * _Nonnull)customTitle SWIFT_WARN_UNUSED_RESULT;
/// Custom description to be shown on landing page.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull customDescription;)
+ (NSString * _Nonnull)customDescription SWIFT_WARN_UNUSED_RESULT;
/// Custom image to be shown on landing page.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull customImage;)
+ (NSString * _Nonnull)customImage SWIFT_WARN_UNUSED_RESULT;
/// Custom video to be shown on landing page.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull customYouTubeVideo;)
+ (NSString * _Nonnull)customYouTubeVideo SWIFT_WARN_UNUSED_RESULT;
/// Promo code to replace placeholder in invite text or subject.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull customPromoCode;)
+ (NSString * _Nonnull)customPromoCode SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe media attachment.
SWIFT_CLASS_NAMED("MediaAttachment")
@interface GetSocialMediaAttachment : NSObject
/// Video url.
@property (nonatomic, readonly, copy) NSString * _Nullable videoUrl;
/// Image url.
@property (nonatomic, readonly, copy) NSString * _Nullable imageUrl;
/// Create an attachment with image url.
/// \param imageUrl Url of the image.
///
///
/// returns:
///
/// New <code>MediaAttachment</code> instance.
+ (GetSocialMediaAttachment * _Nonnull)withImageUrl:(NSString * _Nonnull)imageUrl SWIFT_WARN_UNUSED_RESULT;
/// Create an attachment with image.
/// \param image Image instance.
///
///
/// returns:
///
/// New <code>MediaAttachment</code> instance.
+ (GetSocialMediaAttachment * _Nonnull)withImage:(UIImage * _Nonnull)image SWIFT_WARN_UNUSED_RESULT;
/// Create an attachment with video url.
/// \param videoUrl Url of the video.
///
///
/// returns:
///
/// New <code>MediaAttachment</code> instance.
+ (GetSocialMediaAttachment * _Nonnull)withVideoUrl:(NSString * _Nonnull)videoUrl SWIFT_WARN_UNUSED_RESULT;
/// Create an attachment with video.
/// \param video Video content.
///
///
/// returns:
///
/// New <code>MediaAttachment</code> instance.
+ (GetSocialMediaAttachment * _Nonnull)withVideo:(NSData * _Nonnull)video SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end






SWIFT_PROTOCOL_NAMED("MediaUploader")
@protocol GetSocialMediaUploader
- (NSString * _Nullable)uploadMedia:(NSData * _Nonnull)media to:(NSURL * _Nonnull)url withMetadata:(NSDictionary<NSString *, NSString *> * _Nonnull)metadata SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, GetSocialMemberStatus, "MemberStatus", open) {
/// User is not approved yet
  GetSocialMemberStatusApprovalPending = 0,
/// User has not accepted the invitation yet
  GetSocialMemberStatusInvitationPending = 1,
/// Member
  GetSocialMemberStatusMember = 2,
};

@class GetSocialMembersQuery;

/// Describe members paging query.
SWIFT_CLASS_NAMED("MembersPagingQuery")
@interface GetSocialMembersPagingQuery : GetSocialPagingQuery
/// Constructor.
/// \param query <code>MembersQuery</code> instance.
///
///
/// returns:
///
/// New <code>MembersPagingQuery</code> instance.
- (nonnull instancetype)initWithQuery:(GetSocialMembersQuery * _Nonnull)query OBJC_DESIGNATED_INITIALIZER;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Describe query to get members of a group.
SWIFT_CLASS_NAMED("MembersQuery")
@interface GetSocialMembersQuery : NSObject
/// Create a query to get members of a group.
/// \param id Group Id.
///
///
/// returns:
///
/// New <code>MembersQuery</code> instance.
+ (GetSocialMembersQuery * _Nonnull)ofGroupWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Filters members by role.
/// \param role Role.
///
///
/// returns:
///
/// Query instance.
- (GetSocialMembersQuery * _Nonnull)withRole:(enum GetSocialMemberRole)role SWIFT_WARN_UNUSED_RESULT;
/// Filters members by status.
/// \param status Status.
///
///
/// returns:
///
/// Query instance.
- (GetSocialMembersQuery * _Nonnull)withStatus:(enum GetSocialMemberStatus)status SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12GetSocialSDK10Membership")
@interface Membership : NSObject
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum GetSocialMentionType : NSInteger;

/// Describe a mention.
SWIFT_CLASS_NAMED("Mention")
@interface GetSocialMention : NSObject
/// Id of user who is mentioned.
@property (nonatomic, copy) NSString * _Nullable userId;
/// Start index of mention.
@property (nonatomic) NSInteger startIndex;
/// End index of mention.
@property (nonatomic) NSInteger endIndex;
/// Type of mention.
@property (nonatomic) enum GetSocialMentionType type;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Mention types.
typedef SWIFT_ENUM_NAMED(NSInteger, GetSocialMentionType, "MentionType", open) {
/// App.
  GetSocialMentionTypeApp = 0,
/// User.
  GetSocialMentionTypeUser = 1,
};


/// Describe notification badge object.
SWIFT_CLASS_NAMED("NotificationBadge")
@interface GetSocialNotificationBadge : NSObject
/// Create a notification badge object, which will increase the badge number with the specified value.
/// \param by Increase value.
///
///
/// returns:
///
/// New <code>NotificationBadge</code> instance.
+ (GetSocialNotificationBadge * _Nonnull)increaseBy:(int32_t)by SWIFT_WARN_UNUSED_RESULT;
/// Create a notification badge object, which will set the badge number with the specified value.
/// \param to Value to set badge number to.
///
///
/// returns:
///
/// New <code>NotificationBadge</code> instance.
+ (GetSocialNotificationBadge * _Nonnull)setTo:(int32_t)to SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Define action button object.
SWIFT_CLASS_NAMED("NotificationButton")
@interface GetSocialNotificationButton : NSObject
/// Constant for <code>consume</code> action id.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull actionIdConsume;)
+ (NSString * _Nonnull)actionIdConsume SWIFT_WARN_UNUSED_RESULT;
/// Constant for <code>ignore</code> action id.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull actionIdIgnore;)
+ (NSString * _Nonnull)actionIdIgnore SWIFT_WARN_UNUSED_RESULT;
/// Action id.
@property (nonatomic, readonly, copy) NSString * _Nonnull actionId;
/// Notification button title.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// Create a notification button instance with the provided parameters.
/// \param title Notification button title.
///
/// \param actionId Action id
///
///
/// returns:
///
/// New <code>NotificationButton</code> instance.
+ (GetSocialNotificationButton * _Nonnull)createWithTitle:(NSString * _Nonnull)title actionId:(NSString * _Nonnull)actionId SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Describe notification content.
SWIFT_CLASS_NAMED("NotificationContent")
@interface GetSocialNotificationContent : NSObject
/// Notification text.
@property (nonatomic, copy) NSString * _Nullable text;
/// Notification title.
@property (nonatomic, copy) NSString * _Nullable title;
/// Action buttons.
@property (nonatomic, copy) NSArray<GetSocialNotificationButton *> * _Nonnull actionButtons;
/// Notification action.
@property (nonatomic, strong) GetSocialAction * _Nullable action;
/// Template name.
@property (nonatomic, copy) NSString * _Nullable templateName;
/// Template placeholders.
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull templatePlaceholders;
/// Media attachment.
@property (nonatomic, strong) GetSocialMediaAttachment * _Nullable mediaAttachment;
/// Notification customization.
@property (nonatomic, strong) GetSocialNotificationCustomization * _Nullable customization;
/// Badge update.
@property (nonatomic, strong) GetSocialNotificationBadge * _Nullable badge;
/// Create a notification content with text.
/// \param text Notification text.
///
///
/// returns:
///
/// New <code>NotificationContent</code> instance.
+ (GetSocialNotificationContent * _Nonnull)withText:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
/// Create a notification content with a template.
/// \param name Notification template name.
///
///
/// returns:
///
/// New <code>NotificationContent</code> instance.
+ (GetSocialNotificationContent * _Nonnull)withTemplateName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Append an action button.
/// \param actionButton Action button.
///
- (void)appendActionButton:(GetSocialNotificationButton * _Nonnull)actionButton;
/// Set template placeholders.
/// \param value Template placeholder value.
///
/// \param forKey Template placeholder key.
///
- (void)setTemplatePlaceholderValue:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)forKey;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// Describe placeholders for notification content.
SWIFT_CLASS_NAMED("NotificationContentPlaceholders")
@interface GetSocialNotificationContentPlaceholders : NSObject
/// Placeholder to show sender’s display name in notification.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull senderDisplayName;)
+ (NSString * _Nonnull)senderDisplayName SWIFT_WARN_UNUSED_RESULT;
/// Placeholder to shows receiver’s display name in notification.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull receiverDisplayName;)
+ (NSString * _Nonnull)receiverDisplayName SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe notification context.
SWIFT_CLASS_NAMED("NotificationContext")
@interface GetSocialNotificationContext : NSObject
/// Notification action.
@property (nonatomic, copy) NSString * _Nullable action;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe notification customization object.
SWIFT_CLASS_NAMED("NotificationCustomization")
@interface GetSocialNotificationCustomization : NSObject
/// Background image.
@property (nonatomic, copy) NSString * _Nullable backgroundImageConfiguration;
/// Title text color.
@property (nonatomic, copy) NSString * _Nullable titleColor;
/// Text color.
@property (nonatomic, copy) NSString * _Nullable textColor;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// Describe placeholders for notification receivers.
SWIFT_CLASS_NAMED("NotificationReceiverPlaceholders")
@interface GetSocialNotificationReceiverPlaceholders : NSObject
/// Placeholder to send notification to all friends.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull friends;)
+ (NSString * _Nonnull)friends SWIFT_WARN_UNUSED_RESULT;
/// Placeholder to send notification to referred users.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull referredUsers;)
+ (NSString * _Nonnull)referredUsers SWIFT_WARN_UNUSED_RESULT;
/// Placeholder to send notification to referrer.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull referrer;)
+ (NSString * _Nonnull)referrer SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12GetSocialSDK26NotificationRepresentation")
@interface NotificationRepresentation : NSObject
@property (nonatomic) BOOL isSilent;
+ (NotificationRepresentation * _Nullable)fromInfo:(NSDictionary<NSString *, id> * _Nullable)info SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe notification statuses.
SWIFT_CLASS_NAMED("NotificationStatus")
@interface GetSocialNotificationStatus : NSObject
/// Notification is read.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull read;)
+ (NSString * _Nonnull)read SWIFT_WARN_UNUSED_RESULT;
/// Notification is unread.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull unread;)
+ (NSString * _Nonnull)unread SWIFT_WARN_UNUSED_RESULT;
/// Notification is consumed.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull consumed;)
+ (NSString * _Nonnull)consumed SWIFT_WARN_UNUSED_RESULT;
/// Notification is ignored.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ignored;)
+ (NSString * _Nonnull)ignored SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Notification types.
SWIFT_CLASS_NAMED("NotificationType")
@interface GetSocialNotificationType : NSObject
/// Someone commented on your activity.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull comment;)
+ (NSString * _Nonnull)comment SWIFT_WARN_UNUSED_RESULT;
/// Someone liked your activity.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull likeActivity;)
+ (NSString * _Nonnull)likeActivity SWIFT_WARN_UNUSED_RESULT;
/// Someone liked your comment.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull likeComment;)
+ (NSString * _Nonnull)likeComment SWIFT_WARN_UNUSED_RESULT;
/// Someone commented on the activity where you’ve commented before.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull relatedComment;)
+ (NSString * _Nonnull)relatedComment SWIFT_WARN_UNUSED_RESULT;
/// You became friends with another user.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull newFriendship;)
+ (NSString * _Nonnull)newFriendship SWIFT_WARN_UNUSED_RESULT;
/// Someone accepted your invite.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull inviteAccepted;)
+ (NSString * _Nonnull)inviteAccepted SWIFT_WARN_UNUSED_RESULT;
/// Someone mentioned you in comment.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull mentionInComment;)
+ (NSString * _Nonnull)mentionInComment SWIFT_WARN_UNUSED_RESULT;
/// Someone mentioned you in activity.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull mentionInActivity;)
+ (NSString * _Nonnull)mentionInActivity SWIFT_WARN_UNUSED_RESULT;
/// Someone replied to your comment.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull replyToComment;)
+ (NSString * _Nonnull)replyToComment SWIFT_WARN_UNUSED_RESULT;
/// Smart targeting Push Notifications.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull targeting;)
+ (NSString * _Nonnull)targeting SWIFT_WARN_UNUSED_RESULT;
/// Notifications sent from the Dashboard when using “Test Push Notifications”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull direct;)
+ (NSString * _Nonnull)direct SWIFT_WARN_UNUSED_RESULT;
/// Notification sent from SDK.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdk;)
+ (NSString * _Nonnull)sdk SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class GetSocialNotificationsPagingQuery;
@class GetSocialNotificationsPagingResult;
@class GetSocialNotificationsQuery;
@class GetSocialSendNotificationTarget;

/// Interface for managing notifications.
SWIFT_CLASS_NAMED("Notifications")
@interface GetSocialNotifications : NSObject
/// Get the list of notifications of current user.
/// \param query Query to filter notifications.
///
/// \param success Called with list of notifications.
///
/// \param failure Called if operation failed.
///
+ (void)getWithQuery:(GetSocialNotificationsPagingQuery * _Nonnull)query success:(void (^ _Nonnull)(GetSocialNotificationsPagingResult * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get the number of notifications of current user based on the provided query.
/// \param query Query to filter notifications.
///
/// \param success Called with the number of notifications.
///
/// \param failure Called if operation failed.
///
+ (void)countWithQuery:(GetSocialNotificationsQuery * _Nonnull)query success:(void (^ _Nonnull)(NSInteger))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Set notifications status.
/// \param newStatus New status.
///
/// \param notificationIds List of notifications ids.
///
/// \param success Called if operation finished.
///
/// \param failure Called if operation failed.
///
+ (void)setStatusTo:(NSString * _Nonnull)newStatus notificationIds:(NSArray<NSString *> * _Nonnull)notificationIds success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Enable or disable receiving Push Notifications.
/// If set to <code>false</code> current user won’t receive GetSocial Push Notifications anymore, until same method called with <code>true</code>.
/// \param enabled Enable or disable Push Notifications.
///
/// \param success Called if operation succeeded.
///
/// \param failure Called if operation failed.
///
+ (void)setPushNotificationsEnabled:(BOOL)enabled success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Check if Push Notifications are enabled for current user.
/// \param success Called with <code>true</code> if Push Notifications are enabled, otherwise <code>false</code>.
///
/// \param failure Called if operation failed.
///
+ (void)arePushNotificationsEnabledWithSuccess:(void (^ _Nonnull)(BOOL))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Send notification to any GetSocial user.
/// \param content Notification content to send.
///
/// \param target Notification recipients.
///
/// \param success Called with the number of successfully delivered notifications.
///
/// \param failure Called if operation failed.
///
+ (void)sendNotificationContent:(GetSocialNotificationContent * _Nonnull)content target:(GetSocialSendNotificationTarget * _Nonnull)target success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Register device for Push Notifications.
+ (void)registerDevice;
/// Set listener to be invoked when a Push Notification was clicked.
/// \param listener Handler to be invoked.
///
+ (void)setOnNotificationClickedListener:(void (^ _Nonnull)(GetSocialNotification * _Nonnull, GetSocialNotificationContext * _Nonnull))listener;
/// Set listener to be invoked when a Push Notification was received.
/// \param listener Listener to be invoked.
///
+ (void)setOnNotificationReceivedListener:(void (^ _Nonnull)(GetSocialNotification * _Nonnull))listener;
/// Set listener to be invoked when device was registered for Push Notifications.
/// \param listener Listener to be invoked.
///
+ (void)setOnTokenReceivedListener:(void (^ _Nonnull)(NSString * _Nonnull))listener;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe activities paging query.
SWIFT_CLASS_NAMED("NotificationsPagingQuery")
@interface GetSocialNotificationsPagingQuery : GetSocialPagingQuery
@property (nonatomic, readonly, strong) GetSocialNotificationsQuery * _Nonnull query;
/// Constructor.
/// \param query <code>NotificationsQuery</code> instance.
///
///
/// returns:
///
/// New <code>NotificationsQuery</code> instance.
- (nonnull instancetype)initWithQuery:(GetSocialNotificationsQuery * _Nonnull)query OBJC_DESIGNATED_INITIALIZER;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Result of getting notifications method.
SWIFT_CLASS_NAMED("NotificationsPagingResult")
@interface GetSocialNotificationsPagingResult : GetSocialPagingResult
/// List of notifications.
@property (nonatomic, readonly, copy) NSArray<GetSocialNotification *> * _Nonnull notifications;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Describe a query to get notifications.
SWIFT_CLASS_NAMED("NotificationsQuery")
@interface GetSocialNotificationsQuery : NSObject
/// Notification types.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull types;
/// Notification statuses.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull statuses;
/// Notification actions.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull actions;
/// Create query to get notifications with specified statuses.
/// - parameters:
/// - statuses:     List of statuses.
/// - returns:
/// New <code>NotificationsQuery</code> instance.
+ (GetSocialNotificationsQuery * _Nonnull)withStatuses:(NSArray<NSString *> * _Nonnull)statuses SWIFT_WARN_UNUSED_RESULT;
/// Create query to get notifications with any statuses.
/// - returns:
/// New <code>NotificationsQuery</code> instance.
+ (GetSocialNotificationsQuery * _Nonnull)withAllStatuses SWIFT_WARN_UNUSED_RESULT;
/// Append type to query.
/// \param type Type to append.
///
///
/// returns:
///
/// Modified <code>NotificationsQuery</code> instance.
- (GetSocialNotificationsQuery * _Nonnull)appendType:(NSString * _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
/// Append status to query.
/// \param status Type to append.
///
///
/// returns:
///
/// Modified <code>NotificationsQuery</code> instance.
- (GetSocialNotificationsQuery * _Nonnull)appendStatus:(NSString * _Nonnull)status SWIFT_WARN_UNUSED_RESULT;
/// Append action to query.
/// \param action Type to append.
///
///
/// returns:
///
/// Modified <code>NotificationsQuery</code> instance.
- (GetSocialNotificationsQuery * _Nonnull)appendAction:(NSString * _Nonnull)action SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC12GetSocialSDK16OldInviteContent")
@interface OldInviteContent : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end










/// Describe post activity target.
SWIFT_CLASS_NAMED("PostActivityTarget")
@interface GetSocialPostActivityTarget : NSObject
/// Target is a specific topic.
/// - parameters:
/// - id:       Topic id.
/// - returns:
/// <code>PostActivityTarget</code> instance.
+ (GetSocialPostActivityTarget * _Nonnull)topicWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Target is current user’s timeline.
/// - returns:
/// <code>PostActivityTarget</code> instance.
+ (GetSocialPostActivityTarget * _Nonnull)timeline SWIFT_WARN_UNUSED_RESULT;
/// Target is a specific group.
/// - parameters:
/// - id:       Group id.
/// - returns:
/// <code>PostActivityTarget</code> instance.
+ (GetSocialPostActivityTarget * _Nonnull)groupWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Target is a specific activity.
/// - parameters:
/// - activityId:       Activity id.
/// - returns:
/// <code>PostActivityTarget</code> instance.
+ (GetSocialPostActivityTarget * _Nonnull)commentTo:(NSString * _Nonnull)activityId SWIFT_WARN_UNUSED_RESULT;
/// Target type.
/// - returns:
/// <code>CommunityEntityType</code> instance.
- (enum GetSocialCommunitiesEntityType)type SWIFT_WARN_UNUSED_RESULT;
/// Target id.
/// - returns:
/// Id of target.
- (NSString * _Nonnull)targetId SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Private class.
SWIFT_CLASS_NAMED("PrivateActivityBuilder")
@interface GetSocialPrivateActivityBuilder : NSObject
/// Private method.
+ (void)likeActivity:(GetSocialActivity * _Nonnull)activity isLiked:(BOOL)isLiked;
/// Private method.
+ (GetSocialActivity * _Nonnull)commentActivity:(GetSocialActivity * _Nonnull)activity SWIFT_WARN_UNUSED_RESULT;
+ (GetSocialActivity * _Nonnull)removeCommentFromActivity:(GetSocialActivity * _Nonnull)activity SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Private class.
SWIFT_CLASS_NAMED("PrivateGroupBuilder")
@interface GetSocialPrivateGroupBuilder : NSObject
/// Private method.
+ (void)updateGroup:(GetSocialGroup * _Nonnull)group isFollowed:(BOOL)isFollowed;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12GetSocialSDK31PrivateInternetConnectedUseCase")
@interface PrivateInternetConnectedUseCase : UseCase
- (BOOL)isInternetConnected SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12GetSocialSDK22PrivateMetaDataUseCase")
@interface PrivateMetaDataUseCase : UseCase
+ (BOOL)shouldAutoInitSdk SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)uiConfigurationFile SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)disablePushNotifications SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Private class.
SWIFT_CLASS_NAMED("PrivateNotificationBuilder")
@interface GetSocialPrivateNotificationBuilder : NSObject
/// Private method.
+ (GetSocialNotification * _Nonnull)updateNotification:(GetSocialNotification * _Nonnull)notification newStatus:(NSString * _Nonnull)newStatus SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12GetSocialSDK33PrivateSessionStateHandlerUseCase")
@interface PrivateSessionStateHandlerUseCase : UseCase
- (BOOL)isInitialized SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isInitializing SWIFT_WARN_UNUSED_RESULT;
- (void)addOnInitializeListener:(void (^ _Nonnull)(void))listener;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12GetSocialSDK33PrivateSetUIActionListenerUseCase")
@interface PrivateSetUIActionListenerUseCase : UseCase
+ (void)setUIActionListener:(BOOL (^ _Nonnull)(GetSocialAction * _Nonnull))listener;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12GetSocialSDK41PrivateStartPendingHandlersInvokerUseCase")
@interface PrivateStartPendingHandlersInvokerUseCase : UseCase
- (void)private_execute;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Private class.
SWIFT_CLASS_NAMED("PrivateTopicBuilder")
@interface GetSocialPrivateTopicBuilder : NSObject
/// Private method.
+ (void)updateTopic:(GetSocialTopic * _Nonnull)topic isFollowed:(BOOL)isFollowed;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSError;

SWIFT_CLASS("_TtC12GetSocialSDK33PrivateTrackAnalyticsEventUseCase")
@interface PrivateTrackAnalyticsEventUseCase : UseCase
- (void)private_trackUIEvent:(NSString * _Nonnull)eventName properties:(NSDictionary<NSString *, NSString *> * _Nullable)properties;
- (void)private_trackUIError:(NSError * _Nonnull)error;
- (void)private_trackAppDidBecomeInactive;
- (void)private_trackAppSessionEvent;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end






/// Define purchase types.
typedef SWIFT_ENUM_NAMED(NSInteger, GetSocialProductType, "ProductType", open) {
/// Consumable or non-consumable item.
  GetSocialProductTypeItem = 0,
/// Subscription.
  GetSocialProductTypeSubscription = 1,
};


/// Describe promo code object.
SWIFT_CLASS_NAMED("PromoCode")
@interface GetSocialPromoCode : NSObject
/// Promo code.
@property (nonatomic, readonly, copy) NSString * _Nonnull code;
/// Attached data.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull properties;
/// Number of maximum claims.
@property (nonatomic, readonly) NSInteger maxClaimCount;
/// Start date.
@property (nonatomic, readonly) int64_t startDate;
/// End date.
@property (nonatomic, readonly) int64_t endDate;
/// Creator.
@property (nonatomic, readonly, strong) GetSocialUser * _Nonnull creator;
/// Number of claims.
@property (nonatomic, readonly) NSInteger claimCount;
/// Enabled or not.
@property (nonatomic, readonly) BOOL isEnabled;
/// Claimable or not.
@property (nonatomic, readonly) BOOL isClaimable;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe promo code content.
SWIFT_CLASS_NAMED("PromoCodeContent")
@interface GetSocialPromoCodeContent : NSObject
/// Promo code.
@property (nonatomic, copy) NSString * _Nullable code;
/// Attached data.
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull properties;
/// Start date.
@property (nonatomic, copy) NSDate * _Nullable startDate;
/// End date.
@property (nonatomic, copy) NSDate * _Nullable endDate;
/// Number of maximum claims.
@property (nonatomic) NSInteger maxClaims;
/// Create a promo code with random code.
///
/// returns:
///
/// New <code>PromoCodeContent</code> instance.
+ (GetSocialPromoCodeContent * _Nonnull)withRandomCode SWIFT_WARN_UNUSED_RESULT;
/// Create a promo code with the specified code.
/// \param code Promo code.
///
///
/// returns:
///
/// New <code>PromoCodeContent</code> instance.
+ (GetSocialPromoCodeContent * _Nonnull)withCode:(NSString * _Nonnull)code SWIFT_WARN_UNUSED_RESULT;
/// Set time limit of promo code.
/// \param startDate Start date.
///
/// \param endDate End date.
///
- (void)setTimeLimitWithStartDate:(NSDate * _Nullable)startDate endDate:(NSDate * _Nullable)endDate;
/// Set promo code data.
/// \param value Value to set.
///
/// \param forKey Key for the value.
///
- (void)setPropertyValue:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)forKey;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Interface for Promo Codes.
SWIFT_CLASS_NAMED("PromoCodes")
@interface GetSocialPromoCodes : NSObject
/// Create a promo code.
/// \param content Promo code content.
///
/// \param success Called with created <code>PromoCode</code> instance.
///
/// \param failure Called if operation failed.
///
+ (void)createWithContent:(GetSocialPromoCodeContent * _Nonnull)content success:(void (^ _Nonnull)(GetSocialPromoCode * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Retrieve a <code>PromoCode</code> instance by code.
/// \param code Promo code.
///
/// \param success Called with retrieved <code>PromoCode</code> instance.
///
/// \param failure Called if operation failed, or <code>PromoCode</code> does not exists with provided <code>code</code>.
///
+ (void)getWithCode:(NSString * _Nonnull)code success:(void (^ _Nonnull)(GetSocialPromoCode * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Claim a promo code.
/// \param code Promo code to claim.
///
/// \param success Called with claimed <code>PromoCode</code> instance.
///
/// \param failure Called if operation failed, or <code>PromoCode</code> does not exists, expired or already claimed.
///
+ (void)claimWithCode:(NSString * _Nonnull)code success:(void (^ _Nonnull)(GetSocialPromoCode * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Define purchase data.
SWIFT_CLASS_NAMED("PurchaseData")
@interface GetSocialPurchaseData : NSObject
/// Product Id.
@property (nonatomic, copy) NSString * _Nonnull productId;
/// Product Type.
@property (nonatomic) enum GetSocialProductType productType;
/// Product title.
@property (nonatomic, copy) NSString * _Nonnull productTitle;
/// Product price.
@property (nonatomic) float price;
/// Price currency.
@property (nonatomic, copy) NSString * _Nullable priceCurrency;
/// Date of purchase.
@property (nonatomic, copy) NSDate * _Nullable purchaseDate;
/// Transaction identifier.
@property (nonatomic, copy) NSString * _Nonnull transactionIdentifier;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC12GetSocialSDK34PushNotificationInteractionUseCase")
@interface PushNotificationInteractionUseCase : UseCase
- (void)trackReceivedNotificationWithNotification:(NotificationRepresentation * _Nonnull)notification;
- (void)trackNotificationClickWithNotification:(NotificationRepresentation * _Nonnull)notification;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Define reaction.
SWIFT_CLASS_NAMED("Reactions")
@interface GetSocialReactions : NSObject
/// Like.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull like;)
+ (NSString * _Nonnull)like SWIFT_WARN_UNUSED_RESULT;
/// Love.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull love;)
+ (NSString * _Nonnull)love SWIFT_WARN_UNUSED_RESULT;
/// Haha.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull haha;)
+ (NSString * _Nonnull)haha SWIFT_WARN_UNUSED_RESULT;
/// Wow.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull wow;)
+ (NSString * _Nonnull)wow SWIFT_WARN_UNUSED_RESULT;
/// Sad.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sad;)
+ (NSString * _Nonnull)sad SWIFT_WARN_UNUSED_RESULT;
/// Angry.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull angry;)
+ (NSString * _Nonnull)angry SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class GetSocialReactionsQuery;

/// Reactions paging query.
SWIFT_CLASS_NAMED("ReactionsPagingQuery")
@interface GetSocialReactionsPagingQuery : GetSocialPagingQuery
@property (nonatomic, readonly, strong) GetSocialReactionsQuery * _Nonnull query;
/// Constructor.
/// \param query <code>ReactionsQuery</code> instance.
///
///
/// returns:
///
/// New <code>ReactionsPagingQuery</code> instance.
- (nonnull instancetype)initWithQuery:(GetSocialReactionsQuery * _Nonnull)query OBJC_DESIGNATED_INITIALIZER;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Result of getting reactions method.
SWIFT_CLASS_NAMED("ReactionsPagingResult")
@interface GetSocialReactionsPagingResult : GetSocialPagingResult
/// List of reactions.
@property (nonatomic, readonly, copy) NSArray<GetSocialUserReactions *> * _Nonnull reactions;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Describe a query to get reaction.
SWIFT_CLASS_NAMED("ReactionsQuery")
@interface GetSocialReactionsQuery : NSObject
/// Reaction to filter. If not set, all reactions will be returned.
@property (nonatomic, copy) NSString * _Nullable reaction;
/// Create query to get reactions for an activity.
/// \param id Activity id.
///
///
/// returns:
///
/// New <code>ReactionsQuery</code> instance.
+ (GetSocialReactionsQuery * _Nonnull)forActivityWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end






/// Define referral data.
SWIFT_CLASS_NAMED("ReferralData")
@interface GetSocialReferralData : NSObject
/// Invite token.
@property (nonatomic, readonly, copy) NSString * _Nonnull token;
/// Referrer user id.
@property (nonatomic, readonly, copy) NSString * _Nullable referrerUserId;
/// Referrer channel id.
@property (nonatomic, readonly, copy) NSString * _Nonnull referrerChannelId;
/// Indicate if first match.
@property (nonatomic, readonly) BOOL isFirstMatch;
/// Indicate if guaranteed match.
@property (nonatomic, readonly) BOOL isGuaranteedMatch;
/// Indicate if reinstall.
@property (nonatomic, readonly) BOOL isReinstall;
/// Indicate if first match is link.
@property (nonatomic, readonly) BOOL isFirstMatchLink;
/// Link parameters.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull linkParams;
/// Original link parameters.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull originalLinkParams;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end






SWIFT_CLASS("_TtC12GetSocialSDK19ReferralDataUseCase")
@interface ReferralDataUseCase : UseCase
- (void)clear;
- (void)onPause;
- (BOOL)onResumeWithSourceApplication:(NSString * _Nullable)sourceApplication referrer:(NSURL * _Nullable)referrer SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe referral user.
SWIFT_CLASS_NAMED("ReferralUser")
@interface GetSocialReferralUser : GetSocialUser
/// Event date.
@property (nonatomic, readonly) NSUInteger eventDate;
/// Event.
@property (nonatomic, readonly, copy) NSString * _Nullable event;
/// Event data.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull eventData;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class GetSocialReferralUsersQuery;

/// Describe referral users paging query.
SWIFT_CLASS_NAMED("ReferralUsersPagingQuery")
@interface GetSocialReferralUsersPagingQuery : GetSocialPagingQuery
/// Constructor.
/// \param query <code>ReferralUsersQuery</code> instance.
///
///
/// returns:
///
/// New <code>ReferralUsersQuery</code> instance.
- (nonnull instancetype)initWithQuery:(GetSocialReferralUsersQuery * _Nonnull)query OBJC_DESIGNATED_INITIALIZER;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Result of getting referral users method.
SWIFT_CLASS_NAMED("ReferralUsersPagingResult")
@interface GetSocialReferralUsersPagingResult : GetSocialPagingResult
/// List of users.
@property (nonatomic, readonly, copy) NSArray<GetSocialReferralUser *> * _Nonnull users;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end




/// Describe query to get referral users.
SWIFT_CLASS_NAMED("ReferralUsersQuery")
@interface GetSocialReferralUsersQuery : GetSocialPagingQuery
/// Create query to get referral users.
///
/// returns:
///
/// New <code>ReferralUsersQuery</code> instance.
+ (GetSocialReferralUsersQuery * _Nonnull)allUsers SWIFT_WARN_UNUSED_RESULT;
/// Create query to get referral users for the specified event.
/// \param event Event name.
///
///
/// returns:
///
/// New <code>ReferralUsersQuery</code> instance.
+ (GetSocialReferralUsersQuery * _Nonnull)usersForEvent:(NSString * _Nonnull)event SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC12GetSocialSDK27RegisterOnPushServerUseCase")
@interface RegisterOnPushServerUseCase : UseCase
- (void)executeWithToken:(NSString * _Nonnull)token sandbox:(BOOL)sandbox;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe remove activities query.
SWIFT_CLASS_NAMED("RemoveActivitiesQuery")
@interface GetSocialRemoveActivitiesQuery : NSObject
/// Create query to remove activities.
/// \param ids List of activity ids to remove.
///
///
/// returns:
///
/// New <code>RemoveActivitiesQuery</code> instance.
+ (GetSocialRemoveActivitiesQuery * _Nonnull)activitiesWithIds:(NSArray<NSString *> * _Nonnull)ids SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12GetSocialSDK23RemoveGroupMembersQuery")
@interface RemoveGroupMembersQuery : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Describe reporting reason.
typedef SWIFT_ENUM_NAMED(NSInteger, GetSocialReportingReason, "ReportingReason", open) {
/// Spam.
  GetSocialReportingReasonSpam = 0,
/// Inappropriate content.
  GetSocialReportingReasonInappropriateContent = 1,
};

typedef SWIFT_ENUM_NAMED(NSInteger, GetSocialMemberRole, "Role", open) {
/// Owner
  GetSocialMemberRoleOwner = 0,
/// Admin
  GetSocialMemberRoleAdmin = 1,
/// Member
  GetSocialMemberRoleMember = 3,
/// Followers, used only in Topics permissions
  GetSocialMemberRoleFollower = 4,
/// Everyone, used only in Topics permissions
  GetSocialMemberRoleEveryone = 5,
};


/// Describe notification target.
SWIFT_CLASS_NAMED("SendNotificationTarget")
@interface GetSocialSendNotificationTarget : NSObject
/// Create target with user ids.
/// \param ids User ids.
///
///
/// returns:
///
/// New <code>SendNotificationTarget</code> instance.
+ (GetSocialSendNotificationTarget * _Nonnull)usersWithIds:(GetSocialUserIdList * _Nonnull)ids SWIFT_WARN_UNUSED_RESULT;
/// Add placeholder to define receivers.
/// \param placeholder Receiver placeholder, as defined <code>NotificationReceiversPlaceholders</code>.
///
///
/// returns:
///
/// New <code>SendNotificationTarget</code> instance.
- (GetSocialSendNotificationTarget * _Nonnull)addReceiverPlaceholder:(NSString * _Nonnull)placeholder SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC12GetSocialSDK43SetNotificationsStatusUpdateListenerUseCase")
@interface SetNotificationsStatusUpdateListenerUseCase : UseCase
+ (void)setNotificationsStatusUpdateListener:(void (^ _Nullable)(NSArray<NSString *> * _Nonnull, NSString * _Nonnull))listener;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe a suggested friend.
SWIFT_CLASS_NAMED("SuggestedFriend")
@interface GetSocialSuggestedFriend : GetSocialUser
/// Number of mutual friends with current user.
@property (nonatomic, readonly) NSInteger mutualFriendsCount;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe suggested friends paging query.
SWIFT_CLASS_NAMED("SuggestedFriendsPagingQuery")
@interface GetSocialSuggestedFriendsPagingQuery : GetSocialPagingQuery
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// Result of getting suggested friends method.
SWIFT_CLASS_NAMED("SuggestedFriendsPagingResult")
@interface GetSocialSuggestedFriendsPagingResult : GetSocialPagingResult
/// List of suggested friends.
@property (nonatomic, readonly, copy) NSArray<GetSocialSuggestedFriend *> * _Nonnull suggestedFriends;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC12GetSocialSDK20SwiftComponentHelper")
@interface SwiftComponentHelper : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull mediaUploader;)
+ (NSString * _Nonnull)mediaUploader SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull reachability;)
+ (NSString * _Nonnull)reachability SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull atomicIntegerProvider;)
+ (NSString * _Nonnull)atomicIntegerProvider SWIFT_WARN_UNUSED_RESULT;
+ (void)reset;
+ (void)registerComponentsWithObjcComponents:(NSDictionary<NSString *, id> * _Nonnull)objcComponents;
+ (void)registerTestComponents;
+ (void)setPushRegistrator:(void (^ _Nonnull)(void))block;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe query to get tags.
SWIFT_CLASS_NAMED("TagsQuery")
@interface GetSocialTagsQuery : NSObject
@property (nonatomic, strong) GetSocialPostActivityTarget * _Nullable inTarget;
/// Create query to find tags.
/// \param searchTerm Search term.
///
///
/// returns:
///
/// New <code>TagsQuery</code> instance.
+ (GetSocialTagsQuery * _Nonnull)find:(NSString * _Nonnull)searchTerm SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Describe topic object.
SWIFT_CLASS_NAMED("Topic")
@interface GetSocialTopic : NSObject
/// Topic identifier
@property (nonatomic, readonly, copy) NSString * _Nonnull topicId;
/// Topic localized title
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// Topic localized description
@property (nonatomic, readonly, copy) NSString * _Nullable topicDescription;
/// Avatar Url
@property (nonatomic, readonly, copy) NSString * _Nullable avatarUrl;
/// Creation date
@property (nonatomic, readonly) int64_t createdAt;
/// Last update
@property (nonatomic, readonly) int64_t updatedAt;
/// Setting
@property (nonatomic, readonly, strong) GetSocialCommunitiesSettings * _Nonnull settings;
/// Number of followers
@property (nonatomic, readonly) NSInteger followersCount;
/// Current user is follower or not
@property (nonatomic, readonly) BOOL isFollowedByMe;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describe topics paging query.
SWIFT_CLASS_NAMED("TopicsPagingQuery")
@interface GetSocialTopicsPagingQuery : GetSocialPagingQuery
@property (nonatomic, readonly, strong) GetSocialTopicsQuery * _Nonnull query;
/// Constructor.
/// \param query <code>TopicsQuery</code> instance.
///
///
/// returns:
///
/// New <code>TopicsPagingQuery</code> instance.
- (nonnull instancetype)initWithQuery:(GetSocialTopicsQuery * _Nonnull)query OBJC_DESIGNATED_INITIALIZER;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Result of getting topics method.
SWIFT_CLASS_NAMED("TopicsPagingResult")
@interface GetSocialTopicsPagingResult : GetSocialPagingResult
/// List of topics.
@property (nonatomic, readonly, copy) NSArray<GetSocialTopic *> * _Nonnull topics;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Describe query to get topics.
SWIFT_CLASS_NAMED("TopicsQuery")
@interface GetSocialTopicsQuery : NSObject
/// Create a query to find a topic.
/// \param searchTerm Search term.
///
///
/// returns:
///
/// New <code>TopicsQuery</code> instance.
+ (GetSocialTopicsQuery * _Nonnull)find:(NSString * _Nonnull)searchTerm SWIFT_WARN_UNUSED_RESULT;
/// Create a query to get topics.
///
/// returns:
///
/// New <code>TopicsQuery</code> instance.
+ (GetSocialTopicsQuery * _Nonnull)all SWIFT_WARN_UNUSED_RESULT;
/// Filters topics followed by a specific user.
/// \param id User id.
///
- (GetSocialTopicsQuery * _Nonnull)followedByUserWithId:(GetSocialUserId * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end








/// Describe updating group members query.
SWIFT_CLASS_NAMED("UpdateGroupMembersQuery")
@interface GetSocialUpdateGroupMembersQuery : NSObject
/// Create a query to update group members.
/// \param id Group Id.
///
/// \param userIds User ids.
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id userIds:(GetSocialUserIdList * _Nonnull)userIds OBJC_DESIGNATED_INITIALIZER;
/// New status of users.
/// \param status New member status.
///
///
/// returns:
///
/// <ul>
///   <li>
///     <code>UpdateGroupMembersQuery</code> instance.
///   </li>
/// </ul>
- (GetSocialUpdateGroupMembersQuery * _Nonnull)withMemberStatus:(enum GetSocialMemberStatus)status SWIFT_WARN_UNUSED_RESULT;
/// New role of users.
/// \param role New member role.
///
///
/// returns:
///
/// <ul>
///   <li>
///     <code>UpdateGroupMembersQuery</code> instance.
///   </li>
/// </ul>
- (GetSocialUpdateGroupMembersQuery * _Nonnull)withRole:(enum GetSocialMemberRole)role SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end












/// Describe an external user id.
SWIFT_CLASS_NAMED("UserId")
@interface GetSocialUserId : NSObject
- (nonnull instancetype)init:(NSString * _Nonnull)userId providerId:(NSString * _Nullable)providerId OBJC_DESIGNATED_INITIALIZER;
/// Create a UserId instance with an external user id.
/// - parameters:
/// - id:       Id of user.
/// - returns:
/// New <code>UserId</code> instance.
+ (GetSocialUserId * _Nonnull)create:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Create a UserId instance with an external user id and provider id.
/// - parameters:
/// - provider:   Provider id.
/// - id:           Id of user.
/// - returns:
/// New <code>UserId</code> instance.
+ (GetSocialUserId * _Nonnull)createWithProvider:(NSString * _Nonnull)provider id:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Create a UserId instance with current user.
/// New <code>UserId</code> instance.
+ (GetSocialUserId * _Nonnull)currentUser SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Describe list of external user ids.
SWIFT_CLASS_NAMED("UserIdList")
@interface GetSocialUserIdList : NSObject
/// Create a UserId instance with a list of external user ids.
/// - parameters:
/// - ids:          Ids of users.
/// - returns:
/// New <code>UserId</code> instance.
+ (GetSocialUserIdList * _Nonnull)create:(NSArray<NSString *> * _Nonnull)ids SWIFT_WARN_UNUSED_RESULT;
/// Create a UserId instance with a list of external user ids and provider id.
/// - parameters:
/// - provider:   Provider id.
/// - id:           Ids of users.
/// - returns:
/// New <code>UserId</code> instance.
+ (GetSocialUserIdList * _Nonnull)createWithProvider:(NSString * _Nonnull)provider ids:(NSArray<NSString *> * _Nonnull)ids SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Describe a reaction created by a user.
SWIFT_CLASS_NAMED("UserReactions")
@interface GetSocialUserReactions : NSObject
/// User, who created the reaction.
@property (nonatomic, readonly, strong) GetSocialUser * _Nonnull user;
/// List of reactions.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull reactions;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Describe a lightweight user object.
SWIFT_CLASS_NAMED("UserReference")
@interface GetSocialUserReference : NSObject
/// User id.
@property (nonatomic, readonly, copy) NSString * _Nullable userId;
/// Display name.
@property (nonatomic, readonly, copy) NSString * _Nonnull displayName;
/// Avatar url.
@property (nonatomic, readonly, copy) NSString * _Nullable avatarUrl;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Describe user update object.
SWIFT_CLASS_NAMED("UserUpdate")
@interface GetSocialUserUpdate : NSObject
/// New display name.
@property (nonatomic, copy) NSString * _Nullable displayName;
/// New avatar Url.
@property (nonatomic, copy) NSString * _Nullable avatarUrl;
/// New avatar image.
@property (nonatomic, strong) UIImage * _Nullable avatar;
/// Public properties to modify
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull publicProperties;
/// Private properties to modify
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull privateProperties;
/// Remove public property.
- (void)removePublicPropertyWithKey:(NSString * _Nonnull)forKey;
/// Set public property.
/// \param value Value to set.
///
/// \param forKey Key for the value.
///
- (void)setPublicPropertyValue:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)forKey;
/// Set private property.
/// \param value Value to set.
///
/// \param forKey Key for the value.
///
- (void)setPrivatePropertyValue:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)forKey;
/// Remove private property.
- (void)removePrivatePropertyWithKey:(NSString * _Nonnull)forKey;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end






/// Describe users paging query.
SWIFT_CLASS_NAMED("UsersPagingQuery")
@interface GetSocialUsersPagingQuery : GetSocialPagingQuery
@property (nonatomic, readonly, strong) GetSocialUsersQuery * _Nonnull query;
/// Constructor.
/// \param query <code>UsersQuery</code> instance.
///
///
/// returns:
///
/// New <code>UsersPagingQuery</code> instance.
- (nonnull instancetype)initWithQuery:(GetSocialUsersQuery * _Nonnull)query OBJC_DESIGNATED_INITIALIZER;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Result of getting users method.
SWIFT_CLASS_NAMED("UsersPagingResult")
@interface GetSocialUsersPagingResult : GetSocialPagingResult
/// List of users.
@property (nonatomic, readonly, copy) NSArray<GetSocialUser *> * _Nonnull users;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Describe a query to get users.
SWIFT_CLASS_NAMED("UsersQuery")
@interface GetSocialUsersQuery : NSObject
/// Create a query to find users.
/// \param searchTerm Search term.
///
///
/// returns:
///
/// New <code>UsersQuery</code> instance.
+ (GetSocialUsersQuery * _Nonnull)find:(NSString * _Nonnull)searchTerm SWIFT_WARN_UNUSED_RESULT;
/// Create a query to find users who are followed by the specified user.
/// \param id UserId.
///
///
/// returns:
///
/// New <code>UsersQuery</code> instance.
+ (GetSocialUsersQuery * _Nonnull)followedBy:(GetSocialUserId * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
#endif
